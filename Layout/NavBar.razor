@inject IJSRuntime JS;
@inject NavigationManager Navs
@inject GospelReachCapstone.Services.FirebaseAuthenticationService AuthService
@inject AuthState auth
@inherits ProtectedPageBase
@inject ToastService _toast

<div @onclick:stopPropagation class="side-parent">
    <div @onclick:stopPropagation class="side-parent-content">
        <nav @onclick:stopPropagation class="w-100">

            <!--Pages Section-->
            <div class="@GetClass(0, "link")" @onclick="() => SetActive(0)">
                <i class="bi bi-house-door"></i>
                <a href="dashboard" class="text-decoration-none c2">Dashboard</a>
            </div>

            <div hidden="@(auth.Role == "Music Head" || auth.Role == "Guest")">
                <!--Management-->
                <h3 class="sidebar-heading">MANAGEMENT</h3>

                <!--Admin-->
                <div hidden="@(auth.Role != "Administrator")" class="@GetClass(1, "link")" @onclick="() => SetActive(1)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-person"></i>
                    </div>
                    <a href="user-management" class="text-decoration-none c2">User</a>
                </div>

                <!--Member Management-->
                <div hidden="@(auth.Role != "Administrator" && auth.Role != "Pastor")" class="@GetClass(3, "link")" @onclick="() => SetActive(3)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-people"></i>
                    </div>
                    <a href="membermanagement" class="text-decoration-none c2">Member</a>
                </div>

                <!--Departments-->
                <div  class="@GetClass(2, "link")" @onclick="() => SetActive(2)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-building"></i>
                    </div>
                    <a href="departments" class="text-decoration-none c2">Departments</a>
                </div>
            </div>
            
            <div hidden="@(auth.Role != "Administrator" && auth.Role != "Pastor" && auth.Role != "Music Head" && auth.Role != "Guest")">
                <!--Content-->
                <h3 class="sidebar-heading">CONTENT</h3>

                <!--Media Files-->
                <div hidden="@(auth.Role != "Administrator" && auth.Role != "Pastor")" class="@GetClass(7, "link")" @onclick="() => SetActive(7)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-film"></i>
                    </div>
                    <a href="media" class="text-decoration-none c2">Media Files</a>
                </div>

                <!--Music-->
                <div class="@GetClass(8, "link")" @onclick="() => SetActive(8)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-music-note"></i>
                    </div>
                    <a href="music" class="text-decoration-none c2">Music</a>
                </div>
            </div>
            

            <!--Planning-->
            <h3 hidden="@(auth.Role == "Guest")" class="sidebar-heading">PLANNING</h3>

            <!--Events-->
            @* <div class="@GetClass(8, "link")" @onclick="() => SetActive(8)">
                <div class="d-flex align-items-center">
                    <i class="bi bi-calendar-check"></i>
                </div>
                <a href="events" class="text-decoration-none c2">Events</a>
            </div> *@

            <!--Group Management-->
            <div hidden="@(auth.Role != "Administrator")" class="@GetClass(4, "link")" @onclick="() => SetActive(4)">
                <div class="d-flex align-items-center">
                    <i class="bi bi-collection"></i>
                </div>
                <a href="notification" class="text-decoration-none c2">Group</a>
            </div>

            <!--Schedules-->
            <div class="@GetClass(9, "link")" @onclick="() => SetActive(9)">
                <div class="d-flex align-items-center">
                    <i class="bi bi-clock"></i>
                </div>
                <a href="schedules" class="text-decoration-none c2">Schedules</a>
            </div>

            <div hidden="@(auth.Role == "Guest")">
                <!--Tracking-->
                <h3 class="sidebar-heading">TRACKING</h3>

                <!--Attendance-->
                <div class="@GetClass(5, "link")" @onclick="() => SetActive(5)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-bar-chart"></i>
                    </div>
                    <a @onclick="() => SetActive(5)" class="text-decoration-none c2">Attendance</a>
                </div>

                <!--Finance-->
                <div class="@GetClass(6, "link")" @onclick="() => SetActive(6)">
                    <div class="d-flex align-items-center">
                        <i class="bi bi-piggy-bank"></i>
                    </div>
                    <a @onclick="() => SetActive(6)" class="text-decoration-none c2">Finance</a>
                </div>
            </div>
            
        </nav>
    </div>

    <!--Users Section-->
    <div class="side-foot d-flex align-items-center justify-content-between gap-2">
        <div class="d-flex align-items-center gap-2">
            <div class="profile">
                <p>@initialName</p>
            </div>
            <div>
                <p class="fs-6 m-0">@auth.DisplayName</p>
                <p class="c2 m-0" style="font-size:12px;">@auth.Role</p>
            </div>
        </div>
        
        <button class="btn p-0" @onclick="ToggleModal"><i class="bi bi-box-arrow-right fs-4"></i></button>
    </div>
</div>

<div @onclick:stopPropagation @onclick="ToggleModal" class="logoutModal @(isAddUserModalVisible ? "show" : "")">
    <!--Confirm Modal-->
    <div @onclick:stopPropagation class="helperModal">
        <div class="confirm">
            <h1>Confirm Logout</h1>
            <p>You are about to logout</p>
        </div>

        <div class="@(isUpdating ? "updating" : "dnone")">
            <p>Logging out...</p>
        </div>


        <div class="actions">
            <button disabled="@(isUpdating)" class="btn p-2 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
            <button disabled="@(isUpdating)" class="btn btn-danger text-white p-2 fs-5" @onclick="Logout" style="font-size: 13px; border: 1px solid #dee2e6;">Confirm</button>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public EventCallback OnActiveChanged { get; set; }
    private char initialName = 'A';
    private int activeIndex = 0;
    private bool isSubDepartmentVisible { get; set; } = false;
    private bool isUpdating = false;
    private bool isAddUserModalVisible = false;

    protected override void OnInitialized()
    {
        getInitial();
    }

    private void getInitial()
    {
        if (auth.DisplayName != null)
        {
            initialName = auth.DisplayName[0];
        }
    }

    private async Task SetActive(int index)
    {
        activeIndex = index;
        switch (index)
        {
            case 0:
                Navs.NavigateTo("dashboard");
                isSubDepartmentVisible = false;
                break;
            case 1:
                Navs.NavigateTo("user-management");
                isSubDepartmentVisible = false;
                break;
            case 2:
                Navs.NavigateTo("departments");
                isSubDepartmentVisible = !isSubDepartmentVisible;
                break;
            case 3:
                Navs.NavigateTo("membermanagement");
                isSubDepartmentVisible = false;
                break;
            case 4:
                Navs.NavigateTo("notification");
                isSubDepartmentVisible = false;
                break;
            case 5:
                switch (auth.Role)
                {
                    case "Department Head - Senior":
                        auth.Department = "Senior";
                        Navs.NavigateTo("attendance/department");
                        break;
                    case "Department Head - Womens":
                        auth.Department = "Womens";
                        Navs.NavigateTo("attendance/department");
                        break;
                    case "Department Head - Mens":
                        auth.Department = "Mens";
                        Navs.NavigateTo("attendance/department");
                        break;
                    case "Department Head - Youth":
                        auth.Department = "Youth";
                        Navs.NavigateTo("attendance/department");
                        break;
                    default:
                        Navs.NavigateTo("attendance");
                        break;
                }
                isSubDepartmentVisible = false;
                break;
            case 6:
                switch (auth.Role)
                {
                    case "Department Head - Senior":
                        auth.Department = "Senior";
                        Navs.NavigateTo("finance/department");
                        break;
                    case "Department Head - Womens":
                        auth.Department = "Womens";
                        Navs.NavigateTo("finance/department");
                        break;
                    case "Department Head - Mens":
                        auth.Department = "Mens";
                        Navs.NavigateTo("finance/department");
                        break;
                    case "Department Head - Youth":
                        auth.Department = "Youth";
                        Navs.NavigateTo("finance/department");
                        break;
                    default:
                        Navs.NavigateTo("finance");
                        break;
                }
                isSubDepartmentVisible = false;
                break;
            case 7:
                Navs.NavigateTo("media");
                isSubDepartmentVisible = false;
                break;
            case 8:
                Navs.NavigateTo("music");
                isSubDepartmentVisible = false;
                break;
            case 9:
                Navs.NavigateTo("schedules");
                isSubDepartmentVisible = false;
                break;
        }
        await OnActiveChanged.InvokeAsync(); //Notify the homelayout
    }

    private string GetClass(int index, string baseClass)
    {
        return $"{baseClass}{(activeIndex == index ? " active" : "")}";
    }

    private async Task Logout()
    {
        isUpdating = true;
        bool isOnline = await JS.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        await AuthService.LogoutAsync();
        auth = new();
        Navs.NavigateTo("/");
    }

    private void ToggleModal()
    {
        isAddUserModalVisible = !isAddUserModalVisible;
        isUpdating = false;
    }

    // private void GoToDepartmentPage(string name)
    // {
    //     _appState.SelectedDepartmentName = name;
    //     Navs.NavigateTo($"departments/{name}");
    // }
}
