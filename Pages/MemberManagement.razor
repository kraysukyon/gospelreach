@page "/membermanagement"
@layout LandingLayout
@inject GospelReachCapstone.Services.MemberService _memberService
@using GospelReachCapstone.Models
@inject IJSRuntime _js
@inject GospelReachCapstone.Services.GeneralFunctions _gen
@using System.Text.RegularExpressions
@using System.Globalization

<PageTitle>Member Management</PageTitle>


<div class="page">
    <!--ViewModal-->
    <div @onclick="ToggleView" class="viewModal @(isToggleView ? "show" : "")">
        <div @onclick:stopPropagation class="viewMember">
            <h4 class="fw-bold">Member Details</h4>

            <div class="input mt-3">
                <p>First Name</p>
                <p>@member.FirstName</p>
            </div>

            <div class="input mt-3">
                <p>Middle Name</p>
                <p>@member.MiddleName</p>
            </div>

            <div class="input mt-3">
                <p>Last Name</p>
                <p>@member.LastName</p>
            </div>

            <div class="input mt-3">
                <p>Gender</p>
                <p>@member.Gender</p>
            </div>

            <div class="input mt-3">
                <p>Email</p>
                <p>@member.Email</p>
            </div>

            <div class="input mt-3">
                <p>Contact</p>
                <p>@member.Contact</p>
            </div>

            <div class="input mt-3">
                <p>Birthdate</p>
                <p>@member.Birthdate</p>
            </div>

            <div class="input mt-3">
                <p>Age</p>
                <p>@member.Age yrs old</p>
            </div>

            <div class="input mt-3">
                <p>Classification</p>
                <p>@member.Classification</p>
            </div>

            <div class="input mt-3">
                <p>Status</p>
                <p>@member.Status</p>
            </div>
        </div>
    </div>

    <!--Add Member Model-->
    <div @onclick="ToggleModal" class="addMemberModal @(isAddModalVisible ? "show" : "")">
        <div class="addMember" @onclick:stopPropagation>
            <h4 class="fw-bold">
                @title
            </h4>
            <p style="font-size:14px;">Create and Manage Members.</p>
            
            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-2">
                    <p>First Name</p>
                    <p class="text-danger fw-bold @(validFirstname ? "d-none" : "")" style="font-size: 12px; padding: 0; margin: 0">This field is required.</p>
                </div>
                
                <input spellcheck="false" @bind="member.FirstName" @onblur="(() => CheckIfValid(nameof(member.FirstName)))" type="text" class="form-control p-2 mt-2 @(validFirstname ? "" : "border-danger")" placeholder="First Name" />
            </div>

            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-1">
                    <p>Middle Name</p>
                    <p style="font-size: 12px; padding: 0; margin: 0; color:gray;">(optional)</p>
                </div>
                <input spellcheck="false" @bind="member.MiddleName" type="text" class="form-control p-2 mt-2" placeholder="Middle Name" />
            </div>

            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-2">
                    <p>Last Name</p>
                    <p class="text-danger fw-bold @(validLastName ? "d-none" : "")" style="font-size: 12px; padding: 0; margin: 0">This field is required.</p>
                </div>
                <input spellcheck="false" @bind="member.LastName" @onblur="(() => CheckIfValid(nameof(member.LastName)))" type="text" class="form-control p-2 mt-2" placeholder="Last Name" />
            </div>

            

            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-1">
                    <p>Email</p>
                    <p style="font-size: 12px; padding: 0; margin: 0; color:gray;">(optional)</p>
                </div>
                <input spellcheck="false" @bind="member.Email" @onblur="(() => CheckIfValidEmail())" type="text" class="form-control p-2 mt-2" placeholder="Email" />
            </div>

            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-1">
                    <p>Contact</p>
                    <p style="font-size: 12px; padding: 0; margin: 0; color:gray;">(optional)</p>
                </div>
                <input spellcheck="false" @bind="member.Contact" type="tel" class="form-control p-2 mt-2" placeholder="Contact Number" />
            </div>

            <div class="userFields mt-3">
                <div class="inputs">
                    <p>Birthdate</p>
                    <input @bind="member.Birthdate" type="date" class="form-control p-2 mt-2" />
                </div>

                <div class="inputs">
                    <p>Gender</p>

                    <select @bind="member.Gender" class="form-select p-2 mt-2">
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
            </div>

            <div class="userFields mt-3">
                <div class="inputs">
                    <p>Classification</p>
                    <select @bind="member.Classification" class="form-select p-2 mt-2">
                        <option value="Soldier">Soldier</option>
                        <option value="Recruit">Recruit</option>
                        <option value="Adherent">Adherent</option>
                        <option value="Junior Soldier">Junior Soldier</option>
                    </select>
                </div>

                <div class="inputs">
                    <p>Status</p>
                    <select @bind="member.Status" class="form-select p-2 mt-2">
                        <option value="Active">Active</option>
                        <option value="InActive">InActive</option>
                    </select>
                </div>
            </div>

            @if (validation.Any())
            {
                <div class="d-flex flex-column justify-content-between mt-3">
                    @foreach (string a in validation)
                    {
                        <p class="text-danger">@a</p>
                    }
                </div>
            }

            <div class="mt-3 @(isAdding ? "d-flex" : "d-none") align-items-center justify-content-center">
                <p>Saving record.Please wait...</p>


                <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                    <img src="/img/loading.svg" style="height:50px; width: 50px;" />
                </div>
            </div>
            

            @if (title == "Add Member")
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Cancel</button>
                    <button class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="addMember">Create</button>
                </div>
            }
            else
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Cancel</button>
                    <button @onclick="UpdateMember" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" >Update</button>
                </div>
            }

        </div>
    </div>

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-column mb-4">
        <div class="d-flex justify-content-between mb-4">
            <div>
                <h4 class="m-0 fw-bold">Member Management</h4>
                <p class="m-0 c2" style="font-size: 14px">Add, update, and manage church members.</p>
            </div>

            <div>
                <button class="btn btn-primary px-4 py-2 text-white" @onclick="ToggleModal">Add Member</button>
            </div>
        </div>
        

        <!--Quick Stats Section-->
        <div class="d-flex flex-column mb-2">
            <div class="d-md-flex d-block justify-content-evenly gap-4">
                <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                    <p class="c2 mb-2" style="font-size:14px;">Total Members</p>
                    <h3 class="m-0 c2 text-primary fw-bold">@totalMembers</h3>
                </div>

                <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                    <p class="c2 mb-2" style="font-size:14px;">Active Members</p>
                    <h3 class="m-0 c2 text-success fw-bold">@activeMembers</h3>
                </div>

                <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                    <p class="c2 mb-2" style="font-size:14px;">New This Month</p>
                    <h3 class="m-0 c2 text-danger fw-bold">@newMembers</h3>
                </div>
            </div>
        </div>
        
    </div>

    <!--Table Section-->
    <div class="cards">

        <!--Search Section-->
        <div class="position-relative">
            <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
            <input @bind="searchstring" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search members..." />
        </div>
        <p class="mb-4 ms-1 @(isLoad ? "" : "d-none")"><em>@load</em></p>

        <div class="table-container mt-4" style="table-layout: fixed;">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Name</th>
                        <th class="thead">Classification</th>
                        <th class="thead">Status</th>
                        <th class="thead">Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var items in FilteredMember)
                    {
                        <tr class="table-row">
                            <td class="table-cell c2">@(items.MiddleName != null ? $"{items.LastName}, {items.FirstName} {items.MiddleName}" : $"{items.LastName}, {items.FirstName}")</td>
                            <td class="table-cell c2">@items.Classification</td>
                            <td class="table-cell c2">@items.Status</td>

                            <td class="table-cell d-flex gap-2" style="padding: 24px 24px; border-bottom: none;">
                                <button class="btn p-2 px-4" @onclick="@(() => ToggleViewModal(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;"><i class="bi bi-info-circle"></i> View</button>
                                <button class="btn p-2 px-4" @onclick="@(() => ToggleUpdateModal(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;"><i class="bi bi-pencil-square"></i> Update</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code{
    private List<string> validation = new();
    TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
    string pattern = @"^[^@\s]+@[^@\s]+\.[^@\s]+$";
    string contactPattern = @"^[0-9]{10,11}$";
    private bool isValid = false;
    private bool isToggleView = false;
    private bool isAdding = false;
    private string memberId = string.Empty;
    private int totalMembers = 0;
    private int activeMembers = 0;
    private int newMembers = 0;
    private string load = "Fetching Files...";
    private bool isLoad = false;
    private List<Member> membersList = new();
    private Member member = new();
    private bool isAddModalVisible = false;
    private string title = "Add Member";
    private bool validFirstname = true;
    private bool validLastName = true;
    private bool validEmail = true;
    private string emailError = string.Empty;
    private string searchstring = string.Empty;
    private List<Member> FilteredMember => membersList.Where(u => string.IsNullOrWhiteSpace(searchstring) || u.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || !string.IsNullOrWhiteSpace(u.MiddleName) && u.MiddleName.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || u.LastName.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || !string.IsNullOrWhiteSpace(u.Email) && u.Email.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || !string.IsNullOrWhiteSpace(u.Contact) && u.Contact.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || !string.IsNullOrWhiteSpace(u.Classification) && u.Classification.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || !string.IsNullOrWhiteSpace(u.Status) && u.Status.Contains(searchstring, StringComparison.OrdinalIgnoreCase)).ToList();


    protected override async Task OnInitializedAsync()
    {
        isLoad = !isLoad;
        member.Classification = "Soldier";
        member.Status = "Active";
        try
        {
            await getMembers();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Unable to fetch Members List: {ex.Message}");
        }
        isLoad = !isLoad;
    }

    private async Task getMembers()
    {
        totalMembers = 0;
        activeMembers = 0;
        newMembers = 0;
        var result = await _memberService.GetMembersAsync();

        if (result.Success)
        {
            membersList = result.Data;
            activeMembers = membersList.Count(u => u.Status == "Active");
            totalMembers = membersList.Count;
        }
        else
        {
            await _js.InvokeVoidAsync("alert", $"Unable to fetch Members List: {result.Error}");
        }
    }

    private bool IsValidEmail(string email)
    {
        return Regex.IsMatch(email, pattern);
    }

    private async Task addMember()
    {
        isAdding = true;
        validation.Clear();
        if (string.IsNullOrEmpty(member.FirstName))
        {
            validation.Add("-First Name is required");
        }

        if (string.IsNullOrEmpty(member.LastName))
        {
            validation.Add("-Last Name is required");
        }

        if (!string.IsNullOrEmpty(member.Email))
        {
            if (!IsValidEmail(member.Email))
            {
                validation.Add("-Invalid Email");
            }
        }

        if (!string.IsNullOrEmpty(member.Contact))
        {
            if (!IsValidContact(member.Contact))
            {
                validation.Add("-Contact number must be 11 digits");
            }
        }


        if (member.Birthdate > DateOnly.FromDateTime(DateTime.Now).AddYears(-12))
        {
            validation.Add("-Member must be at least 12 years old");
        }

        if (validation.Any())
        {
            isAdding = false;
            return;
        }

        member.FirstName = textInfo.ToTitleCase(member.FirstName);
        if (!string.IsNullOrEmpty(member.MiddleName))
        {
            member.MiddleName = textInfo.ToTitleCase(member.MiddleName);
        }
        member.LastName = textInfo.ToTitleCase(member.LastName);

        var memRes = await _memberService.AddMemberAsync(member);
        if (memRes.Success)
        {
            isAdding = false;
            await _js.InvokeVoidAsync("alert", "Member added successfully");
            await getMembers();
            ToggleModal();
            member = new();
        }
        else
        {
            isAdding = false;
            await _js.InvokeVoidAsync("alert", memRes.Error);
        }
    }

    private void ToggleView()
    {
        isToggleView = !isToggleView;
    }

    //Toggle Update Modal

    private void ToggleViewModal(string Id)
    {
        isToggleView = !isToggleView;

        var memberView = membersList.FirstOrDefault(u => u.Id == Id);

        if (memberView != null)
        {
            member = new Member
                {
                    Id = memberView.Id,
                    FirstName = memberView.FirstName,
                    MiddleName = memberView.MiddleName,
                    LastName = memberView.LastName,
                    Gender = memberView.Gender,
                    Email = memberView.Email,
                    Contact = memberView.Contact,
                    Birthdate = memberView.Birthdate,
                    Classification = memberView.Classification,
                    Status = memberView.Status
                };
        }

    }

    private async Task ToggleUpdateModal(string docId)
    {
        isAddModalVisible = !isAddModalVisible;
        title = "Update Member";
        var accountToUpdate = membersList.FirstOrDefault(u => u.Id == docId);
        if (accountToUpdate != null)
        {
            member = new Member
            {
                Id = accountToUpdate.Id,
                FirstName = accountToUpdate.FirstName,
                MiddleName = accountToUpdate.MiddleName,
                LastName = accountToUpdate.LastName,
                Gender = accountToUpdate.Gender,
                Email = accountToUpdate.Email,
                Contact = accountToUpdate.Contact,
                Birthdate = accountToUpdate.Birthdate,
                Classification = accountToUpdate.Classification,
                Status = accountToUpdate.Status
            };
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "No such document");
        }

    }

    private async Task UpdateMember()
    {
        isAdding = true;
        validation.Clear();
        if (string.IsNullOrEmpty(member.FirstName))
        {
            validation.Add("-First Name is required");
        }

        if (string.IsNullOrEmpty(member.LastName))
        {
            validation.Add("-Last Name is required");
        }

        if (!string.IsNullOrEmpty(member.Email))
        {
            if (!IsValidEmail(member.Email))
            {
                validation.Add("-Invalid Email");
            }
        }

        if (!string.IsNullOrEmpty(member.Contact))
        {
            if (!IsValidContact(member.Contact))
            {
                validation.Add("-Contact number must be 11 digits");
            }
        }


        if (member.Birthdate > DateOnly.FromDateTime(DateTime.Now).AddYears(-12))
        {
            validation.Add("-Member must be at least 12 years old");
        }

        if (validation.Any())
        {
            isAdding = false;
            return;
        }

        member.FirstName = textInfo.ToTitleCase(member.FirstName);
        if (!string.IsNullOrEmpty(member.MiddleName))
        {
            member.MiddleName = textInfo.ToTitleCase(member.MiddleName);
        }
        member.LastName = textInfo.ToTitleCase(member.LastName);

        try
        {
            await _memberService.updateMemberAsync(member.Id, member);
            ToggleModal();
            await getMembers();
            await _js.InvokeVoidAsync("alert", "Member updated successfully.");
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task DeleteMember(string Id)
    {
        bool confirm = await _js.InvokeAsync<bool>("confirm", "Are you sure you want to remove this member?");

        if (!confirm)
        {
            return;
        }

        try
        {
            await _memberService.deleteMemberAsync(Id);
            await getMembers();
            await _js.InvokeVoidAsync("alert", "Member deleted successfully.");
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private void ToggleModal()
    {
        validation.Clear();
        isAddModalVisible = !isAddModalVisible;
        member = new();
        title = "Add Member";
    }

    private void CheckIfValid(string fieldName)
    {
        switch (fieldName)
        {
            case nameof(member.FirstName):
                validFirstname = !string.IsNullOrWhiteSpace(member.FirstName);
                break;
            case nameof(member.LastName):
                validLastName = !string.IsNullOrWhiteSpace(member.LastName);
                break;
        }
    }

    private async Task CheckIfValidEmail()
    {
        if (string.IsNullOrEmpty(member.Email))
        {
            validEmail = true;
            emailError = string.Empty;
        }
        else
        {
            if (IsValidEmail(member.Email))
            {
                var list = await _memberService.GetMembersAsync();
                if (list.Success)
                {
                    bool check = list.Data.Any(u => u.Email == member.Email);

                    if (check)
                    {
                        validEmail = false;
                        emailError = "Email already exists.";
                        return;
                    }

                    validEmail = true;
                }

            }
            else
            {
                validEmail = false;
                emailError = "Enter valid email";
            }
        }
    }

    private bool IsValidContact(string contact)
    {
        return Regex.IsMatch(contact, contactPattern);
    }

}