@page "/departments/{name}"
@layout LandingLayout
@using GospelReachCapstone.Models
@inject GospelReachCapstone.Services.DepartmentMemberService _departmentMemberService
@inject GospelReachCapstone.Services.MemberService _memberService
@inject IJSRuntime _js
@inject GospelReachCapstone.Services.AppState _appState

<PageTitle>Department Heads</PageTitle>


<div class="page">
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <div class="d-flex flex-row gap-2">
                <h4 class="m-0 fw-bold">@DepName Department</h4>
            </div>
            
            <p class="m-0 c2" style="font-size: 14px">Manage department leaders and their responsibilities.</p>
        </div>

      @*   <div>
            <button class="btn btn-primary p-2 text-white">Add Member</button>
        </div> *@
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards">

        <!--Search Section-->
        <div class="position-relative">
            <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
            <input @bind="searchString" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search by name..." />
        </div>
        <p class="mb-2"><em>@message</em></p>

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Name</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in filteredList)
                    {
                        <tr class="table-row">
                            <td class="table-cell c2">@item.GetFullName()</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code{
    //Variable Declarations
    [Parameter]
    public string Name { get; set; }
    private bool isAddDepartmentModalVisible = false;
    private bool isValidating = false;
    private string message = string.Empty;
    private string messages = string.Empty;
    private string DepName => Name ?? "Unknown";
    private string searchString = string.Empty;
    private string searchMusicMember = string.Empty;
    private bool selectAll = false;
    private bool isSelected = false;
    private bool isMens { get; set; } = false;
    private HashSet<string> SelectedMembers = new();
    private DepartmentMember departmentMember = new();
    private List<Member> members = new();
    private List<Member> allMembers = new();
    private IEnumerable<Member> filteredList => members.Where(u => string.IsNullOrWhiteSpace(searchString) || u.GetFullName().Contains(searchString,StringComparison.OrdinalIgnoreCase)).ToList();
    private IEnumerable<Member> filteredMusicMember => allMembers.Where(u => string.IsNullOrWhiteSpace(searchMusicMember) || u.GetFullName().Contains(searchMusicMember, StringComparison.OrdinalIgnoreCase)).ToList();


    //Load List during page initialization
    protected override async Task OnInitializedAsync()
    {
        await GetDepartmentAndMembers();
    }

    protected override async Task OnParametersSetAsync()
    {
        // runs every time route params (like Name) change
        await GetDepartmentAndMembers();
    }

    private async Task GetDepartmentAndMembers()
    {
        message = "Fetching database...";
        string name = DepName;

        var result = await _memberService.GetMembersAsync();

        if (result.Success)
        {
            var mem = result.Data;

            switch (DepName)
            {
                //Senior
                case "Senior":
                    members = mem.Where(u => u.Age > 11).ToList();
                    message = string.Empty;
                    break;

                //Womens
                case "Womens":
                    members = mem.Where(u => u.Age >= 20 && u.Gender == "Female").ToList();
                    message = string.Empty;
                    break;


                // case "Teenstuff":
                //     members = mem.Where(u => u.Age < 20 && u.Age >= 12 && u.Gender == "Female").ToList();
                //     if (members.Count == 0)
                //     {
                //         message = "No members found";
                //     }
                //     else
                //     {
                //         message = string.Empty;
                //     }
                    
                //     break;

                //Mens
                case "Mens":
                    members = mem.Where(u => u.Age >= 12 && u.Gender == "Male").ToList();
                    message = string.Empty;
                    break;

                //Youth
                case "Youth":
                    members = mem.Where(u => u.Age >= 12 && u.Age <= 35).ToList();
                    message = string.Empty;
                    break;
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get members: " + result.Error);
        }

        
    }
}