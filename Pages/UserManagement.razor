@page "/user-management"
@layout LandingLayout
@using GospelReachCapstone.Models
@inject GospelReachCapstone.Services.FirebaseAuthenticationService Authentication
@inject GospelReachCapstone.Services.FirestoreService _firestore
@inject IJSRuntime _js



<PageTitle>Admin</PageTitle>


<div class="page">

    <!--Add User Model-->
    <div @onclick="ToggleAddUserModal" class="addUserModal @(isAddUserModalVisible ? "show" : "")">
        <div class="addUser" @onclick:stopPropagation>
            <h4 class="fw-bold">
                @title
            </h4>
            <p style="font-size:14px;">Create and Manage Users and Access Control.</p>

            @if (title == "Add User")
            {
                <div class="input mt-3">
                    <p>Email</p>
                    <div class="pword mt-2">
                        <input @bind="user.Email" type="email" placeholder="Email" />
                    </div>
                </div>
            }
            

            @if (title == "Add User")
            {
                <div class="input mt-3">
                    <p>Password</p>
                    <div class="pword mt-2">
                        <input @bind="user.Password" type="@(isPasswordShow ? "text" : "password")" placeholder="Password" />
                        <i @onclick="TogglePassword" class="@(isPasswordShow ? "bi bi-eye-slash" : "bi bi-eye")" style="cursor:pointer"></i>
                    </div>
                </div>
            }
           
            <div class="input mt-3">
                <p>Role</p>
                <select @bind="role" class="form-select p-2 mt-2">
                    <option value="Administrator">Administrator</option>
                    <option value="Department Head - Mens">Department Head - Mens</option>
                    <option value="Department Head - Homeleague">Department Head - Homeleague</option>
                    <option value="Department Head - Youth">Department Head - Youth</option>
                    <option value="Department Head - Finance">Department Head - Finance</option>
                </select>
            </div>

            @if (title == "Add User")
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleAddUserModal">Cancel</button>
                    <button  class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="AddUser">Create</button>
                </div>
            }
            else
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleAddUserModal">Cancel</button>
                    <button class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="UpdateUser">Update</button>
                </div>
            }
            
        </div>
    </div>

    

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">User Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Manage users and access controls.</p>
        </div>

        <div>
            <button class="btn btn-primary px-4 py-2 text-white" @onclick="OpenModal">Add User</button>
        </div>
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards">

        <!--Search Section-->
        <div class="position-relative">
            <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
            <input @bind="searchedActivity" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search by name, email, or role..."/>
        </div>
        
        <p class="mb-4 ms-1 @(isLoad ? "" : "d-none")"><em>@load</em></p>

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Email</th>
                        <th class="thead">Role</th>
                        <th class="thead">Status</th>
                        <th class="thead">Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var items in FilteredUsers)
                    {
                        <tr class="table-row">
                            <td class="table-cell c2">@items.Email</td>
                            <td class="table-cell c2">@items.Role</td>
                            <td class="table-cell c2">@items.Status</td>
                            <td class="table-cell d-flex gap-2" style="padding: 24px 24px; border-bottom: none;">
                                <!--Edit-->
                                <div class="d-flex align-items-center justify-content-center gap-1w-auto border" style="border-radius: 10px; padding: 5px 12px;">
                                    <button class="btn btn-outline-light px-1 py-1" style="font-size: 13px;" @onclick="@(()=> ToggleUpdateModal(items.Id, items.Role))"><span><i class="bi bi-pencil-square"></i></span> Update</button>
                                </div>

                                <!--Check account status-->
                                @if (items.Status != "Disabled")
                                {
                                    <!--Disable-->
                                    <button @onclick="@(() => DisableUser(items.Id))" class="btn btn-danger text-white" style="border-radius: 10px; padding: 5px 12px; font-size:13px;"><span><i class="bi bi-trash text-white"></i></span>Disable</button>
                                }
                                else
                                {
                                    <!--Enable-->
                                    <button @onclick="@(() => EnableUser(items.Id))" class="btn btn-success text-white" style="border-radius: 10px; padding: 5px 12px; font-size:13px;"><span><i class="bi bi-trash text-white"></i></span>Enable</button>
                                }
                            </td>
                                
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code{
    private string load = "Fetching Files...";
    private bool isLoad = false;
    private bool isValid = false;
    private bool isPasswordShow = false;
    private bool isAddUserModalVisible = false;
    private string title = "Add User";
    private User user = new();
    private List<User> accounts = new();
    private List<Member> memberList = new();
    private string memberId = string.Empty;
    private string role = "Administrator";
    private string member = string.Empty;
    private string searchedActivity = string.Empty;
    private IEnumerable<User> FilteredUsers => accounts.Where(u => string.IsNullOrWhiteSpace(searchedActivity) || u.Email.Contains(searchedActivity, StringComparison.OrdinalIgnoreCase) || u.Role.Contains(searchedActivity, StringComparison.OrdinalIgnoreCase) || u.Status.Contains(searchedActivity, StringComparison.OrdinalIgnoreCase)).ToList();


    //On startup
    protected override async Task OnInitializedAsync()
    {
        isLoad = !isLoad;
        role = "Administrator";
        await GetUsers();
        isLoad = !isLoad;
    }

    //Get users List
    private async Task GetUsers()
    {
        try
        {
            accounts = await _firestore.GetAccountAsync();
        }
        catch(Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error fetching users: {ex.Message}");
        }
    }

    //Toggle Password
    private void TogglePassword()
    {
        isPasswordShow = !isPasswordShow;
    }

    protected async Task OpenModal()
    {
        ToggleAddUserModal();
    }

    private async Task ToggleUpdateModal(string docId, string roles)
    {
        isAddUserModalVisible = !isAddUserModalVisible;
        role = roles;
        memberId = docId;
        title = "Edit User";
    }


    private void ToggleAddUserModal()
    {
        isAddUserModalVisible = !isAddUserModalVisible;
        title = "Add User";
        memberId = string.Empty;
        isValid = false;
        role = "Administrator";
    }

    private async Task AddUser()
    {
        user.Role = role;
        var result = await Authentication.RegisterAsync(user.Email, user.Password, user);

        if (result.Success)
        {
            await GetUsers();
            await _js.InvokeVoidAsync("alert", "Account Successfully Created");
            user = new();
            memberId = string.Empty;
            accounts = new();
            role = "Administrator";
            ToggleAddUserModal();
        }
        else
        {
            await _js.InvokeVoidAsync("alert", result.Message);
        }
    }

    private async Task UpdateUser()
    {
        try
        {
            await _firestore.UpdateAccountAsync(memberId, role);
            isAddUserModalVisible = false; // Hide the modal after update
            user = new();
            memberId = string.Empty;
            accounts = new();
            role = "Administrator";
            await GetUsers();
            await _js.InvokeVoidAsync("alert", "User updated successfully");
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error updating user: {ex.Message}");
            return;
        }
    }

    private async Task DisableUser(string docId)
    {
        try
        {
            await _firestore.DisableAccountAsync(docId);
            await GetUsers();
            await _js.InvokeVoidAsync("alert", "User disabled successfully");
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error disabling user: {ex.Message}");
            return;
        }
    }

    //Enable Accoubt
    private async Task EnableUser(string docId)
    {
        try
        {
            await _firestore.EnableAccountAsync(docId);
            await GetUsers();
            await _js.InvokeVoidAsync("alert", "User enabled successfully");
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error enabling user: {ex.Message}");
            return;
        }
    }
}