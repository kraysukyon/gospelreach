@page "/attendance"
@layout LandingLayout
@inject GospelReachCapstone.Services.FirestoreService Firestore
@using GospelReachCapstone.Models
@inject IJSRuntime _js

<PageTitle>Attendance</PageTitle>


<div class="sub-page">
    <!--Add User Model-->
    <div @onclick="ToggleModal" class="addAttendanceModal @(isAddModalVisible ? "show" : "")">
        <div class="addAttendance" @onclick:stopPropagation>
            <h4 class="fw-bold">
                @title
            </h4>
            <p style="font-size:14px;">Create and Manage Attendance.</p>

            <div class="input mt-3">
                <p>Date</p>
                <input @bind="date" type="date" class="form-control p-2 mt-2" />
            </div>

            @if (selectedAttendance == "Service")
            {
                <div class="input mt-3">
                    <p>Activity</p>
                    <select @bind="activityName" class="form-select p-2 mt-2">
                        <option value="Holiness Meeting">Holiness Meeting</option>
                        <option value="Bible Study">Bible Study</option>
                        <option value="Prayer Meeting">Prayer Meeting</option>
                        <option value="Torchbearer">Torchbearer</option>
                        <option value="Homeleague">Homeleague</option>
                        <option value="Mens">Mens</option>
                    </select>
                </div>
            }
            else
            {
                <div class="input mt-3">
                    <p>Activity</p>
                    <input @bind="activityName" type="text" class="form-control p-2 mt-2" placeholder="Event Name" />
                </div>
            }
            

           

            <div class="input mt-3">
                <p>Attendance</p>
                <input @bind="attendance.Count" type="number" class="form-control p-2 mt-2" placeholder="Count" />
            </div>

            <div class="input mt-3">
                <p>Seekers</p>
                <input @bind="attendance.Seekers" type="number" class="form-control p-2 mt-2" placeholder="Seekers" />
            </div>

            @if (title == "Add Attendance")
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Cancel</button>
                    <button class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="AddAttendance">Create</button>
                </div>
            }
            else
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Cancel</button>
                    <button class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="UpdateAttendance">Update</button>
                </div>
            }
            
        </div>
    </div>

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Attendance Tracking</h4>
            <p class="m-0 c2" style="font-size: 14px">Track and manage church attendance records.</p>
        </div>

        <div>
            <button class="btn btn-primary px-4 py-2 text-white" @onclick="ToggleModal">Add Attendance</button>
        </div>
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards">
        <div class="container mb-4">
            <!--Search Section-->
            <div class="d-flex flex-column flex-md-row gap-2">
                <div class="position-relative flex-grow-1">
                    <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                    <input @bind="searchedActivity" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search Activity..." />
                </div>

                <div class="flex-shrink-0 d-flex flex-column flex-md-row gap-2">
                    <select class="select" @onchange="OnAttendanceChange">
                        <option value="Service">Service</option>
                        <option value="Event">Event</option>
                    </select>
                    <div class="filterDate">
                        <button @onclick="OnFilterDate" class="btns"><span><i class="bi bi-calendar-check"></i></span> Filter by Date</button>
                        <div class="date @(isFilterShow ? "": "d-none")">
                            <div class="input">
                                <p>Start Date</p>
                                <input @bind="startDate" type="date" class="form-control p-2 mt-2" />
                            </div>
                            <div class="input mt-3 mb-2">
                                <p>End Date</p>
                                <input @bind="endDate" type="date" class="form-control p-2 mt-2" />
                            </div>
                            <button @onclick="FilterbyDate" class="btns save mb-2">Filter</button>
                            <button @onclick="ResetFilters" class="btns cancel">Reset</button>
                        </div>
                    </div>
                    
                    <button class="btn btn-primary p-2 text-white w-auto text-nowrap"><span><i class="bi bi-file-earmark-text text-white"></i></span> Generate Report</button>
                </div>
            </div>
            <p class="mt-1 ms-1 @(isLoad ? "" : "d-none")"><em>@load</em></p>
        </div>
        
        

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Date</th>
                        <th class="thead">Activity</th>
                        <th class="thead">Attendance</th>
                        <th class="thead">Seekers</th>
                        <th class="thead">Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var items in FilteredList)
                    {
                        <tr class="table-row">
                            <td class="table-cell c2 align-content-center">@DateTime.Parse(items.Date).ToString("MMM dd, yyyy")</td>
                            <td class="table-cell c2 align-content-center">@items.Activity</td>
                            <td class="table-cell c2 align-content-center">@items.Count</td>
                            <td class="table-cell c2 align-content-center">@items.Seekers</td>
                            <td class="table-cell" style="display: flex; gap: 10px; width: 100%; border-bottom: none;">
                                <!--Edit-->
                                <button @onclick="@(() => OpenEdit(items.Id))" class="btn btn-outline-light px-4 py-1 border border-1" style="font-size: 13px;"><span><i class="bi bi-pencil-square"></i></span> Edit</button>

                                <!--Delete-->
                                <button @onclick="@(() => RemoveAttendance(items.Id))" class="btn btn-danger text-white px-4 py-1" style="border-radius: 10px; font-size:13px;"><span><i class="bi bi-trash text-white"></i></span>Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @* <!--Quick Stats Section-->
    <div class="d-flex flex-column mt-4">
        <div class="d-md-flex d-block justify-content-evenly gap-4">
            <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                <h5 class="mb-2">Average Sunday Attendance</h5>
                <h3 class="m-2 c2 text-primary fw-bold">245</h3>
                <p class="c2" style="font-size:14px;">Last 4 weeks</p>
            </div>

            <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                <h5 class="mb-2">Growth Rate</h5>
                <h3 class="m-2 c2 text-success fw-bold">+5.2%</h3>
                <p class="c2" style="font-size:14px;">Month over month</p>
            </div>

            <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                <h5 class="mb-2">First-Time Visitors</h5>
                <h3 class="m-2 c2 text-danger fw-bold">3</h3>
                <p class="c2" style="font-size:14px;">This month</p>
            </div>
        </div>
    </div> *@
</div>

@code{
    bool isAddModalVisible = false;
    bool isFilterDate = false;
    bool isFilterShow = false;
    private string load = "Fetching Files...";
    private bool isLoad = false;
    private DateTime date = DateTime.Now;
    private Attendance attendance = new();
    private List<Attendance> attendanceList = new List<Attendance>();
    private string title = "Add Attendance";
    private string selectedAttendance = "Service";
    private string activityName = "Holiness Meeting";
    private string searchedActivity = string.Empty;
    private DateTime startDate = DateTime.Now;
    private DateTime endDate = DateTime.Now;
    private IEnumerable<Attendance> FilteredList => attendanceList.Where(u => u.Category == selectedAttendance).Where(u => string.IsNullOrWhiteSpace(searchedActivity) || u.Activity.Contains(searchedActivity, StringComparison.OrdinalIgnoreCase)).Where(u => !isFilterDate || DateTime.Parse(u.Date) >= startDate && DateTime.Parse(u.Date) <= endDate).ToList();
    private IEnumerable<Attendance> FilteredLists => string.IsNullOrWhiteSpace(searchedActivity) ? attendanceList : attendanceList.Where(u => u.Category == selectedAttendance && u.Activity.Contains(searchedActivity, StringComparison.OrdinalIgnoreCase)).OrderByDescending(u => u.Date);

    protected override async Task OnInitializedAsync()
    {
        isLoad = !isLoad;
        attendance.Activity = "Holiness Meeting";
        await GetAttendance();
        isLoad = !isLoad;
    }

    private void OnFilterDate()
    {
        isFilterShow = !isFilterShow;
    }

    private void FilterbyDate()
    {
        isFilterDate = true;
    }

    private void ResetFilters()
    {
        searchedActivity = string.Empty;
        isFilterDate = false;
        startDate = DateTime.Now;
        endDate = DateTime.Now;
    }

    private async Task OnAttendanceChange(ChangeEventArgs e)
    {
        selectedAttendance = e.Value?.ToString();
        await GetAttendance();

        if (selectedAttendance == "Service")
        {
            activityName = "Holiness Meeting";
        }
        else
        {
            activityName = "";
        }
    }

    private async Task GetAttendance()
    {
        try
        {
            attendance = new();
            var list = await Firestore.GetAttendanceAsync();
            attendanceList = list.Where(u => u.Category == selectedAttendance).OrderByDescending(x => x.Date).ToList();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error fetching attendance: {ex.Message}");
        }
    }

    private void ToggleModal()
    {
        isAddModalVisible = !isAddModalVisible;
        title = "Add Attendance";
        attendance = new();
    }

    private async Task AddAttendance()
    {
        try
        {
            attendance.Date = date.ToString();
            if (selectedAttendance == "Service")
            {
                attendance.Category = "Service";
            }
            else
            {
                attendance.Category = "Event";
            }
            attendance.Activity = activityName;
            await Firestore.AddAttendanceAsync(attendance);
            attendanceList.Clear();
            await GetAttendance();
            await _js.InvokeVoidAsync("alert", "Attendance Added Successfuly");
            attendance = new();
            attendance.Activity = "Holiness Meeting";
            ToggleModal();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }

    }

    private void OpenEdit(string docId)
    {
        ToggleModal();
        title = "Update Attendance";
        var att = attendanceList.FirstOrDefault(u => u.Id == docId);
        if (att != null)
        {
            attendance = att;
            date = DateTime.Parse(att.Date);
            activityName = attendance.Activity;
        }
    }

    private async Task UpdateAttendance()
    {
        try
        {
            attendance.Activity = activityName;
            attendance.Date = date.ToString();
            await Firestore.UpdateAttendanceAsync(attendance.Id, attendance);
            attendanceList.Clear();
            await GetAttendance();
            await _js.InvokeVoidAsync("alert", "Attendance Updated Successfully");
            ToggleModal();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error updating attendance: {ex.Message}");
            return;
        }

    }

    private async Task RemoveAttendance(string docId)
    {
        try
        {
            await Firestore.DeleteAttendanceAsync(docId);
            attendanceList.Clear();
            await GetAttendance();
            await _js.InvokeVoidAsync("alert", "Attendance Deleted Successfully");
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error deleting attendance: {ex.Message}");
        }
    }
}