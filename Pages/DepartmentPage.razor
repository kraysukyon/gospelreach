@page "/departmentss"
@layout LandingLayout
@using GospelReachCapstone.Models
@inject GospelReachCapstone.Services.DepartmentMemberService _departmentMemberService
@inject GospelReachCapstone.Services.DepartmentService _departmentService
@inject IJSRuntime _js
@inject NavigationManager _nav
@inject GospelReachCapstone.Services.AppState _appState

<PageTitle>Department Heads</PageTitle>


<div class="page">
    <!--Modal for Adding Department Head-->
    <div @onclick="ToggleAddDepartment" class="addUserModal @(isAddDepartmentModalVisible ? "show" : "")">
        <div class="addUser" @onclick:stopPropagation>
            <h4 class="fw-bold">
                @title
            </h4>
            <p style="font-size:14px;">Create and Manage Departments and Members</p>

           
            <div class="input mt-3">
                <p>Department Name</p>
                <div class="pword mt-2">
                    <input @bind="department.DepartmentName" type="text" placeholder="Department Name" />
                </div>
            </div>


            @if (title == "Add Department")
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleAddDepartment">Cancel</button>
                    <button disabled="@isValidating" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="AddDepartment">Create</button>
                </div>
            }
            else
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleAddDepartment">Cancel</button>
                    <button disabled="@isValidating" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="UpdateDepartment">Update</button>
                </div>
            }

        </div>
    </div>

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Departments</h4>
            <p class="m-0 c2" style="font-size: 14px">Manage department and members</p>
        </div>

        @* <div>
            <button class="btn btn-primary p-2 text-white" @onclick="ToggleAddDepartment">Add Department</button>
        </div> *@
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards">

        <!--Search Section-->
        <p class="mb-2"><em>@message</em></p>

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Department Name</th>
                    </tr>
                </thead>

                <tbody>
                    <tr class="table-row">
                        <td class="table-cell" style="font-weight:500;">
                            <div class="d-flex flex-column gap-1">
                                <p>Senior</p>
                                <p class="link ms-4">Senior General</p>
                                <p class="link ms-4">Music</p>
                            </div>
                        </td>
                    </tr>
                    <tr class="table-row">
                        <td class="table-cell" style="font-weight:500;">
                            <div class="d-flex flex-column gap-1">
                                <p>Womens</p>
                                <p class="link ms-4">Homeleague</p>
                                <p class="link ms-4">Teenstuff</p>
                            </div>
                        </td>
                    </tr>
                    <tr class="table-row">
                        <td class="table-cell" style="font-weight:500;"><p class="link">Mens</p></td>
                    </tr>
                    <tr class="table-row">
                        <td class="table-cell" style="font-weight:500;">
                            <div class="d-flex flex-column gap-1">
                                <p>Youth</p>
                                <div class="d-flex flex-column gap-1 ms-4">
                                    <p>Youth General</p>
                                    <p class="link ms-4">Corp Cadet</p>
                                    <p class="link ms-4">Young People Bible Study</p>
                                    <p class="link ms-4">Sunday School</p>
                                    <p class="link ms-4">Junior Soldier</p>
                                    <p class="link ms-4">Junior Soldier Prep</p>
                                </div>
                                <p class="link ms-4">Torchbearer</p>
                            </div>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</div>

@code{
    //Variable Declarations
    private bool isAddDepartmentModalVisible = false;
    private string title = "Add Department";
    private Department department = new();
    private List<Department> departmentsList = new();
    private bool isValidating = false;
    private string message = string.Empty;
    private string searchString = string.Empty;
    private IEnumerable<Department> filteredList => departmentsList.Where(u => string.IsNullOrWhiteSpace(searchString) || u.DepartmentName.Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();

    //Load List during page initialization
    protected override async Task OnInitializedAsync()
    {
        await GetDepartmentsList();
    }

    //Fetching Departments List
    private async Task GetDepartmentsList()
    {
        message = "Fetching Files...";
        var result = await _departmentService.GetDepartmentsAsync();

        if (result.Success)
        {
            departmentsList = result.Data;

            if (departmentsList == null)
            {
                message = "No data to show...";
            }
            else
            {
                message = string.Empty;
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to load departments: " + result.Error);
        }
    }

    //Toggle Modal
    private void ToggleAddDepartment()
    {
        title = "Add Department";
        department = new(); // Reset department object
        isAddDepartmentModalVisible = !isAddDepartmentModalVisible;
    }

    //Adding Department
    private async Task AddDepartment()
    {
        isValidating = !isValidating;
        var result = await _departmentService.AddDepartmentAsync(department);

        if(result.Success)
        {
            await GetDepartmentsList();
            ToggleAddDepartment();
            await _js.InvokeVoidAsync("alert", "Department added successfully!");

        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to add department: " + result.Error);
        }
        isValidating = !isValidating;
    }

    private async Task ToggleUpdateModal(string departmentId)
    {
        title = "Update Department";
        var dep = departmentsList.FirstOrDefault(u => u.DepartmentId == departmentId);

        if (dep != null)
        {
            department = new Department
            {
                DepartmentId = dep.DepartmentId,
                DepartmentName = dep.DepartmentName
            };
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Department not found");
        }
        isAddDepartmentModalVisible = !isAddDepartmentModalVisible;
    }

    //Updating Department
    private async Task UpdateDepartment()
    {
        isValidating = !isValidating;
        var result = await _departmentService.UpdateDepartmentAsync(department.DepartmentId, department);

        if (result.Success)
        {
            await GetDepartmentsList();
            ToggleAddDepartment();
            await _js.InvokeVoidAsync("alert", "Department updated successfully!");
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to update department: " + result.Error);
        }
        isValidating = !isValidating;
    }

    //Remove Department
    private async Task RemoveDepartment(string Id)
    {
        bool confirm = await _js.InvokeAsync<bool>("confirm", "Are you sure you want to remove this Department?\nThis action cannot be undo");

        if(!confirm) return;

        var result = await _departmentService.RemoveDepartmentAsync(Id);

        if (result.Success)
        {
            await _js.InvokeVoidAsync("alert", "Successfully removed Department");
            await GetDepartmentsList();
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to remove: " + result.Error);
        }

    }

    private void goToDepartmentMemberPage(string departmentId)
    {
        _appState.SelectedDepartmentId = departmentId; // Store the selected department ID in the app state
        _appState.SelectedDepartmentName = departmentsList.FirstOrDefault(d => d.DepartmentId == departmentId)?.DepartmentName ?? "Unknown Department"; // Store the selected department name in the app state
        _nav.NavigateTo("/departmentMember");
    }
}