@page "/dashboard"
@using GospelReachCapstone.Models
@layout LandingLayout
@inject NavigationManager _nav
@inject GospelReachCapstone.Services.AuthState Auths
@inject GospelReachCapstone.Services.ScheduleService _scheduleService
@inject GospelReachCapstone.Services.MemberService _memberService
@inject GospelReachCapstone.Services.AttendanceService _attendanceService
@inject GospelReachCapstone.Services.ToastService _toast
@inject IJSRuntime _js


<PageTitle>Home</PageTitle>


<div class="page">
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-4">
        <div>
            <h3 class="m-0 fw-bold">Welcome, @Auths.DisplayName</h3>
            <p class="m-0 c2" style="font-size: 14px">Here's what's happening at TSA Mandaue today</p>
        </div>

        @* <button @onclick="Notify">test</button> *@
    </div>

    <!--Quick Stats Section-->
    <div class="d-flex flex-column mb-2 @(Auths.Role == "Guest" ? "d-none" : "")">
        <h5 class="fw-bold m-0 mb-4">Quick Stats</h5>

        <div class="d-flex justify-content-evenly gap-4 stats">
            <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                <p class="c2 mb-2" style="font-size:14px;">Total Members</p>
                <h3 class="m-0 c2 text-primary fw-bold">@totalMembers</h3>
            </div>

            <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                <p class="c2 mb-2" style="font-size:14px;">Last Sunday Attendance</p>
                <h3 class="m-0 c2 text-primary fw-bold">@lastSundayAttendance</h3>
            </div>

            <div class="card w-100 p-4 mb-3 cards d-flex flex-column align-items-center justify-content-center">
                <p class="c2 mb-2" style="font-size:14px;">Upcoming Events</p>
                <h3 class="m-0 c2 text-primary fw-bold">@upcomingEventsCount</h3>
            </div>
        </div>
    </div>

    <!--Announcements and Events Sections-->
    <div class="planning mb-4">
        <!--Announcements-->
        <div class="d-flex flex-column">
            <h5 class="fw-bold m-0 mb-4">Announcements</h5>
            
            @if (todaysEvent.Any())
            {
                @foreach (var item in todaysEvent)
                {
                    <div class="card w-100 p-4 mb-3 cards">
                        <h6 class="mb-2 fw-bold" style="font-size:18px">@item.Title - @item.DepartmentId</h6>
                        <p class="c2 mb-2" style="font-size:14px;">@(item.StartDate != item.EndDate ? $"{item.StartDate} - {item.EndDate}" : $"{item.StartDate}")</p>
                        <p class="m-0 c2">@item.Description</p>
                    </div>
                }
            }
            else
            {
                <div class="card w-100 p-4 mb-3 cards">
                    <h6 class="mb-2 fw-bold" style="font-size:18px">No Upcoming Events</h6>
                    <p class="c2 mb-2" style="font-size:14px;">April 20, 2025</p>
                    <p class="m-0 c2">Starting next Sunday, Minyo na si Abel</p>
                </div>
            }
            

            @* <div class="card w-100 p-4 mb-3 cards">
                <h6 class="mb-2 fw-bold" style="font-size:18px">Volunteer Appreciation Day</h6>
                <p class="c2 mb-2" style="font-size:14px;">April 25, 2025</p>
                <p class="m-0 c2">We're hosting a special dinner to appreciate all our volunteers this Friday at 6:00 PM in the church hall. Please RSVP with your department head by Wednesday.
                    aksjdkjasdkjajkdskajdhkahskdhskjdghskdfhglkjsdhfgjkshdfjkgsdjhkfgjhfgjhsdjfsdfg
                    sdfgskdfgbskdfglkjsdhfglkjhsdfgs
                    dfgsdlfgsdfgskjdfgkjsdhfkgjhsdfgs
                    sdkfgbsdkjfbgkjsdfgkjsdhfg
                </p>
            </div>

            <div class="card w-100 p-4 mb-3 cards">
                <h6 class="mb-2 fw-bold" style="font-size:18px">Building Fund Campaign</h6>
                <p class="c2 mb-2" style="font-size:14px;">April 30, 2025</p>
                <p class="m-0 c2"></p>
            </div> *@
        </div>

        <!--Events-->
        <div class="d-flex flex-column">
            <h5 class="fw-bold m-0 mb-4">Upcoming Events</h5>
            
            @if (upcomingEvents.Any())
            {
                @foreach (var item in upcomingEvents)
                {
                    <div class="card w-100 p-4 mb-3 cards">
                        <h6 class="mb-2 fw-bold" style="font-size:18px">@item.Title</h6>
                        <p class="c2 mb-2" style="font-size:14px;">@(item.StartDate != item.EndDate ? $"{item.StartDate} - {item.EndDate}" : $"{item.StartDate}")</p>
                        <p class="m-0 c2">Venue: @item.Location</p>
                    </div>
                }
                
            }
            else
            {
                <div class="card w-100 p-4 mb-3 cards">
                    <h6 class="mb-2 fw-bold" style="font-size:18px">No Upcoming Events</h6>
                </div>
            }
        </div>
        
    </div>

    
</div>

@code{
    //List
    private List<Schedule> todaysEvent = new();
    private List<Schedule> upcomingEvents = new();

    //Data
    int totalMembers = 0;
    int lastSundayAttendance = 0;
    int upcomingEventsCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetStats();
        await GetEvents();
    }

    //Get events
    private async Task GetEvents()
    {
        var result = await _scheduleService.GetScheduleAsync();
        if (result.Success)
        {
            if (result.Data != null)
            {
                var list = result.Data;

                DateOnly today = DateOnly.FromDateTime(DateTime.Now);
                upcomingEventsCount = list.Where(u => u.EndDate > today).Count();

                var eventThisMonth = result.Data.Where(u => u.StartDate.Month == DateOnly.FromDateTime(DateTime.Now).Month);

                if (eventThisMonth != null)
                {
                    upcomingEvents = eventThisMonth.Where(u => u.EndDate > today).OrderBy(u => u.StartDate).Take(5).ToList();
                    todaysEvent = eventThisMonth.Where(u => today >= u.StartDate && today <= u.EndDate).OrderByDescending(u => u.StartDate).Take(5).ToList();

                    int daysAfterSunday = (int)today.DayOfWeek;
                    DateOnly lastSundayDate = today.AddDays(-daysAfterSunday);

                    var sundayDate = eventThisMonth.FirstOrDefault(u => u.DepartmentId == "Senior" && u.Title == "Holiness Meeting" && u.StartDate == lastSundayDate);

                    if (sundayDate != null)
                    {
                        var attRes = await _attendanceService.GetAttendanceByScheduleId(sundayDate.Id);
                        if (attRes.Success)
                        {
                            if (attRes.Data != null)
                            {
                                var sun = attRes.Data.FirstOrDefault(u => u.Date == lastSundayDate);
                                if (sun != null)
                                {
                                    lastSundayAttendance = sun.TotalAttendee;
                                }
                            }
                        }
                        else
                        {
                            await _js.InvokeVoidAsync("alert", "Failed to get last sunday attendance");
                        }
                    }
                }
                



            }
        }
        else
        {
            await _js.InvokeVoidAsync("await", result.Error);
        }
    }

    //Get stats
    private async Task GetStats()
    {
        var membersRes = await _memberService.GetMembersAsync();

        if (membersRes.Success)
        {
            if (membersRes.Data != null)
            {
                totalMembers = membersRes.Data.Count();
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get data");
        }
    }

    //show notifications
    private void Notify()
    {
        _toast.AddNotification("This is a test notification", "success", 3000);
    }

}