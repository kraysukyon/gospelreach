@page "/media-copy"
@layout LandingLayout
@inject GospelReachCapstone.Services.GoogleDriveService _gdrive
@using GospelReachCapstone.Models
@inject IJSRuntime _js

<PageTitle>Media Files</PageTitle>


<div class="sub-page">
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Media File Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Upload, organize, and manage church media files.</p>
        </div>

        <div class="w-auto d-flex gap-2 align-items-center">
            <p>@statusMessage</p>
            <button @onclick="SignIn" class="btn btn-primary p-2 px-4 text-white link">Sign In</button>
            <button class="btn btn-primary p-2 text-white link @(isSignIn ? "" : "hide")">Upload File</button>
        </div>
    </div>

    <h4>📁 Browse Files by Folder</h4>
    <select @onchange="LoadFilesInFolder">
        <option value="">-- Select Folder to View Files --</option>
        @foreach (var items in folderMap)
        {
            <option value="@items.Key">@items.Key.ToUpper()</option>
        }
    </select>

    @if (folderFiles?.Any() == true)
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>File Name</th>
                <th>Size</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var items in folderFiles)
            {
                <tr>
                    <td>@items.Name</td>
                    <td>@FormatSize(items.Size)</td>
                    <td>
                        <button class="btn btn-sm btn-primary" @onclick="() => DownloadFile(items.Id, items.Name)">⬇️ Download</button>
                        <button class="btn btn-sm btn-danger" @onclick="@(() => DeleteFile(items.Id))">🗑 Delete</button>
                        <button class="btn btn-sm btn-secondary" @onclick="@(() => PromptRename(items.Id))">✏ Rename</button>
                        <a href="@items.WebViewLink" target="_blank" class="btn btn-sm btn-info">🔗 View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}
else if (selectedViewFolderKey != null)
{
    <p><em>No files found or folder empty.</em></p>
}

    <!--Table Section-->
    <div class="card w-100 mb-3 cards @(isSignIn ? "" : "hide")">
        <div class="container">
            <!--Search Section-->
            <div class="d-flex flex-column flex-md-row gap-2 mb-4">
                <div class="position-relative flex-grow-1">
                    <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                    <input type="text" class="form-control border search" placeholder="Search files..." />
                </div>

                <div class="flex-shrink-0 d-flex flex-column flex-md-row gap-2">
                    <button class="btn btn-primary p-2 px-3 w-100 text-nowrap text-white">All</button>
                    <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-film"></i> Videos</button>
                    <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-music-note-beamed"></i> Audio</button>
                    <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-file-earmark-text"></i> Documents</button>
                    <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-image"></i> Images</button>
                </div>
            </div>

            <!--File Section-->
            <div class="wrapper">
                <div class="files">
                    @foreach (var item in folderFiles)
                    {
                        <div class="card p-4 cards d-flex flex-column align-items-start justify-content-center">
                            <div class="d-flex gap-3">
                                <div class="flex-shrink-0">
                                    <div class="p-2" style="background-color: lavender; border-radius: 6px;">
                                        <i class="bi bi-film text-primary"></i>
                                    </div>
                                </div>

                                <div class="flex-grow-1">
                                    <h5 class="mb-1">@item.Name</h5>
                                    <p class="c2" style="font-size:14px;">@item.Size Uploaded on 2025-04-21</p>
                                    <p class="c2" style="font-size:14px;">By John Smith</p>
                                </div>
                            </div>

                            <div class="d-flex mt-3 gap-2 align-self-end">
                                <button class="btn btn-light border border-1 px-2 py-1 w-100 text-nowrap" style="font-size: 14px;"><i class="bi bi-download"></i> Download</button>
                                <button class="btn btn-danger text-white px-2 py-1" style="font-size: 14px;">Delete</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code{
    private bool isSignIn = false;
    private string statusMessage = "";
    private string selectedFolderKey = "";
    private string selectedViewFolderKey = "";
    private int uploadProgress = 0;
    private string audio = "1Hf7_22kJyu3XN37QmzOkakpboHoqd9ud";
    private List<DriveFile> folderFiles = new();

    [JSInvokable]
    public Task ReportUploadProgress(int percent)
    {
        uploadProgress = percent;
        StateHasChanged(); // update UI
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnUploadCompleted()
    {
        statusMessage = "✅ File uploaded successfully!";
        StateHasChanged(); // Refresh the UI
        return Task.CompletedTask;
    }

    private readonly Dictionary<string, string> folderMap = new()
    {
        { "audio", "1Hf7_22kJyu3XN37QmzOkakpboHoqd9ud" },
        { "video", "1ttpye5PnAv_57DBBRC99_4kg2hNs4Nll" },
        { "image", "1lxD-uV3AJB4-yO7m5Jf2oIkJhR2gWpbu" }
    };

    //Toggle hide/show Mediacontents
    private void ToggleMedia()
    {
        isSignIn = !isSignIn;
    }

    //Sign in googleDrive
    private async Task SignIn()
    {
        statusMessage = "🔄 Signing in...";
        try
        {
            // await _gdrive.signInAsync();
            statusMessage = "✅ Sign-in successful!";
            ToggleMedia();
        }
        catch (Exception ex)
        {
            statusMessage = "❌ Sign-in failed: " + ex.Message;
            return;
        }
    }

    private async Task LoadFilesInFolder(ChangeEventArgs e)
    {
        selectedViewFolderKey = e.Value?.ToString();
        folderFiles.Clear();

        if (!string.IsNullOrWhiteSpace(selectedViewFolderKey) && folderMap.TryGetValue(selectedViewFolderKey, out var folderId))
        {
            try
            {
                folderFiles = await _js.InvokeAsync<List<DriveFile>>("googleDriveFunctions.listFilesInFolder", folderId);
                if (folderFiles == null )
                {
                    await _js.InvokeVoidAsync("alert", "folder is null");
                }
            }
            catch (Exception ex)
            {
                statusMessage = "❌ Failed to fetch files: " + ex.Message;
            }
        }
    }

    
    private async Task DeleteFile(string fileId)
    {
        try
        {
            await _js.InvokeVoidAsync("googleDriveFunctions.deleteFile", fileId);
            statusMessage = "✅ File deleted.";
            await LoadFilesInFolder(new ChangeEventArgs { Value = selectedViewFolderKey });
        }
        catch (Exception ex)
        {
            statusMessage = "❌ Delete failed: " + ex.Message;
        }
    }

    private async Task PromptRename(string fileId)
    {
        var newName = await _js.InvokeAsync<string>("prompt", "Enter new file name:");
        if (!string.IsNullOrWhiteSpace(newName))
        {
            try
            {
                await _js.InvokeVoidAsync("googleDriveFunctions.renameFile", fileId, newName);
                statusMessage = "✅ File renamed.";
                await LoadFilesInFolder(new ChangeEventArgs { Value = selectedViewFolderKey });
            }
            catch (Exception ex)
            {
                statusMessage = "❌ Rename failed: " + ex.Message;
            }
        }
    }

    private async Task DownloadFile(string fileId, string fileName)
    {
        try
        {
            await _js.InvokeVoidAsync("googleDriveFunctions.downloadFile", fileId, fileName);
        }
        catch (Exception ex)
        {
            statusMessage = $"❌ Download failed: {ex.Message}";
        }
    }

    private string FormatSize(string sizeStr)
    {
        if (long.TryParse(sizeStr, out long size))
        {
            string[] sizes = { "B", "KB", "MB", "GB", "TB" };
            int order = 0;
            while (size >= 1024 && order < sizes.Length - 1)
            {
                order++;
                size = size / 1024;
            }

            return $"{size:0.#} {sizes[order]}";
        }

        return "Unknown";
    }


}