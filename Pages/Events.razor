@page "/events"
@layout LandingLayout
@inject GospelReachCapstone.Services.FirestoreService _firestore
@using GospelReachCapstone.Models
@inject IJSRuntime _js

<PageTitle>Events</PageTitle>


<div class="page">
    <!--Add User Model-->
    <div @onclick="ToggleModal" class="addEventModal @(isAddModalVisible ? "show" : "")">
        <div class="addEvent" @onclick:stopPropagation>
            <h4 class="fw-bold">
                @title
            </h4>
            <p style="font-size:14px;">Create and Manage Events.</p>

            <div class="input mt-3">
                <p>Event Name</p>
                <input @bind="events.EventName" type="text" class="form-control p-2 mt-2" placeholder="Event Name" />
            </div>

            <div class="userFields">
                <div class="input">
                    <p>Date</p>
                    <input @bind="date" type="date" class="form-control p-2 mt-2" />
                </div>

                <div class="input">
                    <p>Tag</p>
                    <select @bind="events.Tag" class="form-select p-2 mt-2">
                        <option value="Holiness Meeting">Holiness Meeting</option>
                        <option value="Bible Study">Bible Study</option>
                        <option value="Prayer Meeting">Prayer Meeting</option>
                        <option value="Torchbearer">Torchbearer</option>
                        <option value="Homeleague">Homeleague</option>
                        <option value="Mens">Mens</option>
                    </select>
                </div>
            </div>

            <div class="userFields">
                <div class="input">
                    <p>Start Time</p>
                    <input @bind="startTime" type="time" class="form-control p-2" />
                </div>

                <div class="input">
                    <p>End Time</p>
                    <input @bind="endTime" type="time" class="form-control p-2" />
                </div>
            </div>

            <div class="input mt-3">
                <p>Location</p>
                <input @bind="events.Location" type="text" class="form-control p-2 mt-2" placeholder="Location" />
            </div>

            <div class="input mt-3">
                <p>Description</p>
                <textarea @bind="events.Description" type="text" class="form-control p-2 mt-2" placeholder="Description" />
            </div>

            

            @if (title == "Add Event")
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Cancel</button>
                    <button class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="addEvent" >Create</button>
                </div>
            }
            else
            {
                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Cancel</button>
                    <button @onclick="updateEvent" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white">Update</button>
                </div>
            }

        </div>
    </div>

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Event Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Create and manage church events and activities.</p>
        </div>

        <div>
            <button @onclick="ToggleModal" class="btn btn-primary p-2 text-white link w-100">Add Event</button>
        </div>
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards">
        <div class="container">
            <!--Search Section-->
            <div class="d-flex flex-column flex-md-row gap-2 mb-4">
                <div class="position-relative flex-grow-1">
                    <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                    <input type="text" class="form-control border search" placeholder="Search events..." />
                </div>

                <div class="flex-shrink-0 d-flex flex-column flex-md-row gap-2">
                    <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-calendar"></i> Calendar View</button>
                </div>
            </div>

            <!--File Section-->
            <div class="events">
                @foreach (var items in eventsList)
                {
                    <div class="card p-4 cards">
                        <div class="d-flex justify-content-between mb-2">
                            <h5 class="mb-1">@items.EventName</h5>
                            <div class="pill c2">
                                <p>Upcoming</p>
                            </div>
                        </div>

                        <div class="d-flex flex-column gap-2">
                            <div class="d-flex gap-2 align-items-center">
                                <i class="bi bi-calendar"></i>
                                <p class="m-0 c2" style="font-size: 14px">@items.Date</p>
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                <i class="bi bi-clock"></i>
                                <p class="m-0 c2" style="font-size: 14px">@items.StartTime - @items.EndTime</p>
                            </div>
                            <div class="d-flex gap-2 align-items-center">
                                <i class="bi bi-geo-alt-fill"></i>
                                <p class="m-0 c2" style="font-size: 14px">@items.Location</p>
                            </div>
                        </div>

                        <p class="m-0 mt-2 c2" style="font-size: 14px">@items.Description</p>

                        <div class="d-flex align-items-center justify-content-between mt-5">
                            <div class="pill2">
                                <p>@events.Tag</p>
                            </div>

                            <div class="d-flex gap-2">
                                <!--Edit-->
                                <button @onclick="@(() => OpenEdit(items.Id))" class="btn btn-outline-light px-4 py-1 border border-1" style="font-size: 13px;"><span><i class="bi bi-pencil-square"></i></span> Edit</button>

                                <!--Delete-->
                                <button @onclick="@(() => deleteEvent(items.Id))" class="btn btn-danger text-white flex-grow-1" style="border-radius: 10px; padding: 5px 12px; font-size:13px;"><span><i class="bi bi-trash text-white"></i></span>Delete</button>
                            </div>
                        </div>
                    </div>
                }
            </div>

            
        </div>
    </div>
</div>

@code{
    private List<Event> eventsList = new();
    private string title = "Add Event";
    private bool isAddModalVisible = false;
    private Event events = new();
    private DateTime date = DateTime.Now;
    private TimeOnly startTime;
    private TimeOnly endTime;

    protected override async Task OnInitializedAsync()
    {
        await getEventsList();
    }

    private void ToggleModal()
    {
        isAddModalVisible = !isAddModalVisible;
        title = "Add Event";
        events = new();
    }

    private async Task getEventsList()
    {
        try
        {
            eventsList = new();
            eventsList = await _firestore.getEventsAsync();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task addEvent()
    {
        try
        {
            events.StartTime = startTime.ToString();
            events.EndTime = endTime.ToString();
            events.Date = date.ToString();
            await _firestore.addEventAsync(events);
            ToggleModal();
            await getEventsList();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task OpenEdit(string Id)
    {
        ToggleModal();
        title = "Edit Event";
        var editEvent = eventsList.FirstOrDefault(u => u.Id == Id);
        if (editEvent != null)
        {
            events = editEvent;
            startTime = TimeOnly.Parse(editEvent.StartTime);
            endTime = TimeOnly.Parse(editEvent.EndTime);
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Event does not exist");
            await getEventsList();
        }
    }

    private async Task updateEvent()
    {
        try
        {
            events.StartTime = startTime.ToString();
            events.EndTime = endTime.ToString();
            events.Date = date.ToString();
            await _firestore.editEventAsync(events.Id, events);
            await _js.InvokeVoidAsync("alert", "Event successfuly updated");
            ToggleModal();
        }
        catch
        {
            await _js.InvokeVoidAsync("alert", "Update Failed");
        }
    }

    private async Task deleteEvent(string Id)
    {
        bool confirmed = await _js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
        if (!confirmed) return;

        try
        {
            await _firestore.DeleteEventAsync(Id);
            await getEventsList();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error on deleting document: {ex.Message}");
        }
    }
}