@page "/schedules"
@layout LandingLayout
@inject GospelReachCapstone.Services.ScheduleService _schedule
@inject GospelReachCapstone.Services.AttendanceService _attendance
@inject GospelReachCapstone.Services.GroupService _group
@inject GospelReachCapstone.Services.GroupMemberService _groupMemberService
@inject GospelReachCapstone.Services.MemberService _memberService
@inject GospelReachCapstone.Services.NotificationService _notificationService
@inject GospelReachCapstone.Services.AttendanceMemberRecordService _attenanceMemberRecordService
@inject GospelReachCapstone.Services.AttendanceVisitorRecordService _attendanceVisitorRecordService
@inject GospelReachCapstone.Services.VisitorService _visitorsService
@inject GospelReachCapstone.Services.FinanceScheduleService _financeEventsService
@inject GospelReachCapstone.Services.AuthState _auth
@using GospelReachCapstone.Models
@inject IJSRuntime _js
@using System.Globalization
@inject HttpClient Http


<PageTitle>Schedule Management</PageTitle>


<div class="pages">
    <div @onclick="ToggleModal" class="addEventModal @(BackgroundModal ? "show" : "")">
        <!--Delete Modal-->
        <div @onclick:stopPropagation hidden="@(!isRemoveModal)" class="helperModal">
            <div hidden="@(isRemoving)">
                <div class="d-flex flex-column justify-content-center align-items-center mt-3">
                    <h3>Confirm Remove</h3>
                    <p>You are about to remove a schedule</p>
                </div>


                <div class="d-flex gap-4 align-items-center justify-content-center mt-4 mb-3">
                    <button disabled="@(isRemoving)" @onclick="ToggleModal" class="btn btn-outline-light px-3 py-1 border border-1" style="font-size: 18px;">Cancel</button>
                    <button disabled="@(isRemoving)" @onclick="RemoveSchedule" class="btn btn-danger px-3 py-1 text-white" style="font-size: 18px;">Remove</button>
                </div>
            </div>


            <div hidden="@(!isRemoving)">
                <div class="d-flex flex-column justify-content-center align-items-center mt-3">
                    <h3>Removing</h3>
                    <p>Please wait...</p>
                </div>
                <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                    <img src="/img/loading.svg" style="height:50px; width: 50px;" />
                </div>
            </div>
        </div>

        <!--Loading Modal-->
        <div @onclick:stopPropagation hidden="@(!isLoadingModal)" class="helperModal">
            <div class="d-flex flex-column justify-content-center align-items-center mt-3">
                <h1 style="font-weight: 600;">Loading</h1>
                <p>Please wait...</p>
            </div>


            <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                <img src="/img/loading.svg" style="height:50px; width: 50px;" />
            </div>
        </div>

        <!--=================================Add Department Modal===============================-->
        <div @onclick:stopPropagation hidden="@(!isAddSched)" class="cards">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <h4 class="fw-bold">
                        New Department Schedule
                    </h4>
                </div>
            </div>


            @if (serviceValidation.Any())
            {
                <div class="mb-3">
                    @foreach (var item in serviceValidation)
                    {
                        <p class="text-danger">@item</p>
                    }
                </div>
            }


            <!--Type-->
            @* <div class="input mt-4">
                <div class="title">
                    <i class="bi bi-ui-radios-grid"></i>
                    <p>Type</p>
                </div>

                <div class="cat">
                    <button @onclick="(() => setType(1))" class="btn type @GetClass(1)"><i class="bi bi-star"></i> Event</button>
                    <button @onclick="(() => setType(2))" class="btn type @GetClass(2)"><i class="bi bi-book"></i> Department</button>
                    <button @onclick="(() => setType(3))" class="btn type @GetClass(3)"><i class="bi bi-houses"></i> Service</button>
                    <button @onclick="(() => setType(4))" class="btn type @GetClass(4)"><i class="bi bi-houses"></i> Others</button>
                </div>
            </div> *@

            <!--Host-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-mic"></i>
                    <p>Host</p>
                </div>

                <select @onchange="OnDepartmentChange" class="form-select p-2 text-center">
                    <option value="Senior">Senior</option>
                    <option value="Womens">Womens</option>
                    <option value="Mens">Mens</option>
                    <option value="Youth">Youth</option>
                </select>

            </div>

            <!--Departments-->
            <div class="input mt-3">
                <div class="title">
                    @* <i class="bi bi-calendar-check"></i>
                    <p>Date</p> *@
                </div>

                <select @onchange="OnDivisionChange" disabled="@(selectedDepartment == "Mens")" class="form-select text-center p-2">
                    @if (SubCategories.Any())
                    {
                        @foreach (var sub in SubCategories)
                        {
                            <option value="@sub.Id">@sub.Name</option>
                        }
                    }
                </select>


                @* <div class="date">
                    <select value="@selectedDepartment" @onchange="OnDepartmentChange" class="form-select text-center p-2">
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <i class="bi bi-arrow-right"></i>
                    
                </div> *@
            </div>

            <!--Title-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-pencil-square"></i>
                    <p>Title</p>
                </div>

                <input readonly @bind="serviceSchedule.Title" type="text" class="form-control p-2" placeholder="Add Title" />
            </div>


            <!--Attendees-->
            <div class="input mt-3">
                <div class="title mt-2">
                    <input checked="@(serviceSchedule.HasAttendee)" @onchange="ToggleAttendee" type="checkbox" class="cursor" />
                    <label>Attendee</label>
                </div>

                <div class="date">
                    <select disabled="@(!serviceSchedule.HasAttendee)" @onchange="OnChangeAttendee" class="form-select text-center p-2">
                        <option value="All">All</option>
                        <option value="Group">Groups</option>
                    </select>
                    <i class="bi bi-arrow-right"></i>
                    <select disabled="@(!isAttendee || Attendee == "All")" @onchange="OnChangeGroup" class="form-select text-center p-2">
                        @foreach (var item in filteredGroupList)
                        {
                            if (item.Name != "All Members")
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                </div>


            </div>

            <!--Date-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-calendar-check"></i>
                    <p>Date</p>
                </div>


                <div class="date">
                    <input @bind="serviceSchedule.StartDate" @bind:event="onchange" @bind:after="OnChangeDate" type="date" class="form-control p-2" />
                    <i class="bi bi-arrow-right"></i>
                    <input @bind="serviceSchedule.EndDate" type="date" class="form-control p-2" />
                </div>
            </div>

            <!--Time-->
            <div class="inputTime mt-3">
                <div class="title mt-2">
                    <i class="bi bi-clock"></i>
                    <p>Time</p>
                </div>

                <div class="dates">
                    <div class="date">
                        <input readonly="@(isCustom)" @bind="sTime" type="time" class="form-control p-2" />
                        <i class="bi bi-arrow-right"></i>
                        <input readonly="@(isCustom)" @bind="eTime" type="time" class="form-control p-2" />
                    </div>

                    <!--Radio button for time option-->
                    <div class="time">
                        <div class="d-flex gap-1 align-items-center">
                            <input checked type="radio" @onchange="(() => OnChangeRadio(0))" id="custom" name="time" class="cursor" />
                            <label>Custom</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(1))" type="radio" id="allday" name="time" class="cursor" />
                            <label>All day</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(2))" type="radio" id="morning" name="time" class="cursor" />
                            <label>Morning</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(3))" type="radio" id="afternoon" name="time" class="cursor" />
                            <label>Afternoon</label>
                        </div>
                    </div>
                </div>
            </div>

            <!--Venue-->
            <div class="input">
                <div class="title">
                    <i class="bi bi-geo-alt"></i>
                    <p>Venue</p>
                </div>

                <input spellcheck="false" @bind="serviceSchedule.Location" type="text" class="form-control p-2" placeholder="Add Venue" />
            </div>

            <!--Description-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <i class="bi bi-list-ul"></i>
                    <p>Details</p>
                </div>

                <textarea @bind="serviceSchedule.Description" @ref="textarea" @oninput="ResizeDet" type="text" spellcheck="false" class="form-control p-2" placeholder="Add Details" />
            </div>



            <!--Notification-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <input @onchange="ToggleNotify" type="checkbox" class="cursor" />
                    @* <i class="bi bi-bell"></i> *@
                    <label>Notify</label>
                </div>

                <div class="d-flex flex-column gap-2">
                    <select disabled="@(!isNotify)" @bind="groupMemberId" class="form-select p-2 text-center">
                        @foreach (var item in notifList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                    <div class="email">
                        <input readonly="@(!isNotify)" spellcheck="false" @bind="emailToAdd" type="text" class="form-control p-2 pe-5" placeholder="Add Email" />
                        <i @onclick="AddToEmailList" class="bi bi-plus-circle-fill text-primary fs-5 cursor add"></i>
                    </div>

                    <div class="addedEmail">
                        @foreach (var item in emailList)
                        {
                            <div class="emails">
                                <p class="pill5">@item</p>
                                <i @onclick="() => RemoveToEmailList(item)" class="bi bi-x-circle cursor remove bg-white text-danger"></i>
                            </div>
                        }
                    </div>

                </div>

            </div>

            <div class="mt-3 @(isAddingService ? "d-flex" : "d-none") align-items-center justify-content-center">
                <p>Creating schedule.Please wait...</p>


                <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                    <img src="/img/loading.svg" style="height:50px; width: 50px;" />
                </div>
            </div>

            <div class="addOptions mt-4 d-block d-md-flex gap-2" style="justify-self: end;">
                <button class="btn border border-1 p-2 px-4" @onclick="ToggleModal">Close</button>
                <button hidden="@(title != "New Schedule")" class="btn btn-primary p-2 px-4 text-white" @onclick="addService">Create</button>
            </div>
        </div>

        <!--=================================Add Service Modal===============================-->
        <div @onclick:stopPropagation hidden="@(!isAddServiceModal)" class="cards">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <h4 class="fw-bold">
                        New Service
                    </h4>
                </div>
            </div>

            
            @if (serviceValidation.Any())
            {
                <div class="mb-3">
                    @foreach (var item in serviceValidation)
                    {
                        <p class="text-danger">@item</p>
                    }
                </div>
            }
            

            <!--Type-->
            @* <div class="input mt-4">
                <div class="title">
                    <i class="bi bi-ui-radios-grid"></i>
                    <p>Type</p>
                </div>

                <div class="cat">
                    <button @onclick="(() => setType(1))" class="btn type @GetClass(1)"><i class="bi bi-star"></i> Event</button>
                    <button @onclick="(() => setType(2))" class="btn type @GetClass(2)"><i class="bi bi-book"></i> Department</button>
                    <button @onclick="(() => setType(3))" class="btn type @GetClass(3)"><i class="bi bi-houses"></i> Service</button>
                    <button @onclick="(() => setType(4))" class="btn type @GetClass(4)"><i class="bi bi-houses"></i> Others</button>
                </div>
            </div> *@

            <!--Host-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-mic"></i>
                    <p>Host</p>
                </div>

                <select @bind="serviceSchedule.DepartmentId" class="form-select p-2 text-center">
                    <option value="Senior">Senior</option>
                    <option value="Womens">Womens</option>
                    <option value="Mens">Mens</option>
                    <option value="Youth">Youth</option>
                </select>

            </div>

            <!--Title-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-pencil-square"></i>
                    <p>Title</p>
                </div>

                <input @bind="serviceSchedule.Title" type="text" class="form-control p-2" placeholder="Add Title" />
            </div>

            
            <!--Attendees-->
            <div class="input mt-3">
                <div class="title mt-2">
                    <input checked="@(serviceSchedule.HasAttendee)" @onchange="ToggleAttendee" type="checkbox" class="cursor"/>
                    <label>Attendee</label>
                </div>

                <div class="date">
                    <select disabled="@(!serviceSchedule.HasAttendee)" @onchange="OnChangeAttendee" class="form-select text-center p-2">
                        <option value="All">All</option>
                        <option value="Group">Groups</option>
                    </select>
                    <i class="bi bi-arrow-right"></i>
                    <select disabled="@(!isAttendee || Attendee == "All")" @onchange="OnChangeGroup" class="form-select text-center p-2">
                        @foreach (var item in filteredGroupList)
                        {
                            if (item.Name != "All Members")
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                </div>


            </div>

            <!--Date-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-calendar-check"></i>
                    <p>Date</p>
                </div>


                <div class="date">
                    <input @bind="serviceSchedule.StartDate" @bind:event="onchange" @bind:after="OnChangeDate" type="date" class="form-control p-2" />
                    <i class="bi bi-arrow-right"></i>
                    <input @bind="serviceSchedule.EndDate" type="date" class="form-control p-2" />
                </div>
            </div>

            <!--Time-->
            <div class="inputTime mt-3">
                <div class="title mt-2">
                    <i class="bi bi-clock"></i>
                    <p>Time</p>
                </div>

                <div class="dates">
                    <div class="date">
                        <input readonly="@(isCustom)" @bind="sTime" type="time" class="form-control p-2" />
                        <i class="bi bi-arrow-right"></i>
                        <input readonly="@(isCustom)" @bind="eTime" type="time" class="form-control p-2" />
                    </div>

                    <!--Radio button for time option-->
                    <div class="time">
                        <div class="d-flex gap-1 align-items-center">
                            <input checked type="radio" @onchange="(() => OnChangeRadio(0))" id="custom" name="time" class="cursor" />
                            <label>Custom</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(1))" type="radio" id="allday" name="time" class="cursor" />
                            <label>All day</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(2))" type="radio" id="morning" name="time" class="cursor" />
                            <label>Morning</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(3))" type="radio" id="afternoon" name="time" class="cursor"/>
                            <label>Afternoon</label>
                        </div>
                    </div>
                </div>
            </div>

            <!--Venue-->
            <div class="input">
                <div class="title">
                    <i class="bi bi-geo-alt"></i>
                    <p>Venue</p>
                </div>

                <input spellcheck="false" @bind="serviceSchedule.Location" type="text" class="form-control p-2" placeholder="Add Venue" />
            </div>

            <!--Description-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <i class="bi bi-list-ul"></i>
                    <p>Details</p>
                </div>

                <textarea @bind="serviceSchedule.Description" @ref="textarea" @oninput="ResizeDet" type="text" spellcheck="false" class="form-control p-2" placeholder="Add Details" />
            </div>



            <!--Notification-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <input @onchange="ToggleNotify" type="checkbox" class="cursor"/>
                    @* <i class="bi bi-bell"></i> *@
                    <label>Notify</label>
                </div>

                <div class="d-flex flex-column gap-2">
                    <select disabled="@(!isNotify)" @bind="groupMemberId" class="form-select p-2 text-center">
                        @foreach (var item in notifList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                    <div class="email">
                        <input readonly="@(!isNotify)" spellcheck="false" @bind="emailToAdd" type="text" class="form-control p-2 pe-5" placeholder="Add Email" />
                        <i @onclick="AddToEmailList" class="bi bi-plus-circle-fill text-primary fs-5 cursor add"></i>
                    </div>

                    <div class="addedEmail">
                        @foreach (var item in emailList)
                        {
                            <div class="emails">
                                <p class="pill5">@item</p>
                                <i @onclick="() => RemoveToEmailList(item)" class="bi bi-x-circle cursor remove bg-white text-danger"></i>
                            </div>
                        }
                    </div>

                </div>

            </div>

            <div class="mt-3 @(isAddingService ? "d-flex" : "d-none") align-items-center justify-content-center">
                <p>Creating schedule.Please wait...</p>


                <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                    <img src="/img/loading.svg" style="height:50px; width: 50px;" />
                </div>
            </div>

            <div class="addOptions mt-4 d-block d-md-flex gap-2" style="justify-self: end;">
                <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Close</button>
                <button hidden="@(title != "New Schedule")" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="addService">Create</button>
            </div>
        </div>

        <!--=================================Update Service Modal===============================-->
        <div @onclick:stopPropagation hidden="@(!isUpdateServiceModal)" class="cards">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <h4 class="fw-bold">
                        Update Schedule
                    </h4>
                </div>
            </div>


            @if (updateServiceValidation.Any())
            {
                <div class="mb-3">
                    @foreach (var item in updateServiceValidation)
                    {
                        <p class="text-danger">@item</p>
                    }
                </div>
            }


            <!--Type-->
            @* <div class="input mt-4">
                <div class="title">
                    <i class="bi bi-ui-radios-grid"></i>
                    <p>Type</p>
                </div>

                <div class="cat">
                    <button @onclick="(() => setType(1))" class="btn type @GetClass(1)"><i class="bi bi-star"></i> Event</button>
                    <button @onclick="(() => setType(2))" class="btn type @GetClass(2)"><i class="bi bi-book"></i> Department</button>
                    <button @onclick="(() => setType(3))" class="btn type @GetClass(3)"><i class="bi bi-houses"></i> Service</button>
                    <button @onclick="(() => setType(4))" class="btn type @GetClass(4)"><i class="bi bi-houses"></i> Others</button>
                </div>
            </div> *@

            <!--Host-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-mic"></i>
                    <p>Host</p>
                </div>

                <select disabled="@(updateServiceSchedule.CategoryId == "Department")" @bind="updateServiceSchedule.DepartmentId" class="form-select p-2 text-center">
                    <option value="Senior">Senior</option>
                    <option value="Womens">Womens</option>
                    <option value="Mens">Mens</option>
                    <option value="Youth">Youth</option>
                </select>

            </div>

            <!--Title-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-pencil-square"></i>
                    <p>Title</p>
                </div>

                <input readonly="@(updateServiceSchedule.CategoryId == "Department")" @bind="updateServiceSchedule.Title" type="text" class="form-control p-2" placeholder="Add Title" />
            </div>


            <!--Attendees-->
            <div class="input mt-3">
                <div class="title mt-2">
                    <input checked="@(updateServiceSchedule.HasAttendee)" @onchange="ToggleAttendee" type="checkbox" class="cursor" />
                    <label>Attendee</label>
                </div>

                <div class="date">
                    <select disabled="@(!updateServiceSchedule.HasAttendee)" @onchange="OnChangeAttendee" class="form-select text-center p-2">
                        <option value="All">All</option>
                        <option value="Group">Groups</option>
                    </select>
                    <i class="bi bi-arrow-right"></i>
                    <select disabled="@(!isAttendee || Attendee == "All")" @onchange="OnChangeGroup" class="form-select text-center p-2">
                        @foreach (var item in filteredGroupList)
                        {
                            if (item.Name != "All Members")
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                </div>


            </div>

            <!--Date-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-calendar-check"></i>
                    <p>Date</p>
                </div>


                <div class="date">
                    <input @bind="updateServiceSchedule.StartDate" @bind:event="onchange" @bind:after="OnChangeDate" type="date" class="form-control p-2" />
                    <i class="bi bi-arrow-right"></i>
                    <input @bind="updateServiceSchedule.EndDate" type="date" class="form-control p-2" />
                </div>
            </div>

            <!--Time-->
            <div class="inputTime mt-3">
                <div class="title mt-2">
                    <i class="bi bi-clock"></i>
                    <p>Time</p>
                </div>

                <div class="dates">
                    <div class="date">
                        <input readonly="@(isCustom)" @bind="sTime" type="time" class="form-control p-2" />
                        <i class="bi bi-arrow-right"></i>
                        <input readonly="@(isCustom)" @bind="eTime" type="time" class="form-control p-2" />
                    </div>

                    <!--Radio button for time option-->
                    <div class="time">
                        <div class="d-flex gap-1 align-items-center">
                            <input checked type="radio" @onchange="(() => OnChangeRadio(0))" name="time" class="cursor" />
                            <label>Custom</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(1))" name="time" type="radio" class="cursor"/>
                            <label>All day</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(2))" name="time" type="radio" class="cursor" />
                            <label>Morning</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input @onchange="(() => OnChangeRadio(3))" name="time" type="radio" class="cursor" />
                            <label>Afternoon</label>
                        </div>
                    </div>
                </div>
            </div>

            <!--Venue-->
            <div class="input">
                <div class="title">
                    <i class="bi bi-geo-alt"></i>
                    <p>Venue</p>
                </div>

                <input spellcheck="false" @bind="updateServiceSchedule.Location" type="text" class="form-control p-2" placeholder="Add Venue" />
            </div>

            <!--Description-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <i class="bi bi-list-ul"></i>
                    <p>Details</p>
                </div>

                <textarea @bind="updateServiceSchedule.Description" @ref="textarea" @oninput="ResizeDet" type="text" spellcheck="false" class="form-control p-2" placeholder="Add Details" />
            </div>



            <!--Notification-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <input @onchange="ToggleNotify" type="checkbox" class="cursor" />
                    @* <i class="bi bi-bell"></i> *@
                    <label>Notify</label>
                </div>

                <div class="d-flex flex-column gap-2">
                    <select disabled="@(!isNotify)" @bind="groupMemberId" class="form-select p-2 text-center">
                        @foreach (var item in notifList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                    <div class="email">
                        <input readonly="@(!isNotify)" spellcheck="false" @bind="emailToAdd" type="text" class="form-control p-2 pe-5" placeholder="Add Email" />
                        <i @onclick="AddToEmailList" class="bi bi-plus-circle-fill text-primary fs-5 cursor add"></i>
                    </div>

                    <div class="addedEmail">
                        @foreach (var item in emailList)
                        {
                            <div class="emails">
                                <p class="pill5">@item</p>
                                <i @onclick="() => RemoveToEmailList(item)" class="bi bi-x-circle cursor remove bg-white text-danger"></i>
                            </div>
                        }
                    </div>

                </div>

            </div>

            <div class="mt-3 @(isUpdatingService ? "d-flex" : "d-none") align-items-center justify-content-center">
                <p>Updating schedule.Please wait...</p>


                <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                    <img src="/img/loading.svg" style="height:50px; width: 50px;" />
                </div>
            </div>

            <div class="addOptions mt-4 d-block d-md-flex gap-2" style="justify-self: end;">
                <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Close</button>
                <button @onclick="updateService" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white">Update</button>
            </div>
        </div>

        <!--=================================Add Department Schedule===============================-->
        <div @onclick:stopPropagation hidden="@(!isUpdateView)" class="cards">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <h4 class="fw-bold">
                        Update Schedule
                    </h4>
                </div>

                <i class="bi bi-arrow-return-left fs cursor hover" @onclick="ReturnView"></i>

            </div>

            

            <!--Type-->
            @* <div class="input mt-4">
                <div class="title">
                    <i class="bi bi-ui-radios-grid"></i>
                    <p>Type</p>
                </div>

                <div class="cat">
                    <button @onclick="(() => setType(1))" class="btn type @GetClass(1)"><i class="bi bi-star"></i> Event</button>
                    <button @onclick="(() => setType(2))" class="btn type @GetClass(2)"><i class="bi bi-book"></i> Department</button>
                    <button @onclick="(() => setType(3))" class="btn type @GetClass(3)"><i class="bi bi-houses"></i> Service</button>
                    <button @onclick="(() => setType(4))" class="btn type @GetClass(4)"><i class="bi bi-houses"></i> Others</button>
                </div>
            </div> *@

            <!--Host-->
            <div hidden="@(isDepartmentVisible)" class="input mt-3">
                <div class="title">
                    <i class="bi bi-mic"></i>
                    <p>Host</p>
                </div>

                <select @bind="updateServiceSchedule.DepartmentId" class="form-select p-2 text-center">
                    <option value="Senior">Senior</option>
                    <option value="Womens">Womens</option>
                    <option value="Mens">Mens</option>
                    <option value="Youth">Youth</option>
                </select>

            </div>

            <!--Title-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-pencil-square"></i>
                    <p>Title</p>
                </div>

                <input readonly="@(isDepartment)" @bind="eventTitle" type="text" class="form-control p-2" placeholder="Add Title" />
            </div>

            <!--Departments-->
            <div hidden="@(!isDepartmentVisible)" class="input mt-3">
                <div class="title">
                    @* <i class="bi bi-calendar-check"></i>
                    <p>Date</p> *@
                </div>


                <div class="date">
                    <select value="@selectedDepartment" @onchange="OnDepartmentChange" class="form-select text-center p-2">
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <i class="bi bi-arrow-right"></i>
                    <select @onchange="OnDivisionChange" value="@selectedSub" disabled="@(selectedDepartment == "Mens")" class="form-select text-center p-2">
                        @if (SubCategories.Any())
                        {
                            @foreach (var sub in SubCategories)
                            {
                                <option value="@sub.Id">@sub.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <!--Date-->
            <div class="input mt-3">
                <div class="title">
                    <i class="bi bi-calendar-check"></i>
                    <p>Date</p>
                </div>


                <div class="date">
                    <input @bind="sDate" @bind:event="onchange" @bind:after="OnChangeDate" type="date" class="form-control p-2" />
                    <i class="bi bi-arrow-right"></i>
                    <input @bind="eDate" type="date" class="form-control p-2" />
                </div>
            </div>

            <!--Time-->
            <div class="inputTime mt-3">
                <div class="title mt-2">
                    <i class="bi bi-clock"></i>
                    <p>Time</p>
                </div>

                <div class="dates">
                    <div class="date">
                        <input readonly="@(isCustom)" @bind="sTime" type="time" class="form-control p-2" />
                        <i class="bi bi-arrow-right"></i>
                        <input readonly="@(isCustom)" @bind="eTime" type="time" class="form-control p-2" />
                    </div>

                    <!--Radio button for time option-->
                    <div class="time">
                        <div class="d-flex gap-1 align-items-center">
                            <input checked="@(_selectedRadio == 0)" type="radio" @onchange="(() => OnChangeRadio(0))" id="custom" name="time" />
                            <label for="custom">Custom</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input checked="@(_selectedRadio == 1)" @onchange="(() => OnChangeRadio(1))" type="radio" id="allday" name="time" />
                            <label for="allday">All day</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input checked="@(_selectedRadio == 2)" @onchange="(() => OnChangeRadio(2))" type="radio" id="morning" name="time" />
                            <label for="morning">Morning</label>
                        </div>

                        <div class="d-flex gap-1 align-items-center">
                            <input checked="@(_selectedRadio == 3)" @onchange="(() => OnChangeRadio(3))" type="radio" id="afternoon" name="time" />
                            <label for="afternoon">Afternoon</label>
                        </div>
                    </div>
                </div>
            </div>

            <!--Venue-->
            <div class="input">
                <div class="title">
                    <i class="bi bi-geo-alt"></i>
                    <p>Venue</p>
                </div>

                <input spellcheck="false" @bind="sched.Location" type="text" class="form-control p-2" placeholder="Add Venue" />
            </div>

            <!--Description-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <i class="bi bi-list-ul"></i>
                    <p>Details</p>
                </div>

                <textarea @bind="sched.Description" @ref="textarea" @oninput="ResizeDet" type="text" spellcheck="false" class="form-control p-2" placeholder="Add Details" />
            </div>

            <!--Attendees-->
            <div class="input mt-3">
                <div class="title mt-2">
                    <input id="att" checked="@(hasAttendee)" @onchange="ToggleAttendee" type="checkbox" />
                    @* <i class="bi bi-bell"></i> *@
                    <label class="cursor" for="att">Attendee</label>
                </div>

                <div class="date">
                    <select disabled="@(!isAttendee)" value="@Attendee" @onchange="OnChangeAttendee" class="form-select text-center p-2">
                        <option value="All">All</option>
                        <option value="Group">Groups</option>
                    </select>
                    <i class="bi bi-arrow-right"></i>
                    <select disabled="@(!isAttendee || Attendee == "All")" @onchange="OnChangeGroup" class="form-select text-center p-2">
                        @foreach (var item in filteredGroupList)
                        {
                            if (item.Name != "All Members")
                            {
                                <option value="@item.Id">@item.Name</option>
                            }
                        }
                    </select>
                </div>
            </div>

            <!--Notification-->
            <div class="input inputD mt-3 mb-3">
                <div class="title mt-2">
                    <input id="chk" checked @onchange="ToggleNotify" type="checkbox" />
                    @* <i class="bi bi-bell"></i> *@
                    <label class="cursor" for="chk">Notify</label>
                </div>

                <div class="d-flex flex-column gap-2">
                    <select disabled="@(!isNotify)" @bind="groupMemberId" class="form-select p-2 text-center">
                        <option value="">Select Group</option>
                        @foreach (var item in groupList)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>
                    <div class="email">
                        <input readonly="@(!isNotify)" spellcheck="false" @bind="emailToAdd" type="text" class="form-control p-2 pe-5" placeholder="Add Email" />
                        <i @onclick="AddToEmailList" class="bi bi-plus-circle-fill text-primary fs-5 cursor add"></i>
                    </div>

                    <div class="addedEmail">
                        @foreach (var item in emailList)
                        {
                            <div class="emails">
                                <p class="pill5">@item</p>
                                <i @onclick="() => RemoveToEmailList(item)" class="bi bi-x-circle cursor remove bg-white text-danger"></i>
                            </div>
                        }
                    </div>

                </div>

            </div>

            <div class="addOptions mt-4 d-block d-md-flex gap-2" style="justify-self: end;">
                <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Close</button>
                <button class="btn btn-primary px-4 py-1 rounded rounded-pill text-white">Update</button>
            </div>
        </div>

        <!--==================================View Modal===================================-->
        <div hidden="@(!isView)" class="addEvents" @onclick:stopPropagation @onclick="closeOption">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <h4 class="fw-bold">Details</h4>
                </div>

                <div class="options @(role != "Administrator" ? "d-none" : "")">
                    <i class="bi bi-three-dots-vertical optionIcon cursor fs-4" @onclick="ToggleOption" @onclick:stopPropagation></i>
                    <div hidden="@(!isOptionVisible)" class="options-child">
                        <div class="cursor fsx" @onclick="() => ToggleUpdateUI(sched.Id)">Update</div>
                        <div class="cursor fsx" @onclick="(() => removeSchedule(sched.Id))">Remove</div>
                    </div>
                </div>

                @* <i hidden="@(title == "Details" || title == "New Schedule")" class="bi bi-arrow-return-left fs cursor hover" @onclick="ReturnView"></i> *@

            </div>

            <!--Category-->
            <div class="iconText">
                <i class="bi bi-activity text-primary"></i>
                <p class="fs"><strong>@sched.CategoryId</strong></p>
            </div>

            <!--Title-->
            <div class="iconText">
                <i class="bi bi-bookmark-check fs"></i>
                <p class="fs">@sched.Title</p>
            </div>

            <!--Date-->
            <div class="iconText">
                <i class="bi bi-calendar-event fs"></i>
                <p class="fs">@sched.StartDate - @sched.EndDate</p>
            </div>

            <!--Time-->
            <div class="iconText">
                <i class="bi bi-clock fs"></i>
                <p class="fs">@(sched.TimeOption == "Custom" ? $"{sched.StartTime} - {sched.EndTime}" : $"{sched.TimeOption} {sched.StartTime} - {sched.EndTime}")</p>
            </div>

            <!--Venue-->
            <div class="iconText">
                <i class="bi bi-geo-alt fs"></i>
                <p class="fs">@sched.Location</p>
            </div>

            <!--Description-->
            <div hidden="@(string.IsNullOrEmpty(sched.Description))" class="iconText">
                <i class="bi bi-list-columns fs"></i>
                <pre class="form-control border border-0 text-wrap" style="max-height: 200px; overflow-y: auto;">@(string.IsNullOrEmpty(sched.Description) ? "N/A" : sched.Description)</pre>
            </div>
            @* || hasAttendee && attDate <= DateOnly.FromDateTime(DateTime.Now) ? "justify-content-between" : "justify-content-end")" *@
            <div class="mt-5 d-flex gap-2 justify-content-end">
                <button class="btn border border-1 py-1 px-4" @onclick="ToggleModal">Close</button>
            </div>
        </div>

        <!--Confirm Modal-->
        <div @onclick:stopPropagation hidden="@(!isConfirmModal)" class="helperModal">
            <div class="confirm">
                <h1>@confirmTitle</h1>
                <p>@confirmMessage</p>
            </div>

            <div class="@(isUpdating ? "updating" : "dnone")">
                <p>@updatingMessage</p>
            </div>


            @if (confirmType == "add")
            {
                <div class="actions">
                    <button disabled="@(isUpdating)" class="btn p-2 px-5 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                    <button disabled="@(isUpdating)" class="btn btn-danger text-white p-2 px-5 fs-5"  style="font-size: 13px; border: 1px solid #dee2e6;">Confirm</button>
                </div>
            }
            else if (confirmType == "update")
            {
                <div class="actions">
                    <button disabled="@(isUpdating)" class="btn p-2 px-5 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                    <button disabled="@(isUpdating)" class="btn btn-danger text-white p-2 px-5 fs-5" style="font-size: 13px; border: 1px solid #dee2e6;">Confirm</button>
                </div>
            }
            else if (confirmType == "remove")
            {
                <div class="actions">
                    <button disabled="@(isUpdating)" class="btn p-2 px-5 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                    <button disabled="@(isUpdating)" class="btn btn-primary text-white p-2 px-5 fs-5"  style="font-size: 13px; border: 1px solid #dee2e6;">Confirm</button>
                </div>
            }
        </div>

    </div>

    <!--Header Section-->
    <div class="header">
        <div>
            <h4 class="m-0 fw-bold">Schedule Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Create schedules and manages church events, activities and services.</p>
        </div>

        <div class="d-flex gap-2 @(role != "Administrator" ? "d-none" : "")">
            <button @onclick="ToggleAddSched" class="btn btn-primary p-2 px-3 text-white link w-100 text-nowrap"><i class="bi bi-plus-circle-fill text-white me-2"></i>Add Department Meeting</button>
            <button @onclick="ToggleAddServiceModal" class="btn btn-primary p-2 px-3 text-white link w-100"><i class="bi bi-plus-circle-fill text-white me-2"></i>Add Service</button>
        </div>
    </div>


    <div class="lcontainer" hidden="@(isListVisible)">
        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l1"></div>
            Event
        </div>

        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l2"></div>
            Meeting
        </div>

        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l3"></div>
            Services
        </div>

        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l4"></div>
            Others
        </div>
    </div>

    <p class="mb-1"><em>@message</em></p>

    <!--Calendar View Section-->
    <div class="calendar-container" hidden="@(isListVisible)">
        <div class="calendar-header">
            <div class="d-flex gap-2 align-items-center">
                <button class="btn today" @onclick="setDateToday">Date Today</button>
                <div class="me-2 d-flex gap-2">
                    <i class="bi bi-chevron-left text-white fs-4 icon cursor" @onclick="PreviousMonthChanged"></i>
                    <i class="bi bi-chevron-right text-white fs-4 icon cursor" @onclick="NextMonthChanged"></i>
                </div>
                <p class="text-white m-0 p-0 fs-3 fw-normal">@GetMonthName()</p>
                <p class="text-white m-0 p-0 fs-3 fw-normal">@SelectedYear</p>
            </div>
            <i class="bi bi-search text-white fs-4 cursor" @onclick="ToggleList"></i>
        </div>

        <div class="calendar-week">
            @foreach (var dayName in DayNames)
            {
                <div class="day-name">@dayName</div>
            }
        </div>

        <div class="calendar-grid">
            @foreach (var week in CalendarWeeks)
            {
                @foreach (var day in week)
                {
                    <div class="day-cell @(day == 0 ? "empty" : "") @(day == dayNow && month == DateTime.Now.Month && year == DateTime.Now.Year ? "day" : "")">
                        @if (day != 0)
                        {
                            <div class="day-number">@day</div>
                            <div class="day-list">
                                @foreach (var item in schedulesList.Where(u =>
                                                    new DateOnly(SelectedYear, SelectedMonth, day) >= u.StartDate &&
                                                    new DateOnly(SelectedYear, SelectedMonth, day) <= u.EndDate))
                                {
                                    var attendance = Attendances.FirstOrDefault(a =>
                                    a.ScheduleId == item.Id &&
                                    a.Date == new DateOnly(SelectedYear, SelectedMonth, day));



                                    <div class="@SwitchClass(item.CategoryId)" @onclick="(() => OpenEdit(item.Id, new DateOnly(SelectedYear, SelectedMonth, day)))">@item.Title</div>
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards" hidden="@(!isListVisible)">

        <!--Search Section-->
        <div class="d-flex justify-content-between align-items-start gap-2">
            <div class="position-relative mb-2 w-100">
                <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                <input @bind="searchSched" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search..." />
            </div>
            <i class="bi bi-calendar-event fs-4 cursor m-0 p-0" @onclick="ToggleList"></i>
            
        </div>
        
        <div class="filterTime">
            <p>Filter by:</p>
            <select class="form-select py-2" @onchange="SelectStatus">
                <option value="Upcoming">Upcoming</option>
                <option value="Ongoing">Ongoing</option>
                <option value="Completed">Completed</option>
            </select>

            <p>Category:</p>
            <select class="form-select py-2" @onchange="FilterByCategory">
                <option value="All">All</option>
                <option value="Event">Event</option>
                <option value="Department">Department</option>
                <option value="Service">Service</option>
                <option value="Others">Others</option>
            </select>

            @* <p>From</p>
            <input type="date" @bind="filteredStartDate" class="form-control py-2 px-2" />

            <p>To</p>
            <input type="date" @bind="filteredEndDate" class="form-control py-2 px-2" /> *@
            
            <p><em>@messages</em></p>
        </div>
        
        

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Name</th>
                        <th class="thead">Start Date</th>
                        <th class="thead">End Date</th>
                        <th class="thead">Action</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in filteredSched)
                    {
                        <tr class="table-row">
                            <td class="table-cell" style="font-weight:500;">@item.Title</td>
                            <td class="table-cell" style="font-weight:500;">@item.StartDate.ToString("MMM dd, yyyy")</td>
                            <td class="table-cell" style="font-weight:500;">@item.EndDate.ToString("MMM dd, yyyy")</td>
                            <td @onclick:stopPropagation @onclick="(() => OpenEdit(item.Id, new DateOnly(item.StartDate.Year, item.StartDate.Month, item.StartDate.Day)))" class="table-cell d-flex gap-2 hover" style="padding: 24px 24px; border-bottom: none; width: auto;">View</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Schedule> schedulesList = new();
    private List<Schedule> schedulesListView = new();
    ElementReference textarea;
    private bool isView = false;
    private string title = "New Schedule";
    private string eventTitle { get; set; } = string.Empty;
    private string eventCategory { get; set; } = "Event";
    private DateOnly sDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly eDate { get; set; } = DateOnly.FromDateTime(DateTime.Now);
    private DateTime sDateTime { get; set; } = DateTime.Today;
    private string subCategory { get; set; } = string.Empty;
    private bool isDepartmentVisible = false;
    private bool isSub { get; set; } = false;
    private bool BackgroundModal = false;
    private Schedule sched = new();
    private string searchSched = string.Empty;
    private string messages = string.Empty;
    private int index = 1;
    private bool isDepartment = false;
    private string selectedStatus = "Upcoming";
    private bool isUpdateView = false;
    private string filterCategory = "All";
    private IEnumerable<Schedule> filteredSched => schedulesListView.Where(u => filterCategory == "All" || u.CategoryId == filterCategory).Where(u => string.IsNullOrWhiteSpace(searchSched) || u.Title.Contains(searchSched, StringComparison.OrdinalIgnoreCase) || u.StartDate.ToString("MMM dd, yyyy").Contains(searchSched, StringComparison.OrdinalIgnoreCase) || u.EndDate.ToString("MMM dd, yyyy").Contains(searchSched, StringComparison.OrdinalIgnoreCase)).ToList();

    public record MonthOption(int Value, string Name);
    private List<MonthOption> Months { get; set; }
    // private int Years = DateOnly.FromDateTime(DateTime.Now).Year;
    private string[] DayNames { get; set; } = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;

    private int SelectedMonth { get; set; }
    private int SelectedYear { get; set; }
    private bool isListVisible = false;

    private List<List<int>> CalendarWeeks = new();
    private int month = DateTime.Now.Month;
    private int year = DateTime.Now.Year;
    private int dayNow = DateTime.Now.Day;

    // Attendance storage
    private List<Attendance> Attendances = new();
    private Attendance att = new();
    private bool isAttendanceVisible = false;
    private int count { get; set; } = 0;
    private decimal tithes { get; set; } = 0;
    private decimal offering { get; set; } = 0;
    private int seekers = 0;
    private DateOnly attDate = new DateOnly(2025,9,6);

    //Time
    private TimeOnly sTime = new TimeOnly(8,0);
    private TimeOnly eTime = new TimeOnly(17, 0);
    private string timeOption = "All Day";
    private bool isCustom = false;

    //Toggle option
    private bool isOptionVisible = false;

    //Toggle edit
    private bool isAddSched = false;

    //Time
    private bool isAllday = false;
    private bool isMorning = false;
    private bool isAfternoon = false;

    //Group
    private List<Group> groupList = new();
    private List<Group> notifList = new();
    private IEnumerable<Group> filteredGroupList => groupList.Where(u => string.IsNullOrWhiteSpace(at) || u.Name == at);
    private string at = string.Empty;
    private Group group = new();
    private string groupMemberMessage { get; set; } = string.Empty;
    private string groupMemberId { get; set; } = string.Empty;

    //GroupMember
    private string memberSearch { get; set; } = string.Empty;
    private List<GroupMemberSelection> groupMemberList { get; set; } = new();
    private IEnumerable<GroupMemberSelection> filteredMember => groupMemberList.Where(u => string.IsNullOrWhiteSpace(memberSearch) || u.Member.GetFullName().Contains(memberSearch, StringComparison.OrdinalIgnoreCase));

    //Notifications
    private List<string> emailList = new();
    private string emailToAdd { get; set; } = string.Empty;
    private bool isNotify = true;

    //Email
    private string body { get; set; } = string.Empty;
    private string status = "";
    private string schedTitle { get; set; } = string.Empty;
    private string schedCategory { get; set; } = string.Empty;
    private string schedLocation { get; set; } = string.Empty;
    private int _selectedRadio = 0; // default is "Custom"



    //Visitors
    private bool isVisitor = false;
    private bool isInviteVisible { get; set; } = false;
    private Visitor visitor { get; set; } = new();
    private List<Visitor> localvisitList = new();
    private List<VisitorSelection> visitorsList = new();
    private string visitorMessage = string.Empty;
    private string visitorsSearch { get; set; } = string.Empty;
    private IEnumerable<VisitorSelection> filteredVisitor => visitorsList.Where(u => string.IsNullOrWhiteSpace(visitorsSearch) || u.Visitor.GetFullName().Contains(visitorsSearch, StringComparison.OrdinalIgnoreCase));

    // Data
    private List<MainCat> Categories = new();
    private List<SubCat> SubCategories = new();

    private string? selectedDepartment;
    private string? selectedSub;
    private bool isAttendee = true;
    private string Attendee = "All";
    private string Department = "Senior";
    private bool hasAttendee = true;
    private string? groupId = "KijcjdUahaRhQtGCk9ds";
    private string message = string.Empty;
    private string attendee { get; set; } = "All";

    //ListView
    private DateOnly filteredStartDate = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly filteredEndDate;

    //Modals
    private bool isLoadingModal = false;
    private bool isAddServiceModal = false;
    private bool isRemoveModal = false;
    private bool isRemoving = false;
    private bool isUpdateServiceModal = false;
    private bool isConfirmModal = false;

    //Data
    private bool isUpdating = false;
    private string confirmType = string.Empty;
    private string confirmTitle = string.Empty;
    private string confirmMessage = string.Empty;
    private string updatingMessage = string.Empty;


    //Service
    private Schedule serviceSchedule = new();
    private Schedule updateServiceSchedule = new();

    //validation
    private List<string> serviceValidation = new();
    private List<string> updateServiceValidation = new();
    private bool isAddingService = false;
    private bool isUpdatingService = false;
    private string role = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        role = _auth.Role;
        filteredEndDate = filteredStartDate.AddMonths(2);
        Init();
        GetList();
        var cat = Categories.FirstOrDefault(u => u.Id == "Senior");
        if(cat != null)
        {
            SubCategories = cat.SubCategories;
        }
        await getScheduleList();
        at = "1234";
        
    }

    //Add Service to database
    private async Task addService()
    {
        isAddingService = true;
        serviceValidation = new();
        serviceSchedule.StartTime = sTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);
        serviceSchedule.EndTime = eTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);
        if (serviceSchedule.EndDate < serviceSchedule.StartDate) serviceValidation.Add("-End Date must not less than the Start Date");
        if (string.IsNullOrWhiteSpace(serviceSchedule.Title)) serviceValidation.Add("-Title cannot be empty");
        if (string.IsNullOrWhiteSpace(serviceSchedule.Location)) serviceValidation.Add("-Venue cannot be empty");
        if (serviceValidation.Any())
        {
            isAddingService = false; return;
        }



        var result = await _schedule.AddScheduleAsync(serviceSchedule);
        if(result.Success)
        {
            int Days = serviceSchedule.EndDate.DayNumber - serviceSchedule.StartDate.DayNumber + 1;
            for (int i = 0; i < Days; i++)
            {
                DateOnly date = serviceSchedule.StartDate.AddDays(i);
                var financeToAdd = new FinanceSchedule
                {
                    DepartmentId = serviceSchedule.DepartmentId,
                    isCompleted = false,
                    ScheduleId = result.Id,
                    Date = date
                };

                var addFinance = await _financeEventsService.AddFinanceEventsAsync(financeToAdd);
            }

            if (serviceSchedule.HasAttendee)
            {
                int count = 0;
                if (serviceSchedule.GroupId == "All")
                {
                    var getMemRes = await _memberService.GetMembersAsync();
                    count = getMemRes.Data.Count;

                    int days = serviceSchedule.EndDate.DayNumber - serviceSchedule.StartDate.DayNumber + 1;

                    for (int i = 0; i < days; i++)
                    {
                        DateOnly date = serviceSchedule.StartDate.AddDays(i);
                        var attendance = new Attendance { ScheduleId = result.Id, Department = serviceSchedule.DepartmentId , TotalAttendee = count, Date = date };
                        var attRes = await _attendance.AddAttendanceAsync(attendance);

                        foreach (var item in getMemRes.Data)
                        {
                            var toAdd = new AttendanceMemberRecord { AttendanceId = attRes.Id, IsPresent = false, MemberId = item.Id };
                            var addGroupMem = await _attenanceMemberRecordService.AddAttendanceMemberRecordAsync(toAdd);
                        }
                    }
                }
                else
                {
                    var groupRes = await _groupMemberService.GetGroupMembersByGroupIdAsync(serviceSchedule.GroupId);
                    count = groupRes.Data.Count();

                    int days = serviceSchedule.EndDate.DayNumber - serviceSchedule.StartDate.DayNumber + 1;

                    var groupMemRes = await _groupMemberService.GetGroupMembersByGroupIdAsync(serviceSchedule.GroupId);
                    var groupMem = groupMemRes.Data;
                    if (groupMem != null)
                    {
                        for (int i = 0; i < days; i++)
                        {
                            DateOnly date = serviceSchedule.StartDate.AddDays(i);
                            var attendance = new Attendance { ScheduleId = result.Id, Department = serviceSchedule.DepartmentId, TotalAttendee = count, Date = date };
                            var attRes = await _attendance.AddAttendanceAsync(attendance);

                            foreach (var item in groupMem)
                            {
                                var toAdd = new AttendanceMemberRecord { AttendanceId = attRes.Id, IsPresent = false, MemberId = item.MemberId };
                                var addGroupMem = await _attenanceMemberRecordService.AddAttendanceMemberRecordAsync(toAdd);
                            }
                        }


                    }
                }
            }

            _ = SendEmail();
            await getScheduleList();
            await _js.InvokeVoidAsync("alert", "Service Added Successfully");
            serviceSchedule = new();
            ToggleModal();
        }
        else
        {
            await _js.InvokeVoidAsync("alert", result.Error);
        }
        isAddingService = false;
    }

    //Update Service to database
    private async Task updateService()
    {
        isUpdatingService = true;

        var checkResult = await _schedule.GetScheduleByIdAsync(updateServiceSchedule.Id);
        if (checkResult.Success)
        {
            

            if (checkResult.Schedule.hasAttendance == true || checkResult.Schedule.hasFinance == true)
            {
                await _js.InvokeVoidAsync("alert", "Cannot proceed, Schedule has link to attendance or finance");
                ToggleModal();
                await getScheduleList();
            }
            else
            {
                updateServiceValidation = new();
                updateServiceSchedule.StartTime = sTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);
                updateServiceSchedule.EndTime = eTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);
                if (updateServiceSchedule.EndDate < updateServiceSchedule.StartDate) updateServiceValidation.Add("-End Date must not less than the Start Date");
                if (string.IsNullOrWhiteSpace(updateServiceSchedule.Title)) updateServiceValidation.Add("-Title cannot be empty");
                if (string.IsNullOrWhiteSpace(updateServiceSchedule.Location)) updateServiceValidation.Add("-Venue cannot be empty");
                if (updateServiceValidation.Any())
                {
                    isUpdatingService = false; return;
                }

                var result = await _schedule.UpdateScheduleAsync(updateServiceSchedule.Id, updateServiceSchedule);
                if (result.Success)
                {
                    var removeFinanceresult = await _financeEventsService.RemoveFinanceRecordsByScheduleIdAsync(updateServiceSchedule.Id);

                    int Days = updateServiceSchedule.EndDate.DayNumber - updateServiceSchedule.StartDate.DayNumber + 1;
                    for (int i = 0; i < Days; i++)
                    {
                        DateOnly date = updateServiceSchedule.StartDate.AddDays(i);
                        var financeToAdd = new FinanceSchedule
                        {
                            DepartmentId = updateServiceSchedule.DepartmentId,
                            isCompleted = false,
                            ScheduleId = updateServiceSchedule.Id,
                            Date = date
                        };

                        var addFinance = await _financeEventsService.AddFinanceEventsAsync(financeToAdd);
                    }

                    if (updateServiceSchedule.HasAttendee)
                    {
                        var checkAttend = await _attendance.GetAttendanceByScheduleId(updateServiceSchedule.Id);
                        if (checkAttend.Data != null)
                        {
                            foreach (var item in checkAttend.Data)
                            {
                                var removeAttendanceMember = await _attenanceMemberRecordService.RemoveAttendanceRecordAsync(item.Id);
                                var removeAttendance = await _attendance.DeleteAttendanceAsync(item.Id);
                            }
                        }

                        int count = 0;
                        if (updateServiceSchedule.GroupId == "All")
                        {
                            var getMemRes = await _memberService.GetMembersAsync();
                            count = getMemRes.Data.Count;

                            int days = updateServiceSchedule.EndDate.DayNumber - updateServiceSchedule.StartDate.DayNumber + 1;

                            for (int i = 0; i < days; i++)
                            {
                                DateOnly date = updateServiceSchedule.StartDate.AddDays(i);
                                var attendance = new Attendance { ScheduleId = updateServiceSchedule.Id, Department = updateServiceSchedule.DepartmentId, TotalAttendee = count, Date = date };
                                var attRes = await _attendance.AddAttendanceAsync(attendance);

                                foreach (var item in getMemRes.Data)
                                {
                                    var toAdd = new AttendanceMemberRecord { AttendanceId = attRes.Id, IsPresent = false, MemberId = item.Id };
                                    var addGroupMem = await _attenanceMemberRecordService.AddAttendanceMemberRecordAsync(toAdd);
                                }
                            }
                        }
                        else
                        {
                            var groupRes = await _groupMemberService.GetGroupMembersByGroupIdAsync(updateServiceSchedule.GroupId);
                            count = groupRes.Data.Count();

                            int days = updateServiceSchedule.EndDate.DayNumber - updateServiceSchedule.StartDate.DayNumber + 1;

                            var groupMemRes = await _groupMemberService.GetGroupMembersByGroupIdAsync(updateServiceSchedule.GroupId);
                            var groupMem = groupMemRes.Data;
                            if (groupMem != null)
                            {
                                for (int i = 0; i < days; i++)
                                {
                                    DateOnly date = updateServiceSchedule.StartDate.AddDays(i);
                                    var attendance = new Attendance { ScheduleId = updateServiceSchedule.Id, Department = updateServiceSchedule.DepartmentId, TotalAttendee = count, Date = date };
                                    var attRes = await _attendance.AddAttendanceAsync(attendance);

                                    foreach (var item in groupMem)
                                    {
                                        var toAdd = new AttendanceMemberRecord { AttendanceId = attRes.Id, IsPresent = false, MemberId = item.MemberId };
                                        var addGroupMem = await _attenanceMemberRecordService.AddAttendanceMemberRecordAsync(toAdd);
                                    }
                                }


                            }
                        }
                    }
                    else
                    {
                        var checkAtt = await _attendance.GetAttendanceByScheduleId(updateServiceSchedule.Id);
                        if (checkAtt.Data != null)
                        {
                            foreach(var item in checkAtt.Data)
                            {
                                var removeAttendanceMember = await _attenanceMemberRecordService.RemoveAttendanceRecordAsync(item.Id);
                                var removeAttendance = await _attendance.DeleteAttendanceAsync(item.Id);

                            }

                        }
                    }

                    _ = SendEmail();
                    await getScheduleList();
                    await _js.InvokeVoidAsync("alert", "Schedule successfully updated");
                    updateServiceSchedule = new();
                    ToggleModal();
                }
                else
                {
                    await _js.InvokeVoidAsync("alert", result.Error);
                }
                isUpdatingService = false;
            }

        }
        else
        {
            ToggleModal();
            await _js.InvokeVoidAsync("alert", checkResult.Error);
            await getScheduleList();

        }


    }

    //Toggle Add Service Modal
    private async Task ToggleAddServiceModal()
    {
        ToggleModal();
        isLoadingModal = true;
        await GetGroupName();
        isAddServiceModal = true;
        serviceSchedule = new();
        serviceSchedule.CategoryId = "Service";
        serviceSchedule.DepartmentId = "Senior";
        isLoadingModal = false;

    }

    private void OnHostChange(ChangeEventArgs e)
    {
        Department = e.Value!.ToString()!;
        selectedDepartment = Department;
        selectedSub = string.Empty;
    }


    private void FilterByCategory(ChangeEventArgs e)
    {
        filterCategory = e.Value!.ToString()!;
    }

    //Show Add Schedule Modal
    private async Task ToggleAddSched()
    {
        await GetGroupName();
        ToggleModal();
        isAddSched = true;
        serviceSchedule = new();
        serviceSchedule.CategoryId = "Department";
        serviceSchedule.Title = "Holiness Meeting";
        isLoadingModal = false;
    }

    //Onchange sa attendance all

    private void OnChangeAttendee(ChangeEventArgs e)
    {
        Attendee = e.Value!.ToString()!;
        hasAttendee = true;

        if (Attendee == "All")
        {
            at = "1234";
            groupId = string.Empty;
        }
        else
        {
            groupId = groupList.First().Id;
            at = string.Empty;
        }

        string value = e.Value!.ToString()!;

        if (value == "All")
        {
            at = "1234";
            serviceSchedule.GroupId = "All";
            updateServiceSchedule.GroupId = "All";
        }
        else
        {
            at = string.Empty;
            serviceSchedule.GroupId = groupList.First().Id;
            updateServiceSchedule.GroupId = groupList.First().Id;
        }
    }

    private void OnChangeGroup(ChangeEventArgs e)
    {
        groupId = e.Value!.ToString()!;
        serviceSchedule.GroupId = e.Value!.ToString()!;
        updateServiceSchedule.GroupId = e.Value!.ToString()!;
    }

    private void GetList()
    {
        Categories = new()
        {
            new MainCat
            {
                Id = "Senior", Name = "Senior", SubCategories = new()
                {
                    new SubCat { Id = "HolinessMeeting", Name = "Holiness Meeting" },
                    new SubCat { Id = "PrayerMeeting", Name = "Prayer Meeting" },
                    new SubCat { Id = "BibleStudy", Name = "Bible Study" },
                }
            },

            new MainCat
            {
                Id = "Womens", Name = "Womens", SubCategories = new()
                {
                    new SubCat { Id = "Homeleague", Name = "Homeleague" },
                    new SubCat { Id = "Teenstuff", Name = "Teenstuff" },
                }
            },

            new MainCat
            {
                Id = "Mens", Name = "Mens", SubCategories = new()
            },

            new MainCat
            {
                Id = "Youth", Name = "Youth", SubCategories = new()
                {
                    new SubCat { Id = "Torchbearer", Name = "Torchbearer" },
                    new SubCat { Id = "CorpCadet", Name = "Corp Cadet" },
                    // new SubCat { Id = "SundaySchool", Name = "Sunday School" },
                    // new SubCat { Id = "JuniorSoldier", Name = "Junior Soldier" },
                    // new SubCat { Id = "JuniorSoldierPrep", Name = "Junior Soldier Prep" },
                    new SubCat { Id = "YoungPeopleBibleStudy", Name = "Young People Bible Study" },
                    new SubCat { Id = "PraiseAndWorship", Name = "Praise And Worship" },
                }
            },
        };
    }

    private void OnDivisionChange(ChangeEventArgs e)
    {
        serviceSchedule.Title = e.Value!.ToString()!;
        selectedSub = e.Value!.ToString()!;
    }

    private void OnDepartmentChange(ChangeEventArgs e)
    {
        serviceSchedule.DepartmentId = e.Value?.ToString()!;
        if (serviceSchedule.DepartmentId == "Mens")
        {
            serviceSchedule.Title = "Mens Fellowship";
            selectedSub = string.Empty;
            isDepartment = true;
            SubCategories = new();
            return;
        }



        var subs = Categories.FirstOrDefault(u => u.Id == serviceSchedule.DepartmentId);
        if (subs != null)
        {

            var subCat = subs.SubCategories;

            if (subCat != null)
            {
                serviceSchedule.Title = subCat.First().Name;
                selectedSub = subCat.First().Name;
                SubCategories = subCat;
                // await _js.InvokeVoidAsync("alert", selectedDepartment);
            }


        }


    }

   
    //set the date to default today
    private void setDateToday()
    {
        month = DateTime.Now.Month;
        year = DateTime.Now.Year;
        dayNow = DateTime.Now.Day;

        SelectedMonth = month;
        SelectedYear = year;
        GenerateCalendar();
    }

    //Close update modal and show view modal
    private void ReturnView()
    {
        isUpdateView = false;
        isView = true;
    }

    //Radio button changed
    private void OnChangeRadio(int index)
    {
        switch (index)
        {
            //Custom
            case 0:
                isCustom = false;
                sched.TimeOption = "Custom";
                serviceSchedule.TimeOption = "Custom";
                updateServiceSchedule.TimeOption = "Custom";
                break;

            //All day
            case 1:
                isCustom = true;
                sched.TimeOption = "All Day";
                updateServiceSchedule.TimeOption = "All Day";
                serviceSchedule.TimeOption = "All Day";
                sTime = new TimeOnly(8,0);
                eTime = new TimeOnly(17, 0);
                break;

            //Morning
            case 2:
                isCustom = true;
                sched.TimeOption = "Morning";
                updateServiceSchedule.TimeOption = "Morning";
                serviceSchedule.TimeOption = "Morning";
                sTime = new TimeOnly(8, 0);
                eTime = new TimeOnly(12, 0);
                break;

            //Afternoon
            case 3:
                isCustom = true;
                sched.TimeOption = "Afternoon";
                updateServiceSchedule.TimeOption = "Afternoon";
                serviceSchedule.TimeOption = "Afternoon";
                sTime = new TimeOnly(13, 0);
                eTime = new TimeOnly(17, 0);
                break;
        }
    }

    private async Task GetGroupMembers(string Id)
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var result = await _groupMemberService.GetGroupMembersByGroupIdAsync(Id);
            if (result.Success)
            {
                var Ids = result.Data.Select(u => u.MemberId).ToHashSet();

                if (Ids != null)
                {
                    var results = await _memberService.GetMembersAsync();
                    if (results.Success)
                    {
                        var members = results.Data.Where(u => Ids.Contains(u.Id)).ToList();

                        groupMemberList = members.Select(u => new GroupMemberSelection
                        {
                            isSelected = true,
                            Member = u
                        }).ToList();
                    }
                    else
                    {
                        await _js.InvokeVoidAsync("alert", "Failed to get members: " + results.Error);
                    }
                }
                else
                {
                    groupMemberList.Clear();
                }


            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Failed to get group: " + result.Error);
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Group id is null or empty");
        }

    }

    //Get Upcoming list of schedules
    private async Task GetUpcomingSchedules()
    {
        messages = "Fetching files...Please wait";

        var result = await _schedule.GetUpcomingSchedules();

        if (result.Success)
        {
            schedulesListView = result.Data;
            messages = $"{schedulesListView.Count} {selectedStatus} records found.";
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to fetch schedules: " + result.Error);
            messages = "No schedules found.";
        }
    }

    //Get Upcoming list of schedules
    private async Task GetOngoingSchedules()
    {
        messages = "Fetching files...Please wait";

        var result = await _schedule.GetOngoingSchedules();

        if (result.Success)
        {
            schedulesListView = result.Data;
            messages = $"{schedulesListView.Count} {selectedStatus} records found.";
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to fetch schedules: " + result.Error);
            messages = "No schedules found.";
        }
    }

    //Get Upcoming list of schedules
    private async Task GetCompletedSchedules()
    {
        messages = "Fetching files...Please wait";

        var result = await _schedule.GetCompletedSchedules();

        if (result.Success)
        {
            schedulesListView = result.Data;
            messages = $"{schedulesListView.Count} {selectedStatus} records found.";
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to fetch schedules: " + result.Error);
            messages = "No schedules found.";
        }
    }

    //Fetch files according to status
    private async Task SelectStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value!.ToString()!;

        messages = "Fetching files...Please wait";

        if (selectedStatus != null)
        {
            switch (selectedStatus)
            {
                case "Upcoming":
                    await GetUpcomingSchedules();
                    break;
                case "Ongoing":
                    await GetOngoingSchedules();
                    break;
                case "Completed":
                    await GetCompletedSchedules();
                    break;
            }

        }

    }

    //Handle Time checkboxes
    private void OnCheckChange(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;

        foreach (var item in groupMemberList)
        {
            item.isSelected = isChecked;
        }

    }

    private void OnCheckChanges(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;

        foreach (var item in visitorsList)
        {
            item.isSelected = isChecked;
        }
    }

    private string SwitchClass(string name)
    {
        return name switch
        {
            "Event" => "pill",
            "Department" => "pill2",
            "Service" => "pill3",
            "Others" => "pill4",
            _ => "pill"
        };
    }

    private void setType(int type)
    {
        index = type;
        switch (type)
        {
            case 1:
                isSub = false;
                selectedSub = string.Empty;
                eventCategory = "Event";
                subCategory = string.Empty;
                isDepartmentVisible = false;
                isDepartment = false;
                eventTitle = string.Empty;
                break;
            case 2:
                eventCategory = "Department";
                isDepartmentVisible = true;
                selectedDepartment = "Senior";
                eventTitle = "Holiness Meeting";
                isDepartment = true;
                GetList();
                selectedSub = "HolinessMeeting";
                var category = Categories.FirstOrDefault(u => u.Id == "Senior");

                if (category != null)
                {
                    SubCategories = category.SubCategories;
                }
                break;
            case 3:
                isSub = false;
                eventCategory = "Service";
                selectedSub = string.Empty;
                subCategory = string.Empty;
                isDepartmentVisible = false;
                isDepartment = false;
                eventTitle = string.Empty;
                break;
            case 4:
                isSub = false;
                eventCategory = "Others";
                selectedSub = string.Empty;
                subCategory = string.Empty;
                isDepartmentVisible = false;
                isDepartment = false;
                eventTitle = string.Empty;
                break;

        }


    }

    private string GetClass(int indexs)
    {
        return $"{(index == indexs ? "active" : "")}";
    }

    private void OnChangeDate()
    {
        eDate = sDate;
        serviceSchedule.EndDate = serviceSchedule.StartDate;
        updateServiceSchedule.EndDate = updateServiceSchedule.StartDate;
    }

    private void ToggleModal()
    {
        BackgroundModal = !BackgroundModal;
        isAddSched = false;
        isLoadingModal = false;
        isAddServiceModal = false;
        isAddingService = false;
        serviceValidation.Clear();
        isOptionVisible = false;
        isView = false;
        isRemoveModal = false;
        isRemoving = false;
        isUpdateView = false;
        isUpdateServiceModal = false;
        isUpdatingService = false;
    }

    private void ToggleView()
    {
        BackgroundModal = !BackgroundModal;
        isView = true;
        sched = new();
    }

    //Toggle OPtion edit or remove
    private void ToggleOption()
    {
        isOptionVisible = !isOptionVisible;
    }

    //close option modal
    private void closeOption()
    {
        isOptionVisible = false;
    }

    //Toggle Update UI
    private async Task ToggleUpdateUI(string Id)
    {
        isLoadingModal = true;
        isView = false;
        var result = await _schedule.GetScheduleByIdAsync(Id);
        if (result.Success)
        {
            updateServiceSchedule = new();
            updateServiceSchedule = result.Schedule;
            await GetGroupName();
            isLoadingModal = false;

            if (result.Schedule.CategoryId != "Department")
            {
                if (!result.Schedule.HasAttendee)
                {
                    attendee = "All";
                }
                updateServiceValidation.Clear();
                isUpdateServiceModal = true;
            }
            else
            {
                updateServiceValidation.Clear();
                isUpdateServiceModal = true;
            }

        }
        else
        {
            ToggleModal();
            await _js.InvokeVoidAsync("alert", result.Error);
            await getScheduleList();

        }
    }

    private void Init()
    {
        Months = Enumerable.Range(1, 12)
            .Select(m => new MonthOption(m, CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)))
            .ToList();

        int currentYear = DateTime.Now.Year;
        // Years = Enumerable.Range(currentYear - 5, 11).ToList();

        SelectedMonth = DateTime.Now.Month;
        SelectedYear = currentYear;

        GenerateCalendar();
    }

    private async Task ToggleList()
    {
        isListVisible = !isListVisible;
        await GetUpcomingSchedules();
    }


    private async Task getScheduleList()
    {
        message = "Fetching data. Please wait...";
        try
        {
            schedulesList = new();
            var result = await _schedule.GetScheduleAsync();

            if (result.Success)
            {
                message = string.Empty;
                schedulesList = result.Data;
            }
            else
            {
                message = "Failed to get data";
                await _js.InvokeVoidAsync("alert", result.Error);
            }
        }
        catch (Exception ex)
        {
            message = "Failed to get data";
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //View Schedule
    private async Task OpenEdit(string Id, DateOnly date)
    {
        ToggleModal();
        isLoadingModal = true;
        sched = new();
        var result = await _schedule.GetScheduleByIdAsync(Id);

        if (result.Success)
        {
            sched = result.Schedule;
            isLoadingModal = false;
            isView = true;

        }
        else
        {
            await _js.InvokeVoidAsync("alert", result.Error);
            ToggleModal();
            await getScheduleList();
        }
    }

    //Remove schedule to database
    private async Task RemoveSchedule()
    {
        isRemoving = true;
        var result = await _schedule.GetScheduleByIdAsync(sched.Id);
        if (result.Success)
        {
            if (result.Schedule.hasAttendance == true || result.Schedule.hasFinance == true)
            {
                ToggleModal();
                await _js.InvokeVoidAsync("alert", "Cannot proceed. Schedule has been link to attendance or finance");
                await getScheduleList();
            }
            else
            {


                var removeSched = await _schedule.RemoveScheduleAsync(sched.Id);
                if (removeSched.Success)
                {
                    var checkAtt = await _attendance.GetAttendanceByScheduleId(sched.Id);
                    if (checkAtt.Data != null)
                    {
                        foreach (var item in checkAtt.Data)
                        {
                            var removeAttendanceMember = await _attenanceMemberRecordService.RemoveAttendanceRecordAsync(item.Id);
                            var removeAttendance = await _attendance.DeleteAttendanceAsync(item.Id);

                        }

                    }
                    ToggleModal();
                    await getScheduleList();
                }
                else
                {
                    ToggleModal();
                    await _js.InvokeVoidAsync("alert", result.Error);
                    await getScheduleList();
                }
            }
        }
        else
        {
            ToggleModal();
            await _js.InvokeVoidAsync("alert", result.Error);
            await getScheduleList();
        }
        isRemoving = false;
    }

    private async Task removeSchedule(string Id)
    {
        
        var result = await _schedule.GetScheduleByIdAsync(Id);
        if (result.Success)
        {
            isView = false;
            isRemoveModal = true;
            isOptionVisible = false;
        }
        else
        {
            ToggleModal();
            await _js.InvokeVoidAsync("alert", result.Error);
            await getScheduleList();

        }

        // try
        // {
        //     var result = await _schedule.RemoveScheduleAsync(Id);
        //     if (result.Success)
        //     {
        //         var attend = await _attendance.GetAttendanceAsync();

        //         if (attend.Success)
        //         {
        //             Attendances = attend.Data;

        //             var attendanceToRemove = Attendances.Where(u => u.ScheduleId == Id).ToList();

        //             foreach (var item in attendanceToRemove)
        //             {
        //                 var res = await _attendance.DeleteAttendanceAsync(item.Id);
        //                 if (!res.Success)
        //                 {
        //                     await _js.InvokeVoidAsync("alert", "Failed to remove attendance of the removed schedule : " + res.Error);
        //                 }
        //             }
        //         }
        //         else
        //         {
        //             await _js.InvokeVoidAsync("alert", "Failed to remove attendance of the removed schedule : " + attend.Error);
        //         }

        //         ToggleModal();
        //         await getScheduleList();
        //         await _js.InvokeVoidAsync("alert", "Successfully deleted");
        //     }
        //     else
        //     {
        //         await _js.InvokeVoidAsync("alert", $"Error on deleting document: {result.Error}");
        //     }

        // }
        // catch (Exception ex)
        // {
        //     await _js.InvokeVoidAsync("alert", $"Error on deleting document: {ex.Message}");
        // }
    }

    private void GenerateCalendar()
    {
        CalendarWeeks.Clear();

        var firstDayOfMonth = new DateTime(SelectedYear, SelectedMonth, 1);
        var daysInMonth = DateTime.DaysInMonth(SelectedYear, SelectedMonth);

        int currentDay = 1;
        int startDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        var week = new List<int>();

        // Fill empty days before first day
        for (int i = 0; i < startDayOfWeek; i++)
        {
            week.Add(0);
        }

        // Fill actual days
        while (currentDay <= daysInMonth)
        {
            week.Add(currentDay);
            currentDay++;

            if (week.Count == 7)
            {
                CalendarWeeks.Add(week);
                week = new List<int>();
            }
        }

        // Fill remaining empty days
        if (week.Count > 0)
        {
            while (week.Count < 7)
            {
                week.Add(0);
            }
            CalendarWeeks.Add(week);
        }
    }

    private void PreviousMonthChanged()
    {
        month--;
        if (month < 1)
        {
            month = 12;
            year--;
        }
        SelectedMonth = month;
        SelectedYear = year;
        GenerateCalendar();
    }

    private void NextMonthChanged()
    {
        month++;
        if (month > 12)
        {
            month = 1;
            year++;
        }
        SelectedMonth = month;
        SelectedYear = year;
        GenerateCalendar();
    }

    private string GetMonthName()
    {
        return new DateTime(year,month,1).ToString("MMMM");
    }

    private void OnMonthChanged(int value)
    {
        SelectedMonth = value;
        GenerateCalendar();
    }

    private void OnYearChanged(int value)
    {
        SelectedYear = value;
        GenerateCalendar();
    }

    private bool HasEvent(DateOnly date) =>
        schedulesList.Any(e => date >= e.StartDate &&
                        date <= e.EndDate);


    private async Task ResizeDet()
    {
        try
        {
            await _schedule.ResizeDetails(textarea);
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //Get All Group
    private async Task GetGroupName()
    {
        var result = await _group.GetGroupsAsync();
        if (result.Success)
        {
            groupList = result.Data;
            notifList = result.Data;
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get group: " + result.Error);
        }
    }


    //Get Group and its members
    private async Task GetGroupAndMembers(ChangeEventArgs e)
    {
        string Id = e.Value!.ToString()!;
        if (string.IsNullOrEmpty(Id)) return;
        await GetGroupMembers(Id);
    }

    //Add to list of emails
    private void AddToEmailList()
    {
        emailToAdd.Trim();
        if (!string.IsNullOrEmpty(emailToAdd))
        {
            emailList.Add(emailToAdd);
            var list = emailList.Distinct().ToList();
            emailList = list;
            emailToAdd = string.Empty;
        }
    }

    //Remove to list of emails
    private void RemoveToEmailList(string email)
    {
        emailList.Remove(email);
        var list = emailList.Distinct().ToList();
        emailList = list;
    }

    //Toggle notification
    private void ToggleNotify(ChangeEventArgs e)
    {
        isNotify = (bool)e.Value!;
    }


    //Toggle notification
    private void ToggleAttendee(ChangeEventArgs e)
    {
        updateServiceSchedule.HasAttendee = (bool)e.Value!;
        serviceSchedule.HasAttendee = (bool)e.Value!;
        if (serviceSchedule.HasAttendee)
        {
            hasAttendee = true;
            serviceSchedule.HasAttendee = true;
            serviceSchedule.GroupId = "All";
            updateServiceSchedule.HasAttendee = true;
            updateServiceSchedule.GroupId = "All";
        }
        else
        {
            hasAttendee = false;
            serviceSchedule.HasAttendee = false;
            updateServiceSchedule.HasAttendee = false;
            groupId = null;
            serviceSchedule.GroupId = string.Empty;
            updateServiceSchedule.GroupId = string.Empty;
        }
    }


    //Send Email Function
    private async Task SendEmail()
    {
        if (!isNotify)
        {
            if (!string.IsNullOrEmpty(groupMemberId))
            {
                await GetGroupMembers(groupMemberId);
            }

            var gm = groupMemberList.Where(u => u.isSelected && !string.IsNullOrEmpty(u.Member.Email)).Select(u => u.Member.Email).ToList();

            if (gm != null)
            {
                foreach (var a in gm)
                {
                    if (!string.IsNullOrEmpty(a))
                    {
                        emailList.Add(a);
                    }
                }
            }

            var distinct = emailList.Distinct().ToList();
            emailList = distinct;

            string subject = $"Schedule Reminder for {schedCategory}: {schedTitle}";
            string body = $@"
Hello There,<br><br>
This is a friendly reminder from <b>Gospel Reach Team</b>.<br><br>
📌 <b>Scheduled Activity:</b> {schedTitle}<br>
🕒 <b>Time:</b> {sTime} – {eTime}<br>
📅 <b>Date:</b> {sDate} - {eDate}<br>
📍 <b>Location:</b> {schedLocation}<br><br>
Please make sure to be on time and prepared.<br>
If you have any questions, feel free to contact us.<br><br>
Thank you,<br>
Gospel Reach Team
";

            var result = await _notificationService.SendEmailsAsync(emailList, subject, body);

            if (result.Success)
            {
                await _js.InvokeVoidAsync("alert", "Email sent");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Failed to send email: " + result.Error);
            }

            emailList.Clear();
        }
    }

    private class GroupMemberSelection
    {
        public bool isSelected { get; set; }
        public Member Member { get; set; }
    }

    private class VisitorSelection
    {
        public bool isSelected { get; set; }
        public Visitor Visitor { get; set; }
    }

    private class MainCat
    {
        public string Id { get; set; }
        public string Name { get; set; }    

        public List<SubCat> SubCategories { get; set; } = new();
    }

    private class SubCat
    {
        public string Id { get; set; }
        public string Name { get; set; }

    }
}