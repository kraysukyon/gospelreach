@page "/schedules"
@layout LandingLayout
@inject GospelReachCapstone.Services.ScheduleService _schedule
@inject GospelReachCapstone.Services.FirestoreService _firestore
@using GospelReachCapstone.Models
@inject IJSRuntime _js
@using System.Globalization

<PageTitle>Schedule Management</PageTitle>


<div class="pages">
    <!--Add Schedule Modal-->
    <div @onclick="ToggleModal" class="addEventModal @(isAddModalVisible ? "show" : "")">

        <!--Title-->
        <div class="addEvents" @onclick:stopPropagation @onclick="closeOption">
            <div class="d-flex justify-content-between mb-3">
                <div>
                    <h4 class="fw-bold">
                        @title
                    </h4>
                </div>

                <div class="options" hidden="@(title == "Update Details" || title == "New Schedule")">
                    <i class="bi bi-three-dots-vertical optionIcon cursor" @onclick="ToggleOption" @onclick:stopPropagation></i>
                    <div class="options-child" hidden="@(!isOptionVisible)">
                        <div class="cursor fsx" @onclick="ToggleUpdateUI">Update</div>
                        <div class="cursor fsx" @onclick="(() => removeSchedule(sched.Id))">Remove</div>
                    </div>
                </div>

                <i hidden="@(title == "Details" || title == "New Schedule")" class="bi bi-arrow-return-left fs cursor hover" @onclick="ReturnView"></i>
                
            </div>

            <!--Add Schedule-->
            <div hidden="@(!isEditMode)">
                <!--Title-->
                <div class="input mt-4">
                    <div class="title">
                        <i class="bi bi-pencil-square"></i>
                        <p>Title</p>
                    </div>
                    
                    <input @bind="eventTitle" type="text" class="form-control p-2" placeholder="Add Title" />
                </div>

                <!--Type-->
                <div class="input mt-3">
                    <div class="title">
                        <i class="bi bi-ui-radios-grid"></i>
                        <p>Type</p>
                    </div>

                    <div class="cat">
                        <button @onclick="(() => setType(1))" class="btn type @GetClass(1)"><i class="bi bi-star"></i> Event</button>
                        <button @onclick="(() => setType(2))" class="btn type @GetClass(2)"><i class="bi bi-book"></i> Meeting</button>
                        <button @onclick="(() => setType(3))" class="btn type @GetClass(3)"><i class="bi bi-houses"></i> Service</button>
                        <button @onclick="(() => setType(4))" class="btn type @GetClass(4)"><i class="bi bi-houses"></i> Others</button>
                    </div>
                </div>

                <!--Date-->
                <div class="input mt-3">
                    <div class="title">
                        <i class="bi bi-calendar-check"></i>
                        <p>Date</p>
                    </div>

                    
                    <div class="date">
                        <input @bind="sDate" @bind:event="onchange" @bind:after="OnChangeDate" type="date" class="form-control p-2" />
                        <i class="bi bi-arrow-right"></i>
                        <input @bind="eDate" type="date" class="form-control p-2" />
                    </div>
                </div>

                <!--Time-->
                <div class="inputTime mt-3">
                    <div class="title mt-2">
                        <i class="bi bi-clock"></i>
                        <p>Time</p>
                    </div>

                    <div class="dates">
                        <div class="date">
                            <input readonly="@(isCustom)" @bind="sTime" type="time" class="form-control p-2" />
                            <i class="bi bi-arrow-right"></i>
                            <input readonly="@(isCustom)" @bind="eTime" type="time" class="form-control p-2" />
                        </div>

                        <!--Radio button for time option-->
                        <div class="time">
                            <div class="d-flex gap-1 align-items-center">
                                <input checked type="radio" @onchange="(() => OnChangeRadio(0))" id="custom" name="time"/>
                                <label for="custom">Custom</label>
                            </div>

                            <div class="d-flex gap-1 align-items-center">
                                <input @onchange="(() => OnChangeRadio(1))" type="radio" id="allday" name="time" />
                                <label for="allday">All day</label>
                            </div>

                            <div class="d-flex gap-1 align-items-center">
                                <input @onchange="(() => OnChangeRadio(2))" type="radio" id="morning" name="time" />
                                <label for="morning">Morning</label>
                            </div>

                            <div class="d-flex gap-1 align-items-center">
                                <input @onchange ="(() => OnChangeRadio(3))" type="radio" id="afternoon" name="time" />
                                <label for="afternoon">Afternoon</label>
                            </div>
                        </div>

                        @* <div class="time">
                            <div class="d-flex gap-1 align-items-center">
                                <input checked="@isCustom" @onchange="e => OnCheckChange(0, e)" type="checkbox" id="custom" />
                                <label for="custom">Custom</label>
                            </div>

                            <div class="d-flex gap-1 align-items-center">
                                <input checked="@isAllday" @onchange="e => OnCheckChange(1,e)" type="checkbox" id="allday" />
                                <label for="allday">All day</label>
                            </div>

                            <div class="d-flex gap-1 align-items-center">
                                <input checked="@isMorning" @onchange="e => OnCheckChange(2, e)" type="checkbox" id="morning" />
                                <label for="morning">Morning</label>
                            </div>

                            <div class="d-flex gap-1 align-items-center">
                                <input checked="@isAfternoon" @onchange="e => OnCheckChange(3, e)" type="checkbox" id="afternoon" />
                                <label for="afternoon">Afternoon</label>
                            </div>
                        </div> *@
                        
                    </div>
                </div>

                <!--Venue-->
                <div class="input">
                    <div class="title">
                        <i class="bi bi-geo-alt"></i>
                        <p>Venue</p>
                    </div>
                    
                    <input spellcheck="false" @bind="sched.Location" type="text" class="form-control p-2" placeholder="Add Venue" />
                </div>

                <!--Description-->
                <div class="input inputD mt-3">
                    <div class="title mt-2">
                        <i class="bi bi-list-ul"></i>
                        <p>Details</p>
                    </div>
                    
                    <textarea @bind="sched.Description" @ref="textarea" @oninput="ResizeDet" type="text" spellcheck="false" class="form-control p-2" placeholder="Add Details" />
                </div>

                <!--Attendance-->
                <div hidden="@(!isAttendanceVisible)" class="userFields">
                    <div class="input">
                        <p>Count</p>
                        <input @bind="count" type="number" min="0" class="form-control p-2" />
                    </div>

                    <div class="input">
                        <p>Seekers</p>
                        <input @bind="seekers" type="number" min="0" class="form-control p-2" />
                    </div>
                </div>

                <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-end">
                    <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Close</button>
                    <button hidden="@(title != "New Schedule")" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white" @onclick="addEvent">Create</button>
                    <button hidden="@(title == "New Schedule")" @onclick="updateEvent" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white">Update</button>
                </div>

                @* <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-md-between">
                    <button hidden="@(title == "New Schedule" || title == "Update Details")" @onclick="ToggleAttendance" class="btn attBtn">Attendance</button>
                    <div>
                        <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Close</button>
                        <button hidden="@(!isEditMode)" @onclick="updateEvent" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white">Update</button>
                    </div>
                </div> *@
            </div>

            <!--View Modal-->
            <div hidden="@(isEditMode)" class="viewMod">
                <div class="iconText">
                    <i class="bi bi-activity text-primary"></i>
                    <p class="fs"><strong>@sched.Category</strong></p>
                </div>

                <div class="iconText">
                    <i class="bi bi-bookmark-check fs"></i>
                    <p class="fs">@sched.Title</p>
                </div>

                <div class="iconText">
                    <i class="bi bi-calendar-event fs"></i>
                    <p class="fs">@sched.StartDate - @sched.EndDate</p>
                </div>

                <div class="iconText">
                    <i class="bi bi-clock fs"></i>
                    <p class="fs">@(sched.TimeOption == "Custom" ? $"{sched.StartTime} - {sched.EndTime}" : $"{sched.TimeOption} {sched.StartTime} - {sched.EndTime}")</p>
                </div>

                <div class="iconText">
                    <i class="bi bi-geo-alt fs"></i>
                    <p class="fs">@sched.Location</p>
                </div>

                <div class="iconText">
                    <i class="bi bi-list-columns fs"></i>
                    <pre class="form-control border border-0">@(string.IsNullOrEmpty(sched.Description) ? "N/A" : sched.Description)</pre>
                    @* <textarea type="text" class="form-control border-0 bg-transparent" readonly style="min-height:200px;">@(string.IsNullOrEmpty(sched.Description) ? "N/A" : sched.Description)</textarea> *@
                </div>


                <div hidden="@(!isAttendanceVisible)" class="att">
                    <div class="userFields">
                        <div class="input">
                            <p>Count</p>
                            <input @bind="count" type="number" min="0" class="form-control p-2" />
                        </div>

                        <div class="input">
                            <p>Seekers</p>
                            <input @bind="seekers" type="number" min="0" class="form-control p-2" />
                        </div>
                    </div>
                    

                    <button @onclick="AddOrUpdateAttendance" class="btn btn-primary p-2 px-3 text-white link">Save</button>
                </div>

                <div style="height: 50px;">

                </div>

                @* <div class="addOptions mt-5 d-block d-md-flex gap-2 justify-content-md-between">
                    <button hidden="@(title == "New Schedule" || title == "Update Details")" @onclick="ToggleAttendance" class="btn attBtn">Attendance</button>
                    <div>
                        <button class="btn btn-outline-light px-4 py-1 rounded rounded-pill border border-2" @onclick="ToggleModal">Close</button>
                        <button hidden="@(!isEditMode)" @onclick="updateEvent" class="btn btn-primary px-4 py-1 rounded rounded-pill text-white">Update</button>
                    </div>
                </div> *@

            </div>
        </div>
    </div>

    <!--Header Section-->
    <div class="header">
        <div>
            <h4 class="m-0 fw-bold">Schedule Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Create schedules and manages church events, activities and services.</p>
        </div>

        <div>
            <button @onclick="ToggleModal" class="btn btn-primary p-2 px-3 text-white link w-100"><i class="bi bi-plus-circle-fill text-white me-2"></i>Add</button>
        </div>
    </div>


    <div class="lcontainer" hidden="@(isListVisible)">
        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l1"></div>
            Event
        </div>

        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l2"></div>
            Meeting
        </div>

        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l3"></div>
            Services
        </div>

        <div class="d-flex align-items-center justify-content-center gap-2">
            <div class="l4"></div>
            Others
        </div>
    </div>

    <!--Calendar View Section-->
    <div class="calendar-container" hidden="@(isListVisible)">
        <div class="calendar-header">
            <div class="d-flex gap-2 align-items-center">
                <button class="btn today" @onclick="setDateToday">Date Today</button>
                <div class="me-2 d-flex gap-2">
                    <i class="bi bi-chevron-left text-white fs-4 icon cursor" @onclick="PreviousMonthChanged"></i>
                    <i class="bi bi-chevron-right text-white fs-4 icon cursor" @onclick="NextMonthChanged"></i>
                </div>
                <p class="text-white m-0 p-0 fs-3 fw-normal">@GetMonthName()</p>
                <p class="text-white m-0 p-0 fs-3 fw-normal">@SelectedYear</p>
            </div>
            <i class="bi bi-search text-white fs-4 cursor" @onclick="ToggleList"></i>
        </div>

        <div class="calendar-week">
            @foreach (var dayName in DayNames)
            {
                <div class="day-name">@dayName</div>
            }
        </div>

        <div class="calendar-grid">
            @foreach (var week in CalendarWeeks)
            {
                @foreach (var day in week)
                {
                    <div class="day-cell @(day == 0 ? "empty" : "") @(day == dayNow && month == DateTime.Now.Month && year == DateTime.Now.Year ? "day" : "")">
                        @if (day != 0)
                        {
                            <div class="day-number">@day</div>
                            <div class="day-list">
                                @foreach (var item in schedulesList.Where(u =>
                                                    new DateOnly(SelectedYear, SelectedMonth, day) >= u.StartDate &&
                                                    new DateOnly(SelectedYear, SelectedMonth, day) <= u.EndDate))
                                {
                                    var attendance = Attendances.FirstOrDefault(a =>
                                    a.ScheduleId == item.Id &&
                                    a.Date == new DateOnly(SelectedYear, SelectedMonth, day));

                                    

                                    <div class="@SwitchClass(item.Category)" @onclick="(() => OpenEdit(item.Id, new DateOnly(SelectedYear, SelectedMonth, day)))">@item.Title</div>
                                }
                            </div>
                        }
                    </div>
                }
            }
        </div>
    </div>

    <!--Table Section-->
    <div class="card w-100 mb-3 cards" hidden="@(!isListVisible)">

        <!--Search Section-->
        <div class="d-flex justify-content-between align-items-start gap-2">
            <div class="position-relative mb-2 w-100">
                <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                <input @bind="searchSched" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search by name..." />
            </div>
            <i class="bi bi-calendar-event fs-4 cursor m-0 p-0" @onclick="ToggleList"></i>
            
        </div>
        
        <div class="filterTime">
            <p>Filter by:</p>
            <select class="form-select" @onchange="SelectStatus">
                <option value="Upcoming">Upcoming</option>
                <option value="Today">Today</option>
                <option value="Completed">Completed</option>
            </select>
            <p><em>@messages</em></p>
        </div>

        

        <div class="table-container">
            <table class="table">
                <thead>
                    <tr>
                        <th class="thead">Name</th>
                        <th class="thead">Start Date</th>
                        <th class="thead">End Date</th>
                        <th class="thead">Action</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var item in filteredSched)
                    {
                        <tr class="table-row">
                            <td class="table-cell" style="font-weight:500;">@item.Title</td>
                            <td class="table-cell" style="font-weight:500;">@item.StartDate.ToString("MMMM dd, yyyy")</td>
                            <td class="table-cell" style="font-weight:500;">@item.EndDate.ToString("MMMM dd, yyyy")</td>
                            <td @onclick:stopPropagation @onclick="(() => OpenEdit(item.Id, new DateOnly(SelectedYear, SelectedMonth, attDate.Day)))" class="table-cell d-flex gap-2 hover" style="padding: 24px 24px; border-bottom: none; width: auto;">View</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@code {
    private List<Schedule> schedulesList = new();
    private List<Schedule> schedulesListView = new();
    ElementReference textarea;
    private string title = "New Schedule";
    private string eventTitle { get; set; }
    private string eventCategory { get; set; } = "Event";
    private DateOnly sDate { get; set; }
    private DateOnly eDate { get; set; }
    private DateTime sDateTime { get; set; } = DateTime.Today;
    private bool isAddModalVisible = false;
    private Schedule sched = new();
    private string searchSched = string.Empty;
    private string messages = string.Empty;
    private int index = 1;
    private string selectedStatus = "Upcoming";
    private IEnumerable<Schedule> filteredSched => schedulesListView.Where(u => string.IsNullOrWhiteSpace(searchSched) || u.Title.Contains(searchSched, StringComparison.OrdinalIgnoreCase) || u.StartDate.ToString("MMM dd, yyyy").Contains(searchSched, StringComparison.OrdinalIgnoreCase) || u.EndDate.ToString("MMM dd, yyyy").Contains(searchSched, StringComparison.OrdinalIgnoreCase)).ToList();

    public record MonthOption(int Value, string Name);
    private List<MonthOption> Months { get; set; }
    // private int Years = DateOnly.FromDateTime(DateTime.Now).Year;
    private string[] DayNames { get; set; } = CultureInfo.CurrentCulture.DateTimeFormat.AbbreviatedDayNames;

    private int SelectedMonth { get; set; }
    private int SelectedYear { get; set; }
    private bool isListVisible = false;

    private List<List<int>> CalendarWeeks = new();
    private int month = DateTime.Now.Month;
    private int year = DateTime.Now.Year;
    private int dayNow = DateTime.Now.Day;

    // Attendance storage
    private List<Attendance> Attendances = new();
    private Attendance att = new();
    private bool isAttendanceVisible = false;
    private int count = 0;
    private int seekers = 0;
    private DateOnly attDate = new DateOnly(2025,9,6);

    //Time
    private TimeOnly sTime = new TimeOnly(8,0);
    private TimeOnly eTime = new TimeOnly(17, 0);
    private string timeOption = "All Day";
    private bool isCustom = false;

    //Toggle option
    private bool isOptionVisible = false;

    //Toggle edit
    private bool isEditMode = false;

    //Time
    private bool isAllday = false;
    private bool isMorning = false;
    private bool isAfternoon = false;


    protected override async Task OnInitializedAsync()
    {
        Init();
        await getScheduleList();
        await GetAttendanceList();

    }

    //set the date to default today
    private void setDateToday()
    {
        month = DateTime.Now.Month;
        year = DateTime.Now.Year;
        dayNow = DateTime.Now.Day;

        SelectedMonth = month;
        SelectedYear = year;
        GenerateCalendar();
    }

    //Close update modal and show view modal
    private void ReturnView()
    {
        isEditMode = !isEditMode;
        title = "Details";
    }

    //Radio button changed
    private void OnChangeRadio(int index)
    {
        switch (index)
        {
            //Custom
            case 0:
                isCustom = false;
                sched.TimeOption = "Custom";
                break;

            //All day
            case 1:
                isCustom = true;
                sched.TimeOption = "All Day";
                sTime = new TimeOnly(8,0);
                eTime = new TimeOnly(17, 0);
                break;

            //Morning
            case 2:
                isCustom = true;
                sched.TimeOption = "Morning";
                sTime = new TimeOnly(8, 0);
                eTime = new TimeOnly(12, 0);
                break;

            //Afternoon
            case 3:
                isCustom = true;
                sched.TimeOption = "Afternoon";
                sTime = new TimeOnly(13, 0);
                eTime = new TimeOnly(17, 0);
                break;
        }
    }

    //show counts and seekers
    private void ToggleAttendance()
    {
        isAttendanceVisible = !isAttendanceVisible;
    }

    //Get Upcoming list of schedules
    private async Task GetUpcomingSchedules()
    {
        messages = "Fetching files...Please wait";

        var result = await _schedule.GetScheduleByStatusAsync("Upcoming");

        if (result.Success)
        {
            schedulesListView = result.Data;
            messages = $"{schedulesListView.Count} {selectedStatus} schedules found.";
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to fetch schedules: " + result.Error);
            messages = "No schedules found.";
        }
    }

    //Fetch files according to status
    private async Task SelectStatus(ChangeEventArgs e)
    {
        selectedStatus = e.Value.ToString();

        messages = "Fetching files...Please wait";

        if (selectedStatus != null)
        {
            var result = await _schedule.GetScheduleByStatusAsync(selectedStatus);

            if (result.Success)
            {
                schedulesListView = result.Data;
                messages = $"{schedulesListView.Count} {selectedStatus} schedules found.";
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Failed to fetch schedules: " + result.Error);
                messages = "No schedules found.";
            }
        }

    }

    // Add or update attendance count for a specific date in an event
    private async Task AddOrUpdateAttendance(string schedId, DateOnly date, int count)
    {
        var existing = Attendances.FirstOrDefault(a => a.ScheduleId == schedId && a.Date == date);
        if (existing != null)
        {
            existing.Count = count;
        }
        else
        {
            var result = await _firestore.AddAttendanceAsync(att);

            if (result.Success)
            {
                await _js.InvokeVoidAsync("alert", "Attendance added successfully");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", result.Error);
            }
        }
    }

    //Handle Time checkboxes
    private void OnCheckChange(int chk, ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value;

        switch (chk)
        {
            case 0:
                isCustom = true;
                if (isCustom)
                {
                    isAllday = false;
                    isMorning = false;
                    isAfternoon = false;
                    sTime = new TimeOnly(8, 0);
                    eTime = new TimeOnly(17, 0);
                }
                break;
            case 1:
                isAllday = isChecked;
                if (isChecked)
                {
                    isMorning = false;
                    isAfternoon = false;
                    sTime = new TimeOnly(8, 0);
                    eTime = new TimeOnly(17, 0);
                }
                break;
            case 2:
                isMorning = isChecked;
                if (isChecked)
                {
                    isAllday = false;
                    isAfternoon = false;
                    sTime = new TimeOnly(8, 0);
                    eTime = new TimeOnly(12, 0);
                }
                break;
            case 3:
                isAfternoon = isChecked;
                if (isChecked)
                {
                    isAllday = false;
                    isMorning = false;
                    sTime = new TimeOnly(13, 0);
                    eTime = new TimeOnly(17, 0);
                }
                break;
        }

    }

    private string SwitchClass(string name)
    {
        return name switch
        {
            "Event" => "pill",
            "Meeting" => "pill2",
            "Service" => "pill3",
            "Others" => "pill4",
            _ => "pill"
        };
    }

    private void setType(int type)
    {
        index = type;
        switch (type)
        {
            case 1:
                eventCategory = "Event";
                break;
            case 2:
                eventCategory = "Meeting";
                break;
            case 3:
                eventCategory = "Service";
                break;
            case 4:
                eventCategory = "Others";
                break;

        }
    }

    private string GetClass(int indexs)
    {
        return $"{(index == indexs ? "active" : "")}";
    }

    private void OnChangeDate()
    {
        eDate = sDate;
    }

    private void ToggleModal()
    {
        isAddModalVisible = !isAddModalVisible;
        isOptionVisible = false;
        isEditMode = true;
        isAttendanceVisible = false;
        title = "New Schedule";
        sched = new();
        eventTitle = sched.Title;
        eventCategory = sched.Category;
        sDate = sched.StartDate;
        eDate = sched.EndDate;

    }

    private void ToggleView()
    {
        isAddModalVisible = !isAddModalVisible;
        isAttendanceVisible = false;
        isOptionVisible = false;
        isEditMode = false;
        title = "New Schedule";
        sched = new();
    }

    //Toggle OPtion edit or remove
    private void ToggleOption()
    {
        isOptionVisible = !isOptionVisible;
    }

    //close option modal
    private void closeOption()
    {
        isOptionVisible = false;
    }

    private void ToggleUpdateUI()
    {
        title = "Update Details";
        isEditMode = true;
    }

    private void Init()
    {
        Months = Enumerable.Range(1, 12)
            .Select(m => new MonthOption(m, CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)))
            .ToList();

        int currentYear = DateTime.Now.Year;
        // Years = Enumerable.Range(currentYear - 5, 11).ToList();

        SelectedMonth = DateTime.Now.Month;
        SelectedYear = currentYear;

        GenerateCalendar();
    }

    private async Task ToggleList()
    {
        isListVisible = !isListVisible;
        await GetUpcomingSchedules();
    }

    //Get Attendance List
    private async Task GetAttendanceList()
    {
        var result = await _firestore.GetAttendanceAsync();

        if (result.Success)
        {
            Attendances = result.Data;
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get attendance list: " + result.Error);
        }
    }

    private async Task getScheduleList()
    {
        try
        {
            schedulesList = new();
            var result = await _schedule.GetScheduleAsync();

            if (result.Success)
            {
                schedulesList = result.Data;
            }
            else
            {
                await _js.InvokeVoidAsync("alert", result.Error);
            }
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //Add event to database
    private async Task addEvent()
    {
        try
        {
            DateOnly dateNow = DateOnly.FromDateTime(DateTime.Now);

            if (sDate > dateNow)
            {
                sched.Status = "Upcoming";
            }
            else if (sDate == dateNow)
            {
                sched.Status = "Today";
            }
            else
            {
                sched.Status = "Completed";
            }

            sched.Title = eventTitle;
            sched.Category = eventCategory;
            sched.StartDate = sDate;
            sched.EndDate = eDate;
            sched.StartTime = sTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);
            sched.EndTime = eTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);

            var result = await _schedule.AddScheduleAsync(sched);
            if (result.Success)
            {
                await _js.InvokeVoidAsync("alert", "Schedule successfully added");
                ToggleModal();
                await getScheduleList();
            }
            else
            {
                await _js.InvokeVoidAsync("alert", result.Error);
            }

        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //View Schedule
    private async Task OpenEdit(string Id, DateOnly date)
    {
        attDate = date;
        ToggleView();
        title = "Details";
        attDate = date;
        var editEvent = schedulesList.FirstOrDefault(u => u.Id == Id);
        if (editEvent != null)
        {
            sched = editEvent;
            eventTitle = sched.Title;
            eventCategory = sched.Category;
            sDate = sched.StartDate;
            eDate = sched.EndDate;
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Event does not exist");
            await getScheduleList();
        }

        var result = await _firestore.GetAttendanceAsync();
        if (result.Success)
        {
            Attendances = result.Data;

            var attend = Attendances.FirstOrDefault(u => u.ScheduleId == Id && u.Date == attDate);
            if (attend != null)
            {
                count = attend.Count;
                seekers = attend.Seekers;
            }
            else
            {
                count = 0;
                seekers = 0;
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to fetch attendance: " + result.Error);
        }
    }



    private async Task updateEvent()
    {
        try
        {
            bool confirm = await _js.InvokeAsync<bool>("confirm", "Confirm changes?");
            if (!confirm) return;

            DateOnly dateNow = DateOnly.FromDateTime(DateTime.Now);

            if (sDate > dateNow)
            {
                sched.Status = "Upcoming";
            }
            else if (sDate == dateNow)
            {
                sched.Status = "Today";
            }
            else
            {
                sched.Status = "Completed";
            }

            sched.Title = eventTitle;
            sched.Category = eventCategory;
            sched.StartDate = sDate;
            sched.EndDate = eDate;
            sched.StartTime = sTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);
            sched.EndTime = eTime.ToString("h:mm tt", System.Globalization.CultureInfo.InvariantCulture);

            var result = await _schedule.UpdateScheduleAsync(sched.Id, sched);

            if (result.Success)
            {
                await _js.InvokeVoidAsync("alert", "Event successfuly updated");
                ToggleModal();
                GenerateCalendar();
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Failed to update: " + result.Error);
            }
        }
        catch
        {
            await _js.InvokeVoidAsync("alert", "Update Failed");
        }
    }

    private async Task removeSchedule(string Id)
    {
        bool confirmed = await _js.InvokeAsync<bool>("confirm", "Are you sure you want to delete this event?");
        if (!confirmed) return;

        try
        {
            var result = await _schedule.RemoveScheduleAsync(Id);
            if (result.Success)
            {
                var attend = await _firestore.GetAttendanceAsync();

                if (attend.Success)
                {
                    Attendances = attend.Data;

                    var attendanceToRemove = Attendances.Where(u => u.ScheduleId == Id).ToList();

                    foreach (var item in attendanceToRemove)
                    {
                        var res = await _firestore.DeleteAttendanceAsync(item.Id);
                        if (!res.Success)
                        {
                            await _js.InvokeVoidAsync("alert", "Failed to remove attendance of the removed schedule : " + res.Error);
                        }
                    }
                }
                else
                {
                    await _js.InvokeVoidAsync("alert", "Failed to remove attendance of the removed schedule : " + attend.Error);
                }

                ToggleModal();
                await getScheduleList();
                await _js.InvokeVoidAsync("alert", "Successfully deleted");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", $"Error on deleting document: {result.Error}");
            }

        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error on deleting document: {ex.Message}");
        }
    }

    private void GenerateCalendar()
    {
        CalendarWeeks.Clear();

        var firstDayOfMonth = new DateTime(SelectedYear, SelectedMonth, 1);
        var daysInMonth = DateTime.DaysInMonth(SelectedYear, SelectedMonth);

        int currentDay = 1;
        int startDayOfWeek = (int)firstDayOfMonth.DayOfWeek;

        var week = new List<int>();

        // Fill empty days before first day
        for (int i = 0; i < startDayOfWeek; i++)
        {
            week.Add(0);
        }

        // Fill actual days
        while (currentDay <= daysInMonth)
        {
            week.Add(currentDay);
            currentDay++;

            if (week.Count == 7)
            {
                CalendarWeeks.Add(week);
                week = new List<int>();
            }
        }

        // Fill remaining empty days
        if (week.Count > 0)
        {
            while (week.Count < 7)
            {
                week.Add(0);
            }
            CalendarWeeks.Add(week);
        }
    }

    private void PreviousMonthChanged()
    {
        month--;
        if (month < 1)
        {
            month = 12;
            year--;
        }
        SelectedMonth = month;
        SelectedYear = year;
        GenerateCalendar();
    }

    private void NextMonthChanged()
    {
        month++;
        if (month > 12)
        {
            month = 1;
            year++;
        }
        SelectedMonth = month;
        SelectedYear = year;
        GenerateCalendar();
    }

    private string GetMonthName()
    {
        return new DateTime(year,month,1).ToString("MMMM");
    }

    private void OnMonthChanged(int value)
    {
        SelectedMonth = value;
        GenerateCalendar();
    }

    private void OnYearChanged(int value)
    {
        SelectedYear = value;
        GenerateCalendar();
    }

    private bool HasEvent(DateOnly date) =>
        schedulesList.Any(e => date >= e.StartDate &&
                        date <= e.EndDate);

    private async Task AddOrUpdateAttendance()
    {
        var existing = Attendances.FirstOrDefault(u => u.ScheduleId == sched.Id && u.Date == attDate);
        if (existing != null)
        {
            existing.Count = count;
            existing.Seekers = seekers;

            var result = await _firestore.UpdateAttendanceAsync(existing.Id, existing);
            if (result.Success)
            {
                await GetAttendanceList();
                await _js.InvokeVoidAsync("alert", "Attendance saved successfully");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Failed to save attendance: " + result.Error);
            }
        }
        else
        {

            att.ScheduleId = sched.Id;
            att.Count = count;
            att.Seekers = seekers;
            att.Date = attDate;

            var result = await _firestore.AddAttendanceAsync(att);

            if (result.Success)
            {
                count = 0;
                seekers = 0;
                await GetAttendanceList();
                isAddModalVisible = false;
                await _js.InvokeVoidAsync("alert", "Attendance saved successfully");

            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Failed to save attendance: " + result.Error);
            }

        }
    }

    private async Task ResizeDet()
    {
        try
        {
            await _schedule.ResizeDetails(textarea);
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

}