@page "/media"
@layout LandingLayout
@using GospelReachCapstone.Models
@using System.Net
@inject IJSRuntime _js
@inject HttpClient Http
@inject ToastService _toast

<PageTitle>Media Files</PageTitle>


<div class="sub-page">
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-start justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Media File Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Upload, organize, and manage church media files.</p>
        </div>

        <div>
            <InputFile OnChange="HandleFile" accept="image/*,video/*,audio/*,.pdf" />
            <button class="btn btn-primary text-white p-2" @onclick="UploadFile" disabled="@(!CanUpload)">Upload</button>
        </div>

        
    </div>

    @if (uploading)
    {
        <p class="mb-4 ms-1 @(uploading ? "" : "d-none")"><em>Uploading..</em></p>
        <div class="progress mt-2">
            <div class="progress-bar" role="progressbar" style="width: @(uploadProgress)%;" aria-valuenow="@uploadProgress" aria-valuemin="0" aria-valuemax="100">
                @uploadProgress%
            </div>
        </div>
    }
        <!--Table Section-->
        <div class="card w-100 mb-3 cards">
            <div class="container">
                <!--Search Section-->
                <div class="d-flex flex-column flex-md-row gap-2 mb-4">
                    <div class="position-relative flex-grow-1">
                        <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                        <input @bind="searchItem" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search files..." />
                    </div>

                    <select @onchange="Filter" class="form-select btns text-center">
                    <option value="All">All</option>
                    <option value="Videos">Videos</option>
                    <option value="Audio">Audio</option>
                    <option value="Images">Images</option>
                    <option value="Documents">Documents</option>
                    </select>

                    @* <div class="flex-s hrink-0 d-flex flex-column flex-md-row gap-2">
                        <button @onclick="@(() => SetFilter("All"))" class="btn @(selectedFilter == "All" ? "btn-primary text-white" : "btn-light text-black") btns p-2 border border-1 text-nowrap">All</button>
                    <button @onclick="@(() => SetFilter("Videos"))" class="btn @(selectedFilter == "Videos" ? "btn-primary text-white" : "btn-light text-black") btns border border-1 p-2 text-nowrap"><i class="bi bi-film"></i> Videos</button>
                    <button @onclick="@(() => SetFilter("Audio"))" class="btn @(selectedFilter == "Audio" ? "btn-primary text-white" : "btn-light text-black") btns border border-1 p-2 text-nowrap"><i class="bi bi-music-note-beamed"></i> Audio</button>
                    <button @onclick="@(() => SetFilter("Documents"))" class="btn @(selectedFilter == "Documents" ? "btn-primary text-white" : "btn-light text-black") btns border border-1 p-2 text-nowrap"><i class="bi bi-file-earmark-text"></i> Documents</button>
                    <button @onclick="@(() => SetFilter("Images"))" class="btn @(selectedFilter == "Images" ? "btn-primary text-white" : "btn-light text-black") btns border border-1 p-2 text-nowrap"><i class="bi bi-image"></i> Images</button>
                    </div> *@
                </div>
            <!--File Section-->
                <div class="wrapper">
                    <div class="files">
                        @foreach (var item in FilteredFiles)
                        {
                            <div class="card p-4 cards d-flex flex-column align-items-start justify-content-center">
                                <div class="d-flex gap-3">
                                    <div class="flex-shrink-0">
                                        <div class="p-2" style="background-color: lavender; border-radius: 6px;">
                                            <i class="bi bi-film text-primary d-none"></i>
                                        </div>
                                    </div>

                                    <div class="flex-grow-1">
                                        <a href="@item.Url" target="_blank" class="weblink">@item.PublicId.Split("/").Last()</a>
                                        <p class="c2" style="font-size:14px;">@(item.FileSizeBytes/1024)kb Uploaded on @item.CreatedAt</p>
                                        <p class="c2" style="font-size:14px;">By John Smith</p>
                                    </div>
                                </div>

                                <div class="d-flex mt-3 gap-2 align-self-end">
                                <a href="@GetDownloadUrl(item)" download class="btn btn-light border border-1 px-2 py-1 w-100 text-nowrap" style="font-size: 14px;"><i class="bi bi-download"></i> Download</a>
@*                                 <button @onclick="() => DownloadFile(item.PublicId)" class="btn btn-light border border-1 px-2 py-1 w-100 text-nowrap" style="font-size: 14px;"><i class="bi bi-download"></i> Download</button>
 *@                                    <button @onclick="() => DeleteFiles(item.PublicId)" class="btn btn-danger text-white px-2 py-1" style="font-size: 14px;">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
</div>

@code{
    IBrowserFile selectedFile;
    List<MediaFile> files = new();
    string selectedFilter = "All"; // Default to all
    IEnumerable<MediaFile> FilteredFiles =>files.Where(file => (string.IsNullOrWhiteSpace(searchItem) || file.PublicId.Contains(searchItem, StringComparison.OrdinalIgnoreCase)) && (selectedFilter == "All" || MatchesFilter(file))).ToList();
    bool isLoading = true;
    string searchItem = string.Empty;
    int uploadProgress = 0;
    bool uploading = false;

    bool CanUpload => selectedFile != null;

    protected override async Task OnInitializedAsync()
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }


        try
        {
            await LoadFiles();
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", $"Error loading files: {ex.Message}");
        }

    }

    private void HandleFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    string GetDownloadUrl(MediaFile item)
    {
        var url = item.Url;

        // Insert "fl_attachment" right after "upload/" in the Cloudinary URL
        var insertIndex = url.IndexOf("/upload/") + "/upload/".Length;

        return url.Insert(insertIndex, "fl_attachment/");
    }

    private async Task UploadFile()
    {
        if (selectedFile == null) return;

        const long MaxFileSize = 100 * 1024 * 1024; // 100 MB

        if (selectedFile.Size > MaxFileSize)
        {
            await _js.InvokeVoidAsync("alert", "File is too large. Maximum size is 100MB.");
            return;
        }

        uploading = true;
        uploadProgress = 0;

        var content = new MultipartFormDataContent();
        var stream = selectedFile.OpenReadStream(maxAllowedSize: MaxFileSize); // 100 MB max
        var streamContent = new ProgressableStreamContent(stream, 4096, progress =>
        {
            uploadProgress = progress;
            InvokeAsync(StateHasChanged); // updates UI
        });

        streamContent.Headers.Add("Content-Disposition", $"form-data; name=\"file\"; filename=\"{selectedFile.Name}\"");
        streamContent.Headers.Add("Content-Type", selectedFile.ContentType);
        content.Add(streamContent, "file", selectedFile.Name);

        var response = await Http.PostAsync("https://localhost:7114/api/media/upload", content);

        uploading = false;
        uploadProgress = 0;
        selectedFile = null;

        if (response.IsSuccessStatusCode)
        {
            await LoadFiles();
            StateHasChanged();      // 👈 force UI refresh
        }
        else
            await _js.InvokeVoidAsync("alert", "Upload failed.");

        await LoadFiles();
    }

    private async Task LoadFiles()
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        isLoading = true;
        files = await Http.GetFromJsonAsync<List<MediaFile>>("https://localhost:7114/api/media/list");
        isLoading = false;
    }

    private async Task DeleteFiles(string publicId)
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        var confirmed = await _js.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{publicId}'?");
        if (!confirmed)
            return;

        var response = await Http.DeleteAsync($"https://localhost:7114/api/media/delete?publicId={Uri.EscapeDataString(publicId)}");
        if (response.IsSuccessStatusCode)
        {
            await LoadFiles();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            await _js.InvokeVoidAsync("alert", $"Failed to delete file: {error}");
        }
    }

    async Task DeleteFile(string publicId)
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        bool confirm = await _js.InvokeAsync<bool>("confirm", "Confirm delete file?");

        if (!confirm) return;

        await Http.DeleteAsync($"https://localhost:7114/api/media/delete?publicId={Uri.EscapeDataString(publicId)}");
        await LoadFiles();
    }

    private async Task DownloadFile(string publicId)
    {
        var downloadUrl = $"https://localhost:7114/api/media/download/{publicId}";
        await _js.InvokeVoidAsync("open", downloadUrl, "_blank");
    }

    bool MatchesFilter(MediaFile file)
    {
        var ext = Path.GetExtension(file.PublicId).ToLower();

        return selectedFilter switch
        {
            "Videos" => new[] { ".mp4", ".avi", ".mov", ".wmv", ".mkv" }.Contains(ext),
            "Audio" => new[] { ".mp3", ".wav", ".aac", ".flac" }.Contains(ext),
            "Documents" => new[] { ".pdf", ".doc", ".docx", ".txt", ".pptx", ".xlsx" }.Contains(ext),
            "Images" => new[] { ".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp" }.Contains(ext),
            _ => true
        };
    }

    void SetFilter(string filter)
    {
        selectedFilter = filter;
    }

    void Filter(ChangeEventArgs e)
    {
        selectedFilter = e.Value.ToString();
    }

    

    // public class MediaFile
    // {
    //     public string Url { get; set; }
    //     public string PublicId { get; set; }
    //     public long FileSizeBytes { get; set; }
    //     public string Format { get; set; }
    //     public string CreatedAt { get; set; }
    // }

    public class ProgressableStreamContent : HttpContent
    {
        private const int defaultBufferSize = 4096;
        private readonly Stream content;
        private readonly int bufferSize;
        private readonly Action<int> progress;

        public ProgressableStreamContent(Stream content, int bufferSize, Action<int> progress)
        {
            this.content = content;
            this.bufferSize = bufferSize;
            this.progress = progress;
        }

        protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            var buffer = new byte[bufferSize];
            var size = content.Length;
            var uploaded = 0;

            int read;
            while ((read = await content.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                await stream.WriteAsync(buffer, 0, read);
                uploaded += read;
                int percent = (int)((uploaded * 100.0) / size);
                progress(percent);
            }
        }

        protected override bool TryComputeLength(out long length)
        {
            length = content.Length;
            return true;
        }

        
    }
}