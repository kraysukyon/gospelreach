@page "/media"
@layout LandingLayout
@using GospelReachCapstone.Models
@using System.Net
@inject IJSRuntime _js
@inject HttpClient Http

<PageTitle>Media Files</PageTitle>


<div class="sub-page">
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-start justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Media File Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Upload, organize, and manage church media files.</p>
        </div>

        <div>
            <InputFile OnChange="HandleFile" />
            <button class="btn btn-primary text-white p-2" @onclick="UploadFile" disabled="@(!CanUpload)">Upload</button>
        </div>

        @if (uploading)
        {
            <div class="progress mt-2">
                <div class="progress-bar" role="progressbar" style="width: @(uploadProgress)%;" aria-valuenow="@uploadProgress" aria-valuemin="0" aria-valuemax="100">
                    @uploadProgress%
                </div>
            </div>
        }
    </div>


        <!--Table Section-->
        <div class="card w-100 mb-3 cards">
            <div class="container">
                <!--Search Section-->
                <div class="d-flex flex-column flex-md-row gap-2 mb-4">
                    <div class="position-relative flex-grow-1">
                        <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                        <input @bind="searchItem" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search files..." />
                    </div>

                    <div class="flex-shrink-0 d-flex flex-column flex-md-row gap-2">
                        <button class="btn btn-primary p-2 px-3 w-100 text-nowrap text-white">All</button>
                        <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-film"></i> Videos</button>
                        <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-music-note-beamed"></i> Audio</button>
                        <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-file-earmark-text"></i> Documents</button>
                        <button class="btn btn-light border border-1 p-2 w-100 text-nowrap"><i class="bi bi-image"></i> Images</button>
                    </div>
                </div>
            @if (files?.Any() == true)
            {
            <!--File Section-->
                <div class="wrapper">
                    <div class="files">
                        @foreach (var item in files)
                        {
                            <div class="card p-4 cards d-flex flex-column align-items-start justify-content-center">
                                <div class="d-flex gap-3">
                                    <div class="flex-shrink-0">
                                        <div class="p-2" style="background-color: lavender; border-radius: 6px;">
                                            <i class="bi bi-film text-primary"></i>
                                        </div>
                                    </div>

                                    <div class="flex-grow-1">
                                        <a href="@item.Url" target="_blank" class="weblink">@item.PublicId</a>
                                        <p class="c2" style="font-size:14px;">@(item.FileSizeBytes/1024)kb Uploaded on @item.CreatedAt</p>
                                        <p class="c2" style="font-size:14px;">By John Smith</p>
                                    </div>
                                </div>

                                <div class="d-flex mt-3 gap-2 align-self-end">
                                    <a href="@item.Url" target="_blank" class="btn btn-light border border-1 px-2 py-1 w-100 text-nowrap" style="font-size: 14px;"><i class="bi bi-download"></i> Download</a>
                                    @* <button class="btn btn-light border border-1 px-2 py-1 w-100 text-nowrap" style="font-size: 14px;"><i class="bi bi-download"></i> Download</button> *@
                                    <button @onclick="() => DeleteFile(item.PublicId)" class="btn btn-danger text-white px-2 py-1" style="font-size: 14px;">Delete</button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                }
            </div>
        </div>
</div>

@code{
    IBrowserFile selectedFile;
    List<MediaFile> files = new();
    bool isLoading = true;
    string searchItem = string.Empty;
    int uploadProgress = 0;
    bool uploading = false;

    bool CanUpload => selectedFile != null;

    protected override async Task OnInitializedAsync()
    {
        await LoadFiles();
    }

    async Task HandleFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    async Task UploadFile()
    {
        if (selectedFile == null) return;

        uploading = true;
        uploadProgress = 0;

        var content = new MultipartFormDataContent();
        var stream = selectedFile.OpenReadStream(maxAllowedSize: 100 * 1024 * 1024); // 100 MB max
        var streamContent = new ProgressableStreamContent(stream, 4096, progress =>
        {
            uploadProgress = progress;
            InvokeAsync(StateHasChanged); // updates UI
        });

        streamContent.Headers.Add("Content-Disposition", $"form-data; name=\"file\"; filename=\"{selectedFile.Name}\"");
        streamContent.Headers.Add("Content-Type", selectedFile.ContentType);
        content.Add(streamContent, "file", selectedFile.Name);

        var response = await Http.PostAsync("https://localhost:7114/api/media/upload", content);

        uploading = false;
        uploadProgress = 0;
        selectedFile = null;

        if (response.IsSuccessStatusCode)
            await LoadFiles();
        else
            await _js.InvokeVoidAsync("alert", "Upload failed.");
    }

    async Task LoadFiles()
    {
        isLoading = true;
        files = await Http.GetFromJsonAsync<List<MediaFile>>("https://localhost:7114/api/media/list");
        isLoading = false;
    }

    async Task DeleteFile(string publicId)
    {
        bool confirm = await _js.InvokeAsync<bool>("confirm", "Confirm delete file?");

        if (!confirm) return;
        
        await Http.DeleteAsync($"https://localhost:7114/api/media/delete/{publicId}");
        await LoadFiles();
    }

    

    public class MediaFile
    {
        public string Url { get; set; }
        public string PublicId { get; set; }
        public long FileSizeBytes { get; set; }
        public string Format { get; set; }
        public string CreatedAt { get; set; }
    }

    public class ProgressableStreamContent : HttpContent
    {
        private const int defaultBufferSize = 4096;
        private readonly Stream content;
        private readonly int bufferSize;
        private readonly Action<int> progress;

        public ProgressableStreamContent(Stream content, int bufferSize, Action<int> progress)
        {
            this.content = content;
            this.bufferSize = bufferSize;
            this.progress = progress;
        }

        protected override async Task SerializeToStreamAsync(Stream stream, TransportContext context)
        {
            var buffer = new byte[bufferSize];
            var size = content.Length;
            var uploaded = 0;

            int read;
            while ((read = await content.ReadAsync(buffer, 0, buffer.Length)) > 0)
            {
                await stream.WriteAsync(buffer, 0, read);
                uploaded += read;
                int percent = (int)((uploaded * 100.0) / size);
                progress(percent);
            }
        }

        protected override bool TryComputeLength(out long length)
        {
            length = content.Length;
            return true;
        }
    }
}