@page "/attendance/department-report"
@layout LandingLayout
@inject IJSRuntime _js
@inject GospelReachCapstone.Services.ScheduleService _scheduleService
@inject GospelReachCapstone.Services.FinancialRecordService _financialMensService
@inject GospelReachCapstone.Services.AttendanceService _attendanceService
@using GospelReachCapstone.Models
@using System.ComponentModel.DataAnnotations
@inject NavigationManager _nav
@inject AuthState _auth

<PageTitle>Attendance Report</PageTitle>

<div class="page">
    <div @onclick="ToggleModal" class="BackgroundModal @(isBackgroundVisible ? "show" : "")">

    </div>
    <!--Header Section-->
    <div class="header d-flex flex-column w-100">
        <div class="d-flex justify-content-between align-items-start w-100">
            <div>
                <h4 class="m-0 fw-bold">Generate Attendance Report</h4>
                <p class="m-0 c2" style="font-size: 14px">Generate an updated report</p>
            </div>

            <div>
                @* <button class="btn btn-primary py-1 px-4 text-white"><i class="bi bi-printer text-white fs-5 me-1"></i> Print Report</button> *@
                <button @onclick="ReturnToMensPage" class="btn btn-danger py-1 px-4 text-white">Return</button>

            </div>
        </div>


        <div class="d-flex gap-2 align-items-center mb-3 mt-2">
            <button @onclick="() => GetDataByDateRange(toDate,fromDate)" class="btn btn-primary p-2 px-4 text-white">Generate</button>
            <div class="d-flex gap-2 align-items-center">
                <p>From</p>
                <input @bind="fromDate" type="date" class="form-control px-2 py-1" />
            </div>

            <div class="d-flex gap-2 align-items-center">
                <p>To</p>
                <input @bind="toDate" type="date" class="form-control px-2 py-1" />
            </div>

        </div>
        
    </div>

    <p><em>@message</em></p>

    <div hidden="@(isFetching)">
        <!--Sub Header-->
        <div class="mb-4">
            <div class="mb-4">
                <h5 class="m-0 fw-bold">The Salvation Army Mandaue Outpost</h5>
                <p>Attendance Report — @depName Department</p>
                <p>@fromDate.ToString("MMMM dd, yyyy") - @toDate.ToString("MMMM dd, yyyy")</p>
            </div>

            <p>Date Generated: @dateNow.ToString("MMMM dd, yyyy")</p>
        </div>

        <!--Table Section-->
        <div class="mb-4">
            <!--Summary-->
            <div class="mb-2">
                <table class="table table-bordered" style="table-layout: fixed;">
                    <thead>
                        <tr class="text-center" style="background-color: #385494;">
                            <th colspan="2" class="text-white fs-5">Summary of Attendance</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr class="text-center">
                            <td>Total Attendee</td>
                            <td>@(filteredService.Sum(u => u.Present) + filteredDepartment.Sum(u => u.Present))</td>
                        </tr>

                        <tr class="text-center">
                            <td>Total Absent</td>
                            <td>@(filteredService.Sum(u => u.Absent) + filteredDepartment.Sum(u => u.Absent))</td>
                        </tr>

                        @* <tr class="text-center" style="background-color: #bfbfbf;">
                        <td class="fw-bold">Net Balance</td>
                        <td class="fw-bold">Php @currentBalance.ToString("N2")</td>
                    </tr> *@
                    </tbody>

                </table>
            </div>

            <!--Income Breakdown-->
            <div class="mb-2">
                <table class="table table-bordered" style="table-layout: fixed;">
                    <thead>
                        <tr class="text-center" style="background-color: #385494;">
                            <th colspan="5" class="text-white fs-6">Service Attendance</th>
                        </tr>
                        <tr class="fw-bold text-center">
                            <th>Date</th>
                            <th>Title</th>
                            <th>Member</th>
                            <th>Visitor</th>
                            <th>Absent</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in filteredService)
                        {
                            <tr class="text-center">
                                <td>@item.Date.ToString("MMM dd, yyyy")</td>
                                <td>@item.Title</td>
                                <td>@item.Present</td>
                                <td>@item.Visitors</td>
                                <td>@item.Absent</td>
                            </tr>
                        }
                        <tr class="text-center">
                            <td class="fw-bold">Total</td>
                            <td class="fw-bold"></td>
                            <td class="fw-bold">@filteredService.Sum(u => u.Present)</td>
                            <td class="fw-bold">@filteredService.Sum(u => u.Visitors)</td>
                            <td class="fw-bold">@filteredService.Sum(u => u.Absent)</td>
                        </tr>
                    </tbody>

                </table>
            </div>

            <!--Expense Breakdown-->
            <div class="mb-2">
                <table class="table table-bordered" style="table-layout: fixed;">
                    <thead>
                        <tr class="text-center" style="background-color: #385494;">
                            <th colspan="5" class="text-white fs-6">Department Attendance</th>
                        </tr>
                        <tr class="fw-bold text-center">
                            <th>Date</th>
                            <th>Title</th>
                            <th>Member</th>
                            <th>Visitor</th>
                            <th>Absent</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in filteredDepartment)
                        {
                            <tr class="text-center">
                                <td>@item.Date.ToString("MMM dd, yyyy")</td>
                                <td>@item.Title</td>
                                <td>@item.Present</td>
                                <td>@item.Visitors</td>
                                <td>@item.Absent</td>
                            </tr>
                        }
                        <tr class="text-center">
                            <td class="fw-bold">Total</td>
                            <td class="fw-bold"></td>
                            <td class="fw-bold">@filteredDepartment.Sum(u => u.Present)</td>
                            <td class="fw-bold">@filteredDepartment.Sum(u => u.Visitors)</td>
                            <td class="fw-bold">@filteredDepartment.Sum(u => u.Absent)</td>
                        </tr>
                    </tbody>

                </table>
            </div>
        </div>
    </div>
    

    <!--Graphs and Visualization-->
    @* <div>
        <h5 class="m-0 fw-bold">Graphs and Visualizations</h5>

        <div class="chart">
            <div class="d-flex flex-column align-items-center justify-content-center mb-4">
                <h5 class="fw-bold mb-4">Service</h5>
                <div class="p-4">
                    <canvas id="service" width="300" height="300"></canvas>
                </div>
                
            </div>

            <div class="d-flex flex-column align-items-center justify-content-center mb-4">
                <h5 class="fw-bold mb-4">Department</h5>
                <div class="p-4">
                    <canvas id="department" width="300" height="300"></canvas>
                </div>
            </div>
        </div>

        <div class="d-none">
            <canvas id="incomeExpenseChart" width="400" height="200"></canvas>
        </div>
        
    </div> *@
</div>


@code{
    //Dates
    private DateOnly fromDate = DateOnly.FromDateTime(DateTime.Now).AddMonths(-3);
    private DateOnly toDate = DateOnly.FromDateTime(DateTime.Now);
    private DateOnly dateNow = DateOnly.FromDateTime(DateTime.Now);

    //Modals
    private bool isBackgroundVisible = false;

    //List
    private List<ScheduleAttendanceVM> joinedList = new();
    private IEnumerable<ScheduleAttendanceVM> filteredService => joinedList.Where(u => u.Category == "Service" && u.Department == depName).ToList();
    private IEnumerable<ScheduleAttendanceVM> filteredDepartment => joinedList.Where(u => u.Category == "Department" && u.Department == depName).ToList();

    //Data
    private string depName = string.Empty;
    private string message = string.Empty;
    private bool isFetching = true;

    protected override void OnInitialized()
    {
        if (_auth.Department != null)
        {
            depName = _auth.Department;
        }
    }

    //Navigate to attendance page
    private void ReturnToMensPage()
    {
        _nav.NavigateTo("/attendance/department");
    }

    //Get Financial Records
    private async Task GetDataByDateRange(DateOnly date1, DateOnly date2)
    {
        isFetching = true;
        message = "Fetching data. Please wait...";
        var result = await _attendanceService.GetDepartmentAttendanceByDateRangeAsync(date1, date2, depName);
        if (result.Success)
        {
            var attendanceList = result.Data;

            var schedResult = await _scheduleService.GetScheduleAsync();
            if (schedResult.Success)
            {
                var scheduleList = schedResult.Data;

                var join = attendanceList.Join(scheduleList, a => a.ScheduleId, s => s.Id,(a,s) => new ScheduleAttendanceVM
                {
                    AttendanceId = a.Id,
                    ScheduleId = a.ScheduleId,
                    Category = s.CategoryId,
                    Department = s.DepartmentId,
                    Title = s.Title,
                    Date = a.Date,
                    TotalAttendee = a.TotalAttendee,
                    Present = a.Present,
                    Visitors = a.TotalVisitors,
                    Absent = a.Absent
                }).ToList();

                joinedList = join;

                message = string.Empty;
                isFetching = false;

            }
            else
            {
                message = "Failed to fetch data";
                await _js.InvokeVoidAsync("alert", schedResult.Error);
            }
        }
        else
        {
            message = "Failed to fetch data";
            await _js.InvokeVoidAsync("alert", result.Error);
        }

    }

    //get the data for the year
    private async Task GetDataByYear()
    {
        DateOnly startOfYear = new(DateTime.Now.Year, 1, 1);
        DateOnly endOfYear = new(DateTime.Now.Year, 12, 31);
        var result = await _financialMensService.GetFinancialDataByDateRange(endOfYear,startOfYear);

        if (result.Success)
        {
            if (result.Data != null)
            {
                var data = result.Data;

                var monthlySummary = data
                    .GroupBy(f => new { f.Date.Year, f.Date.Month })
                    .Select(g => new
                    {
                        Year = g.Key.Year,
                        Month = g.Key.Month,
                        TotalIncome = g.Where(x => x.Type == "Income").Sum(x => x.Amount),
                        TotalExpense = g.Where(x => x.Type == "Expense").Sum(x => x.Amount)
                    })
                    .OrderBy(x => x.Year).ThenBy(x => x.Month)
                    .ToList();

                var months = Enumerable.Range(1, 12).ToArray();
                var incomeData = months
                    .Select(m => monthlySummary.FirstOrDefault(x => x.Month == m && x.Year == 2025)?.TotalIncome ?? 0)
                    .ToArray();

                var expenseData = months
                    .Select(m => monthlySummary.FirstOrDefault(x => x.Month == m && x.Year == 2025)?.TotalExpense ?? 0)
                    .ToArray();

                var monthLabels = new[] { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                          "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };

                await _js.InvokeVoidAsync("firestoreFunctions.renderIncomeExpenseLineChart", monthLabels, incomeData, expenseData);

            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Data is null");
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", result.Error);
        }
    }

    //Modals for Background

    private void ToggleModal()
    {
        isBackgroundVisible = !isBackgroundVisible;
    }

    private class ScheduleAttendanceVM
    {
        public string AttendanceId { get; set; }
        public string ScheduleId { get; set; }
        public DateOnly Date { get; set; }
        public int TotalAttendee { get; set; }
        public int Present { get; set; }
        public int Absent { get; set; }
        public int Visitors { get; set; }
        public string Category { get; set; }
        public string Title { get; set; }
        public string Department { get; set; }
    }
}