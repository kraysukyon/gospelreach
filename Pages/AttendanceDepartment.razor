@page "/attendance/department"
@layout LandingLayout
@inject IJSRuntime _js
@using GospelReachCapstone.Models
@inject GospelReachCapstone.Services.ScheduleService _schedule
@inject GospelReachCapstone.Services.AttendanceMemberRecordService _attendanceMemberRecordService
@inject GospelReachCapstone.Services.AttendanceService _attendanceService
@inject GospelReachCapstone.Services.MemberService _memberService
@inject GospelReachCapstone.Services.AttendanceVisitorRecordService _attendanceVisitorRecordService
@inject GospelReachCapstone.Services.VisitorService _visitorsService
@inject GospelReachCapstone.Services.AuthState _auth
@inject NavigationManager _nav
@inject ToastService _toast

<PageTitle>Attendance Tracker</PageTitle>


<div class="pages">
    <!--Background Modal-->
    <div @onclick="ToggleModal" class="addEventModal @(BackgroundModal ? "show" : "")">

        <!--Loading Modal-->
        <div @onclick:stopPropagation hidden="@(!isLoadingModal)" class="helperModal">
            <div class="d-flex flex-column justify-content-center align-items-center mt-3">
                <h1 style="font-weight: 600;">Loading</h1>
                <p>Please wait...</p>
            </div>


            <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
                <img src="/img/loading.svg" style="height:50px; width: 50px;" />
            </div>
        </div>
        <!--Attendance Section Modal-->
        <div @onclick="HideInviteModal" hidden="@(!isAttendanceVisible)" class="addAttendance" @onclick:stopPropagation>
            <div>
                <div class="d-flex align-content-lg-start justify-content-between">
                    <div>
                        <h4 class="fw-bold">Attendance</h4>
                        <p>@attVM.Title - @attDate.ToString("MMM dd, yyyy")</p>
                    </div>
                    <i class="bi bi-arrow-return-left fs cursor hover fs-4"></i>
                </div>
            </div>

            <div class="asd">
                <div class="aw">
                    <!--Table Section-->
                    <div class="d-flex gap-2">
                        <h5 @onclick="ToggleMembers" class="fw-bold mt-3 cursor @(isVisitor ? "t" : "")">Members</h5>
                        <h5 @onclick="ToggleMembers" class="fw-bold mt-3 cursor @(isVisitor ? "" : "t")">Visitors</h5>
                    </div>

                    <!--Members Search Section-->
                    <div hidden="@(isVisitor)">
                        <div class="position-relative mt-2">
                            <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                            <input type="text" @bind="memberSearch" @bind:event="oninput" class="form-control border search" placeholder="Search name..." />
                        </div>
                        @if (groupMemberList != null)
                        {
                            <div class="table-container mt-2">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th class="thead" style="width: auto; white-space: nowrap;"><input checked type="checkbox" @onchange="OnCheckChange" /></th>
                                            <th class="thead" style="width: 100%;">Name</th>
                                            <th class="thead" style="width: 100%;">Action</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @foreach (var item in filteredMember)
                                        {
                                            <tr>
                                                <td class="table-cell" style="width: auto; white-space: nowrap;">
                                                    <input @bind="item.isSelected" type="checkbox" />
                                                </td>
                                                <td class="table-cell" style="width: 100%;">
                                                    @item.Member.GetFullName()
                                                    @foreach (var v in localvisitList)
                                                    {
                                                        @if (item.Member.Id == v.InvitedByMemberId)
                                                        {
                                                            <div class="d-flex flex-column gap-1 mt-2">
                                                                <div class="visitor">
                                                                    <p class="pill6">@v.GetFullName()</p>
                                                                    <i @onclick="() => RemoveFromVisitorsList(v)" class="bi bi-x-circle cursor removes bg-white text-danger"></i>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                </td>
                                                <td class="table-cell" style="width: 100%;">
                                                    <i @onclick="() => ToggleInviteModal(item.Member.Id, attDate)" @onclick:stopPropagation class="bi bi-plus-circle-fill text-primary fs-5 cursor"></i>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>

                    <!--Visitors Section-->
                    <div hidden="@(!isVisitor)">
                        @if (visitorsList.Count != 0)
                        {
                            <div class="position-relative mt-2">
                                <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                                <input type="text" @bind="visitorsSearch" @bind:event="oninput" class="form-control border search" placeholder="Search name..." />
                            </div>

                            <p class="m-2"><em>@visitorMessage</em></p>

                            <div class="table-container mt-2">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th class="thead" style="width: auto; white-space: nowrap;"><input checked type="checkbox" @onchange="OnCheckChanges" /></th>
                                            <th class="thead" style="width: 100%;">Name</th>
                                        </tr>
                                    </thead>

                                    <tbody>
                                        @foreach (var item in filteredVisitor)
                                        {
                                            <tr>
                                                <td class="table-cell" style="width: auto; white-space: nowrap;">
                                                    <input @bind="item.isSelected" type="checkbox" />
                                                </td>
                                                <td class="table-cell">@item.Visitor.GetFullName()</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>


            </div>

            <div class="mt-3 d-flex justify-content-end">
                <button @onclick="ToggleModal" class="btn border border-1 p-2 px-4">Close</button>
                <button @onclick='() => showConfirm("update", "")' class="btn btn-primary p-2 px-4 text-white">Save</button>
            </div>

        </div>

        <!--Invite Form Modal-->
        <div hidden="@(!isInviteVisible)" class="addAttendances" style="width: 300px;" @onclick:stopPropagation>
            <div class="d-flex align-content-lg-start justify-content-between">
                <div>
                    <h4 class="fw-bold">Add Visitor</h4>
                </div>
                <i @onclick="HideInviteModal" class="bi bi-arrow-return-left fs cursor hover fs-4"></i>
            </div>

            <!--First Name-->
            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-1">
                    <p>First Name</p>
                </div>
                <input @bind="visitor.FirstName" spellcheck="false" type="text" class="form-control p-2 mt-2" placeholder="Enter First Name" />
            </div>

            <!--Middle Name-->
            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-1">
                    <p>Middle Name</p>
                    <p style="font-size: 12px; padding: 0; margin: 0; color:gray;">(optional)</p>
                </div>
                <input @bind="visitor.MiddleName" spellcheck="false" type="text" class="form-control p-2 mt-2" placeholder="Enter Middle Name" />
            </div>

            <!--Last Name-->
            <div class="inputs mt-3">
                <div class="d-flex align-items-center gap-1">
                    <p>Last Name</p>
                </div>
                <input @bind="visitor.LastName" spellcheck="false" type="text" class="form-control p-2 mt-2" placeholder="Enter Last Name" />
            </div>

            <button @onclick="SaveToVistorsList" class="btn btn-primary p-2 text-white w-100 mt-3">Save</button>
        </div>

        <!--View Modal-->
        <div hidden="@(!isEditMode)" class="addAttendances cards" @onclick:stopPropagation>
            <div class="d-flex align-content-lg-start justify-content-between">
                <div>
                    <h4 class="fw-bold">@attVM.Category</h4>
                    <p>@attVM.Title - @attVM.Date.ToString("MMM dd, yyyy")</p>
                </div>
            </div>

            <div class="d-flex justify-content-between mt-2">
                <div class="d-flex gap-4 mt-3">
                    <div class="d-flex gap-1">
                        <h5 @onclick="ToggleMembers" class="fw-bold cursor @(isVisitor ? "t" : "")">Members</h5>
                        <p class="@(isVisitor ? "t" : "")">(@attendanceMemberRecordsList.Count)</p>
                    </div>

                    <div class="d-flex gap-1">
                        <h5 @onclick="ToggleMembers" class="fw-bold cursor @(isVisitor ? "" : "t")">Visitors</h5>
                        <p class="@(isVisitor ? "" : "t")">(@attendanceVisitorList.Count)</p>
                    </div>
                </div>
            </div>

            <!--Members List-->
            <div hidden="@(isVisitor)" class="table-container mt-2">
                <p><em>@memberMessage</em></p>
                <table class="table">
                    <thead>
                        <tr>
                            <th class="thead" style="width: 100%;">Name</th>
                            <th class="thead" style="width: 100%;">Present</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in attendanceMemberRecordsList)
                        {
                            <tr>
                                <td class="table-cell">@item.FullName</td>
                                <td class="table-cell">@(item.IsPresent ? "Present" : "Absent")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!--Visitors List-->
            <div hidden="@(!isVisitor)" class="table-container mt-2">
                <p><em>@visitorsMessage</em></p>
                <table class="table">
                    <thead>
                        <tr>
                            <th class="thead" style="width: 100%;">Name</th>
                            <th class="thead" style="width: 100%;">Invited By</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in attendanceVisitorList)
                        {
                            <tr>
                                <td class="table-cell">@item.FullName</td>
                                <td class="table-cell">@item.InvitedByFullName</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <!--Confirm Modal-->
        <div @onclick:stopPropagation hidden="@(!isConfirmModal)" class="helperModal">
            <div class="confirm">
                <h1>@confirmTitle</h1>
                <p>@confirmMessage</p>
            </div>

            <div class="@(isUpdating ? "updating" : "dnone")">
                <p>@updatingMessage</p>
            </div>


            @if (confirmType == "update")
            {
                <div class="actions">
                    <button disabled="@(isUpdating)" class="btn p-2 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                    <button disabled="@(isUpdating)" class="btn btn-primary text-white p-2 fs-5" @onclick="UpdateAttendance" style="font-size: 13px; border: 1px solid #dee2e6;">Confirm</button>
                </div>
            }
        </div>
    </div>

    <!--Header Section-->
    <div class="header mb-4">
        <div class="d-flex justify-content-between align-items-start w-100">
            <div>
                <h4 class="m-0 fw-bold">@DepName Attendance Tracking</h4>
                <p class="m-0 c2" style="font-size: 14px">Tracks and manage attendance</p>
            </div>

            <button @onclick="GoToAttendanceReportPage" class="btn btn-primary text-white px-4 py-2 text-nowrap">Generate Report</button>
        </div>
    </div>

    <!--Table Section-->
    <div class="mt-4 mb-3 cards">

        <div class="d-flex gap-2 mb-2 w-100 align-items-center">
            <!--Search Section-->
            <div class="position-relative d-flex flex-grow-1">
                <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                <input @bind="@searchString" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search records..." />
            </div>

            <div class="d-flex gap-2 align-items-center ms-2">
                <p class="me-2 text-nowrap">Filter by:</p>
                <select value="@status" @onchange="OnFilterChange" class="form-select p-2 px-4">
                    @* <option value="Upcoming">Upcoming</option> *@
                    <option value="Ongoing">Ongoing</option>
                    <option value="Complete">Complete</option>
                </select>

                @* <button class="btn btn-primary text-white px-4 py-2">Filter</button> *@

            </div>
        </div>


        <p><em>@message</em></p>

        @if (_schedule != null)
        {
            <div class="table-container">
                <table class="table">
                    <thead>
                        <tr>
                            <th class="thead">Date</th>
                            <th class="thead">Type</th>
                            <th class="thead">Title</th>
                            <th class="thead">Status</th>
                            <th class="thead">Actions</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in filteredJoinedList)
                        {
                            
                            <tr class="table-row cursor">
                                <td class="table-cell" style="font-weight:500;">@item.Date.ToString("MMM dd, yyyy")</td>
                                <td class="table-cell c2">@item.Category</td>
                                <td class="table-cell c2">@item.Title</td>
                                <td class="table-cell c2"><p class="fw-bold @(item.isCompleted ? "text-success" : "text-danger")">@(item.isCompleted ? "Complete" : "Missing")</p></td>
                                <td @onclick="() => OpenAttendance(item.AttendanceId)" @onclick:stopPropagation class="table-cell d-flex gap-2 hover" style="padding: 24px 24px; border-bottom: none; width: auto;">View</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }

    </div>
   
</div>

@code {
    //Variables
    private string searchString = string.Empty;
    DateOnly dateTo = DateOnly.FromDateTime(DateTime.Now);
    DateOnly dateFrom = DateOnly.FromDateTime(DateTime.Now).AddMonths(-3);
    private string message = string.Empty;
    private string memberSearch = string.Empty;
    DateOnly attDate = DateOnly.FromDateTime(DateTime.Now);
    private AttendanceMemberRecord attendanceMember { get; set; } = new();
    private string schedId = string.Empty;
    private AttendanceScheduleVM attVM = new();
    private string memberMessage = string.Empty;
    private string visitorsMessage = string.Empty;
    private string visitorsSearch = string.Empty;
    private string visitorMessage = string.Empty;
    private string DepName = string.Empty;
    private string status = "Ongoing";

    private bool isUpdating = false;
    private string confirmType = string.Empty;
    private string confirmTitle = string.Empty;
    private string confirmMessage = string.Empty;
    private string updatingMessage = string.Empty;
    private string data = string.Empty;
    private bool isConfirmModal = false;

    //Models
    private Schedule sched = new();
    private Visitor visitor { get; set; } = new();

    //List
    private List<Schedule> scheduleList = new();
    private List<GroupMemberSelection> groupMemberList = new();
    private IEnumerable<GroupMemberSelection> filteredMember => groupMemberList.Where(u => string.IsNullOrWhiteSpace(memberSearch) || u.Member.GetFullName().Contains(memberSearch, StringComparison.OrdinalIgnoreCase));
    private List<Visitor> localvisitList = new();
    private List<VisitorSelection> visitorsList = new();
    private List<VisitorsInfo> attendanceVisitorList = new();
    private List<AttendanceWithMember> attendanceMemberRecordsList = new();
    private List<AttendanceScheduleVM> joinedList = new();
    private IEnumerable<AttendanceScheduleVM> filteredJoinedList => joinedList.Where(u => string.IsNullOrWhiteSpace(searchString) || u.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase) || u.Category.Contains(searchString, StringComparison.OrdinalIgnoreCase) || u.Date.ToString("MMM dd, yyyy").Contains(searchString, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<VisitorSelection> filteredVisitor => visitorsList.Where(u => string.IsNullOrWhiteSpace(visitorsSearch) || u.Visitor.GetFullName().Contains(visitorsSearch, StringComparison.OrdinalIgnoreCase));
    private string attId = string.Empty;


    //Modal
    private bool BackgroundModal = false;
    private bool isInviteVisible = false;
    private bool isAttendanceVisible = false;
    private bool isEditMode = false;
    private bool isLoadingModal = false;

    //Visitor
    private bool isVisitor = false;

    //On initialized
    protected override async Task OnInitializedAsync()
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        if (_auth.Department != null)
        {
            DepName = _auth.Department;
        }
        await GetOngoingSchedules();
    }

    //show cofirm modal
    //SHow Confirm
    private void showConfirm(string type, string info)
    {
        confirmType = type;
        ToggleModal();
        isConfirmModal = true;
        data = info;
        switch (type)
        {
            case "update":
                ToggleModal();
                isConfirmModal = true;
                confirmTitle = "Confirm Action";
                confirmMessage = "You are about to add attendance. This action cannot be undone.";
                updatingMessage = "Adding attendance...";
                break;
            case "disable":
                confirmTitle = "Confirm Disable";
                confirmMessage = "You are about to disable a user";
                updatingMessage = "Disabling user...";
                break;
        }

    }

    //Navigate to Attendance Report Page
    private void GoToAttendanceReportPage()
    {
        _nav.NavigateTo($"/attendance/department-report");
    }

    //GetVisitors List
    private async Task GetVisitors()
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }


        var result = await _visitorsService.GetVisitorsAsync();

        if (result.Success)
        {
            var visitors = result.Data;

            var vm = visitors.Select(u => new VisitorSelection
            {
                isSelected = false,
                Visitor = u
            });

            visitorsList = vm.ToList();
        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Failed to get visitors.");
        }
    }

    //View Schedule
    private async Task OpenEdit(string Id)
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        var m = joinedList.FirstOrDefault(u => u.AttendanceId == Id);

        if (m != null)
        {
            attVM = m;
        }

        var result = await _attendanceMemberRecordService.GetAttendanceRecordByAttendanceId(Id);

        if (result.Success)
        {
            var attMemList = result.Data;

            var membersResult = await _memberService.GetMembersAsync();
            if (membersResult.Success)
            {
                var members = membersResult.Data;

                attendanceMemberRecordsList = attMemList.Join(members, a => a.MemberId, m => m.Id, (a, m) => new AttendanceWithMember
                {
                    AttendanceId = a.AttendanceId,
                    FullName = m.GetFullName(),
                    IsPresent = a.IsPresent,
                }).ToList();
            }
        }

        var results = await _attendanceVisitorRecordService.GetAttendanceVisitorByAttendanceIdAsync(Id);
        var test = await _memberService.GetMembersAsync();

        if (results.Success)
        {
            var memResult = await _visitorsService.GetVisitorsAsync();

            if (memResult.Success)
            {
                var members = memResult.Data;

                attendanceVisitorList = (from av in results.Data
                                         where av.AttendanceId == Id
                                         join v in members on av.VisitorId equals v.Id
                                         join t in test.Data on av.InvitedByMemberId equals t.Id into gj
                                         from invitedBy in gj.DefaultIfEmpty() // left join (in case null)
                                         select new VisitorsInfo
                                         {
                                             FullName = v.GetFullName(),
                                             InvitedByFullName = invitedBy != null ? invitedBy.GetFullName() : "N/A",
                                             AttendanceVisitor = av
                                         }).ToList();


            }
        }

        if (attendanceVisitorList.Count == 0)
        {
            visitorsMessage = "There are no visitors during this time";
        }
        else
        {
            visitorsMessage = string.Empty;
        }
        isLoadingModal = false;
        isAttendanceVisible = false;
        isEditMode = true;
    }

    //Update attendanceMember and schedule
    private async Task UpdateAttendance()
    {
        isUpdating = true;

        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            ToggleModal();
            return;
        }

        isUpdating = true;

        var updateSchedAttendance = await _schedule.UpdateScheduleAttendance(attVM.ScheduleId, true);
        if (updateSchedAttendance.Success)
        {
            int totalVisitor = 0;
            if (localvisitList.Any())
            {
                totalVisitor = localvisitList.Count;
            }

            if (visitorsList.Any())
            {
                totalVisitor += visitorsList.Count(u => u.isSelected);
            }

            int totalPresent = groupMemberList.Where(u => u.isSelected).Count();
            int totalAbsent = attVM.TotalAttendee - totalPresent;
            var updateAttendanceStatus = await _attendanceService.UpdateAttendanceStatusAsync(attVM.AttendanceId, true, totalVisitor, totalPresent, totalAbsent);
            if (updateAttendanceStatus.Success)
            {
                @foreach (var item in groupMemberList)
                {

                    var attMemRes = await _attendanceMemberRecordService.UpdateAttendanceMemberByAttendanceId(attVM.AttendanceId,item.Member.Id, item.isSelected);
                }

                string visitId = string.Empty;

                @foreach (var item in localvisitList)
                {
                    var results = await _visitorsService.AddVisitorAsync(item);
                    visitId = results.Id;

                    var a = new AttendanceVisitor { AttendanceId = attVM.AttendanceId, InvitedByMemberId = item.InvitedByMemberId, IsPresent = true, VisitorId = visitId };
                    var addAttVisit = await _attendanceVisitorRecordService.AddAttendanceVisitorRecordAsync(a);
                }

                if (visitorsList.Any())
                {
                    var visitorsToAdd = visitorsList.Where(u => u.isSelected).ToList();

                    @foreach (var item in visitorsToAdd)
                    {
                        var b = new AttendanceVisitor { AttendanceId = attVM.AttendanceId, IsPresent = true, InvitedByMemberId = string.Empty, VisitorId = item.Visitor.Id };
                        var addAttendanceMemberResult = await _attendanceVisitorRecordService.AddAttendanceVisitorRecordAsync(b);
                    }
                }

                _toast.AddNotification("success", "Success", "Successfully add attendance.");
                ToggleModal();
                await GetOngoingSchedules();
            }
            else
            {
                _toast.AddNotification("error", "Something went wrong", "Failed to add attendance.");
                ToggleModal();
                await GetOngoingSchedules();
            }
        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Please try again later.");
            ToggleModal();
            await GetOngoingSchedules();
        } 
    }

    //Open Attendance page
    private async Task OpenAttendance(string Id)
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        // isLoadingModal = true;
        var attRes = await _attendanceService.GetAttendanceByIdAsync(Id);
        if (attRes.Success)
        {
            ToggleModal();
            if (attRes.Attendance != null)
            {
                if (attRes.Attendance.isCompleted)
                {
                    attId = attRes.Attendance.Id;
                    await OpenEdit(attRes.Attendance.Id);
                }
                else
                {
                    var groupMemResult = await _attendanceMemberRecordService.GetAttendanceRecordByAttendanceId(attRes.Attendance.Id);
                    if (groupMemResult.Success)
                    {

                        var members = await _memberService.GetMembersAsync();
                        if (members.Success)
                        {
                            var groupMemIds = groupMemResult.Data.Select(u => u.MemberId).ToHashSet();
                            var Members = members.Data.Where(u => groupMemIds.Contains(u.Id)).ToList();
                            groupMemberList = Members.Select(u => new GroupMemberSelection
                            {
                                isSelected = true,
                                Member = u
                            }).ToList();

                            await GetVisitors();
                            isLoadingModal = false;
                            attVM = new();
                            attVM = new AttendanceScheduleVM
                            {
                                AttendanceId = attRes.Attendance.Id,
                                ScheduleId = attRes.Attendance.ScheduleId,
                                TotalAttendee = attRes.Attendance.TotalAttendee,
                            };
                            isAttendanceVisible = true;
                        }
                        else
                        {
                            _toast.AddNotification("error", "Something went wrong", "Please try again later.");
                            ToggleModal();
                        }
                    }
                    else
                    {
                        _toast.AddNotification("error", "Something went wrong", "Please try again later.");
                        ToggleModal();
                    }
                }


            }
            else
            {
                _toast.AddNotification("error", "Something went wrong", "Please try again later.");
                ToggleModal();
            }
        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Please try again later.");
            ToggleModal();
        }

    }

    //Save to local list
    private void SaveToVistorsList()
    {
        localvisitList.Add(visitor);
        isInviteVisible = false;
    }

    //Toggle Add Invite
    private void ToggleInviteModal(string Id, DateOnly date)
    {
        visitor = new();
        isInviteVisible = true;

        visitor.InvitedByMemberId = Id;
        visitor.FirstVisitDate = date;
    }

    //Remove from local list
    private void RemoveFromVisitorsList(Visitor visitor)
    {
        localvisitList.Remove(visitor);
    }

    //Handle Time checkboxes
    private void OnCheckChange(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;

        foreach (var item in groupMemberList)
        {
            item.isSelected = isChecked;
        }

    }

    //Hide invite modal
    private void HideInviteModal()
    {
        isInviteVisible = false;
    }

    //Toggal Background Modal
    private void ToggleModal()
    {
        BackgroundModal = !BackgroundModal;
        isInviteVisible = false;
        isAttendanceVisible = false;
        isEditMode = false;
        isVisitor = false;
        isLoadingModal = false;
        isUpdating = false;
        isConfirmModal = false;

    }

    //Toggle Member
    private void ToggleMembers()
    {
        isVisitor = !isVisitor;
    }

    //Get Schedules by status
    private async Task OnFilterChange(ChangeEventArgs e)
    {
        joinedList.Clear();
        string value = e.Value!.ToString()!;

        switch (value)
        {
            //Get Upcoming
            case "Upcoming":
                await GetUpcomingSchedules();
                break;

            //Get Upcoming
            case "Ongoing":
                await GetOngoingSchedules();
                break;

            //Get Upcoming
            case "Complete":
                await GetCompletedSchedules();
                break;
        }
    }

    //Get Upcoming list of schedules
    private async Task GetUpcomingSchedules()
    {
        message = "Fetching files...Please wait";

        var result = await _schedule.GetUpcomingSchedules();

        if (result.Success)
        {
            scheduleList = result.Data.Where(u => u.HasAttendee).ToList();
            message = string.Empty;
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to fetch schedules: " + result.Error);
            message = "No schedules found.";
        }
    }

    // Get Upcoming list of schedules
    private async Task GetOngoingSchedules()
    {
        message = "Fetching files...Please wait";
        status = "Ongoing";

        var results = await _attendanceService.GetOngoingAttendanceByDepartmentAsync(DepName);
        if (results.Success)
        {
            if (!string.IsNullOrEmpty(results.Error))
            {
                message = results.Error;
                return;
            }
            var ids = results.Data.Select(u => u.ScheduleId).ToHashSet();

            var scheduleResult = await _schedule.GetScheduleAsync();
            if (scheduleResult.Success)
            {
                scheduleList = scheduleResult.Data.Where(u => ids.Contains(u.Id)).ToList();
                var attList = results.Data;
                joinedList = scheduleList.Join(attList, s => s.Id, a => a.ScheduleId, (s, a) => new AttendanceScheduleVM
                {
                    AttendanceId = a.Id,
                    ScheduleId = s.Id,
                    Department = s.DepartmentId,
                    Date = a.Date,
                    Title = s.Title,
                    TotalAttendee = a.TotalAttendee,
                    Category = s.CategoryId, 
                    isCompleted = a.isCompleted
                }).ToList();
                message = string.Empty;
            }
            else
            {
                _toast.AddNotification("error", "Something went wrong", "Please try again later.");
                message = "No schedules found.";
            }

        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Please try again later.");
            //     message = "No schedules found.";
        }
    }


    // Get Upcoming list of schedules
    private async Task GetCompletedSchedules()
    {
        message = "Fetching files...Please wait";

        var result = await _schedule.GetCompletedSchedules();

        if (result.Success)
        {
            if (result.Data != null)
            {
                if (!string.IsNullOrEmpty(result.Error))
                {
                    message = result.Error;
                    return;
                }
                scheduleList = result.Data.Where(u => u.HasAttendee).ToList();
                var results = await _attendanceService.GetCompletedAttendanceByDepartmentAsync(DepName);
                if (results.Success)
                {
                    if (results.Data != null)
                    {
                        var attList = results.Data;
                        joinedList = scheduleList.Join(attList, s => s.Id, a => a.ScheduleId, (s, a) => new AttendanceScheduleVM
                        {
                            AttendanceId = a.Id,
                            ScheduleId = s.Id,
                            Date = a.Date,
                            Title = s.Title,
                            TotalAttendee = a.TotalAttendee,
                            Category = s.CategoryId,
                            isCompleted = a.isCompleted
                        }).ToList();

                        message = string.Empty;
                    }
                    else
                    {

                        message = "No data found";
                    }

                }
                else
                {
                    _toast.AddNotification("error", "Something went wrong", "Please try again later.");
                }
            }
            else
            {
                message = "No data found";
            }

        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Please try again later.");
            message = "Failed to fetch files.";
        }
    }

    //Select visitors
    private void OnCheckChanges(ChangeEventArgs e)
    {
        bool isChecked = (bool)e.Value!;

        foreach (var item in visitorsList)
        {
            item.isSelected = isChecked;
        }
    }

    private class GroupMemberSelection
    {
        public bool isSelected { get; set; }
        public Member Member { get; set; }
    }

    private class VisitorSelection
    {
        public bool isSelected { get; set; }
        public Visitor Visitor { get; set; }
    }

    public class AttendanceScheduleVM
    {
        public string AttendanceId { get; set; }
        public string ScheduleId { get; set; }
        public string Department { get; set; }
        public DateOnly Date { get; set; }
        public int TotalAttendee { get; set; }
        public string Category { get; set; }
        public string Title { get; set; }
        public bool isCompleted { get; set; }
    }

    public class AttendanceWithMember
    {
        public string AttendanceId { get; set; }
        public string MemberId { get; set; }
        public bool IsPresent { get; set; }

        public string FullName { get; set; }
        public string Contact { get; set; }
        public string Gender { get; set; }
    }

    public class VisitorsInfo
    {
        public string FullName { get; set; }
        public string InvitedByFullName { get; set; }
        public AttendanceVisitor AttendanceVisitor { get; set; }
    }
}