@page "/addSong"
@layout LandingLayout
@inject IJSRuntime _js
@inject GospelReachCapstone.Services.MusicService _musicService
@inject GospelReachCapstone.Services.ChordsFormatterService _chordsFormatterService
@using GospelReachCapstone.Models
@inject NavigationManager _nav
@using System.Globalization
@inject ToastService _toast

<div class="sub-page">
    <!--Background Modal-->
    <div @onclick="ToggleModal" class="bgModal @(!isBackgroundModalVisible ? "" : "showModal")">
        <!--Confirm Modal-->
        <div @onclick:stopPropagation class="helperModal">
            <div class="confirm">
                <h1>Confirm Add</h1>
                <p>You are about to add this song</p>
            </div>

            <div class="@(isUpdating ? "updating" : "dnone")">
                <p>Saving song...</p>
            </div>

            @if (isTransposeShow)
            {
                <div class="actions">
                    <button disabled="@(isUpdating)" class="btn p-2 px-5 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                    <button disabled="@(isUpdating)" class="btn btn-primary text-white p-2 px-5 fs-5" @onclick="SaveToFirestore2" style="font-size: 13px; border: 1px solid #dee2e6;">Add</button>
                </div>
            }
            else
            {
                <div class="actions">
                    <button disabled="@(isUpdating)" class="btn p-2 px-5 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                    <button disabled="@(isUpdating)" class="btn btn-primary text-white p-2 px-5 fs-5" @onclick="SaveToFirestore" style="font-size: 13px; border: 1px solid #dee2e6;">Add</button>
                </div>
            }


        </div>
    </div>

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-5">
        <div>
            <h4 class="m-0 fw-bold">Create Lyrics and Chords</h4>
            <p class="m-0 c2" style="font-size: 14px">Create and manage worship lyrics and chords</p>
        </div>

        <div>
            <a href="music" class="btn btn-danger p-2 px-4 text-white link w-100">Return</a>
        </div>
    </div>

    <div class="mt-3 @(isAdding ? "d-flex" : "d-none") align-items-center justify-content-center">
        <p>Saving record.Please wait...</p>


        <div class="d-flex gap-4 align-items-center justify-content-center mt-2 mb-3">
            <img src="/img/loading.svg" style="height:50px; width: 50px;" />
        </div>
    </div>
    <!--Music Section-->
    <div class="music">
        <div class="userFields">
            <div class="input">
                <p>Song Title</p>
                <input @bind="song.Title" type="text" class="form-control p-2 mt-2" placeholder="Title"/>
            </div>

            <div class="input">
                <p>Artist</p>
                <input @bind="song.Artist" type="text" class="form-control p-2 mt-2" placeholder="Artist"/>
            </div>
        </div>

        @if (validation.Any())
        {
            <div class="d-flex flex-column justify-content-between mt-3">
                @foreach (string a in validation)
                {
                    <p class="text-danger">@a</p>
                }
            </div>
        }

        <div class="input mt-3 @(isTransposeShow ? "hide" : "")">
            <div class="sub-input">
                <p>Input Lyrics and Chords</p>

                <div class="d-flex gap-2">
                    <button disabled="@(string.IsNullOrEmpty(lyricsAndChords))" @onclick="ToggleTransposeView" class="btns" style="background-color:  @(string.IsNullOrWhiteSpace(lyricsAndChords) ? "gainsboro" : "")">Transpose</button>
                    <button @onclick="AutoBracket" class="btns">Auto Bracket</button>
                    <button @onclick="RemoveBracket" class="btns">Remove Brackets</button>
                    <button @onclick="checkValidation" class="btns save">Save</button>
                </div>
            </div>
            <textarea spellcheck="false" @ref="inputTextArea" @bind="lyricsAndChords" @oninput="ResizeTextArea" type="text" class="form-control p-2 mt-2" placeholder="Type or paste you chords and lyrics here" />
        </div>
        <div class="input mt-3 @(isTransposeShow ? "" : "hide")">
            <div class="sub-input">
                <div class="d-flex align-items-center gap-2">
                    <p>Transpose Chords</p>
                    <button @onclick="ToggleTransposeView" type="button" class="btns back">Back</button>
                </div>
                    

                <div class="d-flex align-items-center  gap-2">
                    <p>Transpose: @(transposeStep > 0 ? $"+{transposeStep}" : transposeStep)</p>
                    <button @onclick="StepDown" class="btns"> - </button>
                    <button @onclick="StepUp" class="btns"> + </button>
                    <button @onclick="ToggleBracketlessView" class="btns">Preview without brackets</button>
                    <button @onclick="checkValidation2" class="btns save">Save</button>
                </div>
            </div>
            <textarea readonly style="background-color: #FFFFFF;" value="@transposedOutput" @ref="outputTextArea" type="text" class="form-control p-2 mt-2" placeholder="Type or paste you chords and lyrics here" />
        </div>
    </div>
</div>

<PageTitle>Add Song</PageTitle>

@code {
    ElementReference inputTextArea;
    ElementReference outputTextArea;
    private string lyricsAndChords = "";
    private bool showBracketlessPreview = false;
    private int transposeStep = 0;
    private string transposedOutput = "";
    private bool isTransposeShow = false;
    private Song song = new();
    private List<string> validation = new();
    private bool isAdding = false;
    TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;

    //Modal
    private bool isBackgroundModalVisible = false;
    private bool isUpdating = false;

    private void ToggleTransposeView()
    {
        isTransposeShow = !isTransposeShow;
        TransposeChords();
    }

    private void ToggleModal()
    {
        isBackgroundModalVisible = !isBackgroundModalVisible;
        isUpdating = false;
    }

    private void Processed()
    {
        transposedOutput = lyricsAndChords;
        TransposeChords();
    }

    private async Task ResizeTextArea()
    {
        try
        {
            await _musicService.ResizeTextArea(inputTextArea, outputTextArea);
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    //Add Bracket to the chords
    private void AutoBracket()
    {
        lyricsAndChords = _chordsFormatterService.BracketChords(lyricsAndChords);
    }

    //Removes Bracket to the chords
    private void RemoveBracket()
    {
        lyricsAndChords = _chordsFormatterService.RemoveBrackets(lyricsAndChords);
    }

    //makes the chords transposable
    private void TransposeChords()
    {
        transposedOutput = _chordsFormatterService.TransposeAll(lyricsAndChords,transposeStep,showBracketlessPreview);
    }

    //Make the Key higher
    private void StepUp()
    {
        transposeStep++;
        TransposeChords();
    }

    //Make the key lower
    private void StepDown()
    {
        transposeStep--;
        TransposeChords();
    }

    //Show without brackets view
    private void ToggleBracketlessView()
    {
        showBracketlessPreview = !showBracketlessPreview;
        transposedOutput = _chordsFormatterService.TransposeAll(lyricsAndChords, transposeStep, showBracketlessPreview);
    }

    //Check Validation
    private void checkValidation()
    {
        validation.Clear();

        if (string.IsNullOrEmpty(song.Title))
        {
            validation.Add("-Title is required");
        }

        if (string.IsNullOrEmpty(song.Artist))
        {
            song.Artist = "N/A";
        }

        if (string.IsNullOrEmpty(lyricsAndChords))
        {
            validation.Add("-Input is required");
        }

        if (validation.Any())
        {
            isAdding = false;
            return;
        }

        ToggleModal();
    }

    //Check Validation
    private void checkValidation2()
    {
        validation.Clear();

        if (string.IsNullOrEmpty(song.Title))
        {
            validation.Add("-Title is required");
        }

        if (string.IsNullOrEmpty(song.Artist))
        {
            song.Artist = "N/A";
        }

        if (string.IsNullOrEmpty(lyricsAndChords))
        {
            validation.Add("-Input is required");
        }

        if (validation.Any())
        {
            isAdding = false;
            return;
        }

        ToggleModal();
    }


    //Save to Firestore
    private async Task SaveToFirestore()
    {
        isUpdating = true;
        
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            ToggleModal();
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        song.Title = textInfo.ToTitleCase(song.Title);
        song.LyricsAndChords = lyricsAndChords;

        var songRes = await _musicService.AddSongAsync(song);
        if (songRes.Success)
        {
            ToggleModal();
            _toast.AddNotification("success", "Success", "Successfully added the song");
            _nav.NavigateTo("/music");
        }
        else
        {
            ToggleModal();
            _toast.AddNotification("error", "Something went wrong", "Please try again later.");    
        }
    }

    private async Task SaveToFirestore2()
    {
        isUpdating = true;

        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            ToggleModal();
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        song.Title = textInfo.ToTitleCase(song.Title);
        song.LyricsAndChords = transposedOutput;
        var songRes = await _musicService.AddSongAsync(song);
        if (songRes.Success)
        {
            ToggleModal();
            _toast.AddNotification("success", "Success", "Successfully added the song");
            _nav.NavigateTo("/music");
        }
        else
        {
            ToggleModal();
            _toast.AddNotification("error", "Something went wrong", "Please try again later.");
        }
    }
}
