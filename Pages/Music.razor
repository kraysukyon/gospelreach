@page "/music"
@layout LandingLayout
@using GospelReachCapstone.Models
@inject IJSRuntime _js
@inject GospelReachCapstone.Services.MusicService _musicService
@inject GospelReachCapstone.Services.AuthState _auth
@inject NavigationManager _nav
@inject ToastService _toast

<PageTitle>Music</PageTitle>


<div class="page">
    <!--Background Modal-->
    <div @onclick="ToggleModal" class="bgModal @(!isBackgroundModalVisible ? "" : "showModal")">
        <!--Confirm Modal-->
        <div @onclick:stopPropagation class="helperModal">
            <div class="confirm">
                <h1>Confirm Delete</h1>
                <p>You are about to remove this song</p>
            </div>

            <div class="@(isUpdating ? "updating" : "dnone")">
                <p>Removing song...</p>
            </div>


            <div class="actions">
                <button disabled="@(isUpdating)" class="btn p-2 px-5 fs-5" @onclick="ToggleModal" style="font-size: 13px; border: 1px solid #C7C7C7;">Cancel</button>
                <button disabled="@(isUpdating)" class="btn btn-danger text-white p-2 px-5 fs-5" @onclick="DeleteSong" style="font-size: 13px; border: 1px solid #dee2e6;">Delete</button>
            </div>

        </div>
    </div>

    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-4">
        <div>
            <h4 class="m-0 fw-bold">Music Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Organize and manage worship music and audio files.</p>
        </div>

        <div class="@(_auth.Role == "Guest" ? "d-none" : "")">
            <a href="addSong" class="btn btn-primary p-2 text-white link w-100">Add Lyrics & Chords</a>
        </div>
    </div>


    <!--Table Section-->
    <div class="card w-100 mb-3 cards">
        <div class="position-relative">
            <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
            <input @bind="searchSong" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search title, artist..." />
        </div>
        
        <div class="table-container">
            <table class="table" style="table-layout:fixed;">
                <thead>
                    <tr>
                        <th class="thead">Title</th>
                        <th class="thead">Artist</th>
                        <th class="thead">Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var items in FilteredSong)
                    {
                        <tr @onclick="(() => ViewSong(items.Id))" @onclick:stopPropagation>
                            <td class="table-cell" style="font-weight:500;">@items.Title</td>
                            <td class="table-cell c2">@items.Artist</td>
                            <td class="table-cell d-flex gap-2">
                                <button class="btn p-2 px-4" @onclick:stopPropagation @onclick="(() => getSongToDownload(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Download"><i class="bi bi-download fs-6"></i></button>
                                <button class="btn p-2 px-4" @onclick:stopPropagation @onclick="(() => getSongToPrint(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Print"><i class="bi bi-printer text-black fs-6"></i></button>
                                <button class="btn p-2 px-4 @(_auth.Role == "Guest" ? "d-none" : "")" @onclick:stopPropagation @onclick="(() => GotoEditPage(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Update"><i class="bi bi-pencil-square fs-6"></i></button>
                                <button class="btn p-2 px-4 @(_auth.Role == "Guest" ? "d-none" : "")" @onclick:stopPropagation @onclick="(() => ToggleDelete(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Delete"><i class="bi bi-trash text-danger fs-6"></i></button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code{
    //Data
    private string data = string.Empty;
    private List<Song> songList = new();
    private Song song = new();
    private string searchSong = string.Empty;
    private IEnumerable<Song> FilteredSong => songList.Where(u => string.IsNullOrWhiteSpace(searchSong) || u.Title.Contains(searchSong, StringComparison.OrdinalIgnoreCase) || u.Artist.Contains(searchSong, StringComparison.OrdinalIgnoreCase)).ToList();

    //Modal
    private bool isBackgroundModalVisible = false;
    private bool isUpdating = false;

    protected override async Task OnInitializedAsync()
    {
        await getSongList();
    }

    private void ToggleModal()
    {
        isBackgroundModalVisible = !isBackgroundModalVisible;
        isUpdating = false;
    }

    private void ToggleDelete(string id)
    {
        ToggleModal();
        data = id;
    }


    private async Task getSongList()
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        songList = new();
        var result = await _musicService.GetSongsAsync();
        if (result.Success)
        {
            if (result.Data != null)
            {
                songList = result.Data;
                songList = songList.OrderByDescending(u => u.Title).ToList();
            }
        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Failed to get song list");
        }
    }

    private async Task GotoEditPage(string docId)
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        var result = await _musicService.GetSongById(docId);
        if (result.Success)
        {
            if (result.Song != null)
            {
                _nav.NavigateTo($"/editSong/{result.Song.Id}");
            }
            else
            {
                _toast.AddNotification("error", "Failed to get song", "Song not found");
                await getSongList();
            }
        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Please try again");
        }
    }

    private async Task DeleteSong()
    {
        isUpdating = true;

        var songRes = await _musicService.DeleteSongAsync(data);
        if (songRes.Success)
        {
            ToggleModal();
            _toast.AddNotification("success", "Success", "Successfully remove song");
            await getSongList();
        }
        else
        {
            ToggleModal();
            await getSongList();
            _toast.AddNotification("error", "Something went wrong", "Failed to remove song");
        }
    }

    private async Task ViewSong(string docId)
    {
        bool isOnline = await _js.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        var result = await _musicService.GetSongById(docId);
        if (result.Success)
        {
            if (result.Song != null)
            {
                _nav.NavigateTo($"/viewSong/{result.Song.Id}");
            }
            else
            {
                _toast.AddNotification("error", "Failed to get song", "Song not found");
                await getSongList();
            }
        }
        else
        {
            _toast.AddNotification("error", "Something went wrong", "Please try again");
        }
    }

    private async Task getSongToPrint(string Id)
    {
        var printSong = songList.FirstOrDefault(u => u.Id == Id);

        if (printSong != null)
        {
            song = printSong;
            await PrintOutput();
        }
    }

    private async Task getSongToDownload(string Id)
    {
        var downloadSong = songList.FirstOrDefault(u => u.Id == Id);

        if (downloadSong != null)
        {
            song = downloadSong;
            await DownloadAsPdf();
        }
    }

    private async Task PrintOutput()
    {
        if (!string.IsNullOrWhiteSpace(song.LyricsAndChords))
        {
            string fullLyrics = $"{song.Title}\n{song.Artist}\n\n{song.LyricsAndChords}";
            string safeHtml = System.Net.WebUtility.HtmlEncode(fullLyrics);
            await _js.InvokeVoidAsync("printLyrics", safeHtml);
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "No Output");
        }
    }

    private async Task DownloadAsPdf()
    {
        string fullLyrics = $"{song.Title}\n{song.Artist}\n\n{song.LyricsAndChords}";
        await _js.InvokeVoidAsync("downloadPdf", fullLyrics, song.Title);
    }
}