@page "/music"
@layout LandingLayout
@using GospelReachCapstone.Models
@inject IJSRuntime _js
@inject GospelReachCapstone.Services.MusicService _musicService
@inject NavigationManager _nav

<PageTitle>Music</PageTitle>


<div class="page">
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-4">
        <div>
            <h4 class="m-0 fw-bold">Music Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Organize and manage worship music and audio files.</p>
        </div>

        <div>
            <a href="addSong" class="btn btn-primary p-2 text-white link w-100">Add Music</a>
        </div>
    </div>


    <!--Table Section-->
    <div class="card w-100 mb-3 cards">
        <div class="position-relative flex-grow-1">
            <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
            <input @bind="searchSong" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search by title, artist or album..." />
        </div>
        
        <div class="table-container">
            <table class="table" style="table-layout:fixed;">
                <thead>
                    <tr>
                        <th class="thead">Title</th>
                        <th class="thead">Artist</th>
                        <th class="thead">Actions</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var items in FilteredSong)
                    {
                        <tr @onclick="(() => ViewSong(items.Id))" @onclick:stopPropagation class="table-row">
                            <td class="table-cell" style="font-weight:500;">@items.Title</td>
                            <td class="table-cell c2">@items.Artist</td>
                            <td class="table-cell d-flex gap-2" style="padding: 24px 24px; border-bottom: none; width: auto;">
                                <!--Download-->
                                @* <div class="d-flex align-items-center justify-content-center gap-1w-auto border flex-grow-1" style="border-radius: 10px;">
                                    
                                </div> *@
                                <button class="btn p-2 px-4" @onclick:stopPropagation @onclick="(() => getSongToDownload(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Download"><i class="bi bi-download fs-6"></i></button>
                                <button class="btn p-2 px-4" @onclick:stopPropagation @onclick="(() => getSongToDownload(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Print"><i class="bi bi-printer text-black"></i></button>
                                <button class="btn p-2 px-4" @onclick:stopPropagation @onclick="(() => getSongToDownload(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Update"><i class="bi bi-pencil-square"></i></button>
                                <button class="btn p-2 px-4" @onclick:stopPropagation @onclick="(() => getSongToDownload(items.Id))" style="font-size: 13px; border: 1px solid #dee2e6;" title="Delete"><i class="bi bi-trash text-danger"></i></button>
                                @* <button @onclick:stopPropagation @onclick="(() => getSongToDownload(items.Id))" class="btn btn-outline-light border border-2 flex-grow-1" style="border-radius: 10px;font-size: 13px;"><span><i class="bi bi-download"></i></span></button> *@
                                <!--Print-->
                                @* <button @onclick:stopPropagation @onclick="(() => getSongToPrint(items.Id))" class="btn btn-outline-light border border-2 text-black flex-grow-1" style="border-radius: 10px; font-size:13px;"><span><i class="bi bi-printer text-black"></i></span></button> *@
                                <!--Update-->
                                @* <button @onclick:stopPropagation @onclick="(() => GotoEditPage(items.Id))" class="btn btn-outline-light border border-2 text-black flex-grow-1" style="border-radius: 10px; font-size:13px;"><span><i class="bi bi-pencil-square"></i></span></button> *@

                                <!--Delete-->
                                @* <button @onclick:stopPropagation @onclick="(() => DeleteSong(items.Id))" class="btn btn-danger text-white flex-grow-1" style="border-radius: 10px; font-size:13px;"><span><i class="bi bi-trash text-white"></i></span></button> *@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>


@code{
    private List<Song> songList = new();
    private Song song = new();
    private string searchSong = string.Empty;
    private IEnumerable<Song> FilteredSong => songList.Where(u => string.IsNullOrWhiteSpace(searchSong) || u.Title.Contains(searchSong, StringComparison.OrdinalIgnoreCase) || u.Artist.Contains(searchSong, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override async Task OnInitializedAsync()
    {
        await getSongList();
    }


    private async Task getSongList()
    {
        try
        {
            songList = new();
            songList = await _musicService.GetSongsAsync();
            if (songList != null)
            {
                songList = songList.OrderByDescending(u => u.Title).ToList();
            }
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task GotoEditPage(string docId)
    {
        // _nav.NavigateTo($"/editSong/{docId}");

        try
        {
            List<Song> list = new();
            list = await _musicService.GetSongsAsync();
            if (list != null)
            {
                var songId = list.FirstOrDefault(u => u.Id == docId);
                if (songId != null)
                {
                    _nav.NavigateTo($"/editSong/{songId.Id}");
                }
                else
                {
                    await _js.InvokeVoidAsync("alert", "Song not found.");
                }
            }
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task DeleteSong(string Id)
    {
        bool confirm = await _js.InvokeAsync<bool>("confirm", "Confirm Delete?");
        if (!confirm) return;

        try
        {
            await _musicService.DeleteSongAsync(Id);
            await _js.InvokeVoidAsync("alert", "Song Successfully deleted!");
            await getSongList();
        }
        catch(Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task ViewSong(string docId)
    {
        try
        {
            List<Song> list = new();
            list = await _musicService.GetSongsAsync();
            if (list != null)
            {
                var songId = list.FirstOrDefault(u => u.Id == docId);
                if (songId != null)
                {
                    _nav.NavigateTo($"/viewSong/{songId.Id}");
                }
                else
                {
                    await _js.InvokeVoidAsync("alert", "Song not found.");
                }
            }
        }
        catch (Exception ex)
        {
            await _js.InvokeVoidAsync("alert", ex.Message);
        }
    }

    private async Task getSongToPrint(string Id)
    {
        var printSong = songList.FirstOrDefault(u => u.Id == Id);

        if (printSong != null)
        {
            song = printSong;
            await PrintOutput();
        }
    }

    private async Task getSongToDownload(string Id)
    {
        var downloadSong = songList.FirstOrDefault(u => u.Id == Id);

        if (downloadSong != null)
        {
            song = downloadSong;
            await DownloadAsPdf();
        }
    }

    private async Task PrintOutput()
    {
        if (!string.IsNullOrWhiteSpace(song.LyricsAndChords))
        {
            string fullLyrics = $"{song.Title}\n{song.Artist}\n\n{song.LyricsAndChords}";
            string safeHtml = System.Net.WebUtility.HtmlEncode(fullLyrics);
            await _js.InvokeVoidAsync("printLyrics", safeHtml);
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "No Output");
        }
    }

    private async Task DownloadAsPdf()
    {
        string fullLyrics = $"{song.Title}\n{song.Artist}\n\n{song.LyricsAndChords}";
        await _js.InvokeVoidAsync("downloadPdf", fullLyrics, song.Title);
    }
}