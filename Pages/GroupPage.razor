@page "/notification"
@layout LandingLayout
@using GospelReachCapstone.Models
@inject GospelReachCapstone.Services.MemberService _memberService
@inject GospelReachCapstone.Services.AttendanceService _attendance
@inject IJSRuntime _js
@inject NavigationManager _nav
@inject GospelReachCapstone.Services.AppState _appState
@inject GospelReachCapstone.Services.GroupService _groupService
@inject GospelReachCapstone.Services.GroupMemberService _groupMemberService
@inject HttpClient Http

<PageTitle>Notification Management</PageTitle>


<div class="pages">
    <!--Modal for Adding Department Head-->
    <div @onclick="ToggleBackModal" class="addUserModal @(isAddDepartmentModalVisible ? "show" : "")">
        <div hidden="@(!isView)" class="addUser" @onclick:stopPropagation>
            
            <!--Add Group-->
            <div >
                <h4 class="fw-bold">
                    @title
                </h4>
                <p style="font-size:14px;">Create group and select members.</p>

                <div class="input mt-3">
                    <p>Group Name</p>
                    <div class="pword mt-2">
                        <input @bind="group.Name" type="text" placeholder="Enter group name" />
                    </div>
                </div>

                <!--Table Section-->

                <p class="mt-3">Select People</p>
                <!--Search Section-->
                <div class="position-relative mt-2">
                    <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                    <input type="text" @bind="memberSearch" @bind:event="oninput" class="form-control border search" placeholder="Search name..." />
                </div>


                <div class="table-container mt-2">
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="thead" style="width: auto; white-space: nowrap;"><input checked @onchange="ToggleCheckbox" type="checkbox" /></th>
                                <th class="thead" style="width: 100%;">Name</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in filteredMember)
                            {
                                <tr>
                                    <td class="table-cell" style="width: auto; white-space: nowrap;">
                                        <input @bind="item.isSelected" type="checkbox"/>
                                    </td>
                                    <td class="table-cell" style="width: 100%;">@item.Member.GetFullName()</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <button @onclick="AddGroupAndMembers" class="btn btn-primary p-2 text-white w-100 mt-3">Save</button>
            </div>


            
            
        </div>

        <!--Add Members to Group-->
        <div hidden="@(!isAddMemberVisible)" class="addMember" @onclick:stopPropagation>
            <!--Add Group-->
            <div hidden="@(isView)">
                <h4 class="fw-bold">
                    Add Member
                </h4>
                <p style="font-size:14px;">Create group and select members.</p>
                <!--Table Section-->

                <p class="mt-3">Select People</p>
                <!--Search Section-->
                <div class="position-relative mt-2">
                    <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                    <input type="text" @bind="memberSearch" @bind:event="oninput" class="form-control border search" placeholder="Search name..." />
                </div>


                <div class="table-container mt-2">
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="thead" style="width: auto; white-space: nowrap;"><input checked @onchange="ToggleCheckbox" type="checkbox" /></th>
                                <th class="thead" style="width: 100%;">Name</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in filteredMember)
                            {
                                <tr>
                                    <td class="table-cell" style="width: auto; white-space: nowrap;">
                                        <input @bind="item.isSelected" type="checkbox" />
                                    </td>
                                    <td class="table-cell" style="width: 100%;">@item.Member.GetFullName()</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <button @onclick="() => AddMembers(groupId)" class="btn btn-primary p-2 text-white w-100 mt-3">Save</button>
            </div>
        </div>
    </div>
    <!--Header Section-->
    <div class="header d-block d-md-flex flex-md-row align-items-center justify-content-between mb-3">
        <div>
            <h4 class="m-0 fw-bold">Group Management</h4>
            <p class="m-0 c2" style="font-size: 14px">Manage group and members</p>
        </div>
    </div>

    <div class="groupAndMembers">
        <div class="d-flex flex-grow-1">
            <!--Group Section=========================-->
            <div class="card w-100 mb-3 cardss">
                <h4 class="m-0 fw-bold mb-3">Group</h4>
                <!--Search Section-->
                <div class="d-flex gap-2">
                    <div class="position-relative w-100">
                        <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                        <input @bind="groupSearch" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search group..." />
                    </div>

                    <button class="btn btn-primary px-4 py-2 text-white m-0" @onclick="ToggleAddGroup" style="width: 100px;">Add</button>

                </div>

                <p class="mb-2 mt-2 ms-2"><em>@groupMessage</em></p>

                <div class="table-containers">
                    <table class="table">
                        <thead>
                            <tr>
                                <th class="thead">Group</th>
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in filteredGroupList)
                            {
                                <tr class="table-row">
                                    <td class="table-cell" @onclick="(() => GetGroupAndMembers(item.Id, item.Name))" style="font-weight:500;"><p class="link">@item.Name</p></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!--View Group Panel-->
        <div class="groupPanel @(isViewPanel ? "grows" : "")">
            <div>
                <div class="d-flex gap-3 w-auto align-items-start">
                    <h4 class="m-0 fw-bold mb-3">@groupName</h4>
                    <i class="bi bi-pencil-square p-0 fs-4 cursor" style="margin-top: -4px; opacity: .50;"></i>
                </div>
                
                <!--Search Section-->
                <div class="d-flex gap-2">
                    <div class="position-relative w-100">
                        <i class="bi bi-search position-absolute c2" style="top: .5rem; left: .75rem; font-size: 18px;"></i>
                        <input @bind="existingMemberSearch" @bind:event="oninput" type="text" class="form-control border search" placeholder="Search group..." />
                    </div>
                </div>

                <p class="mb-2 mt-2 ms-2"><em>@viewMembersMessage</em></p>
            </div>
            

            <div class="table-containers">
                <table class="table">
                    <thead>
                        <tr>
                            <th class="thead" style="width: auto; white-space: nowrap;"><input @onchange="ToggleMembersCheckbox" type="checkbox" /></th>
                            <th class="thead">Name</th>
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var item in filteredExistingMemberList)
                        {
                            <tr class="table-row">
                                <td class="table-cell" style="width: auto; white-space: nowrap;">
                                    <input @bind="item.isSelected" type="checkbox" />
                                </td>
                                <td class="table-cell" style="font-weight:500;"><p class="link">@item.Member.GetFullName()</p></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <div class="d-flex gap-2 justify-content-end">
                <button class="btn btn-danger px-4 py-2 text-white m-0" @onclick="RemoveMembers" style="width: 100px;">Delete</button>
                <button class="btn btn-primary px-4 py-2 text-white m-0" @onclick="() => ToggleShowMember(groupId)" style="width: 100px;">Add</button>
            </div>

        </div>
    </div>
    
</div>

@code {
    //Variable Declarations
    private bool isAddDepartmentModalVisible = false;
    private string title = "Add Group";
    private Group group = new();
    private List<Attendance> attendancesList = new();
    private List<Group> groupList = new();
    private List<GroupMemberSelection> groupMemberList { get; set; } = new();
    private List<GroupMemberSelection> groupMemberSelectionList { get; set; } = new();
    private List<GroupMemberSelection> existingMemberList { get; set; } = new();
    private bool isValidating = false;
    private bool isView = false;
    private string groupMessage = string.Empty;
    private string attendanceMessage = string.Empty;
    private string groupMemberMessage = string.Empty;
    private bool isToggleGroup = false;
    private bool isAllSelected { get; set; } = true;
    private string searchString = string.Empty;
    private string memberSearch = string.Empty;
    private string groupSearch { get; set; } = string.Empty;
    private string groupMemberSearch { get; set; } = string.Empty;
    private string viewMemberSearch { get; set; } = string.Empty;
    private bool isViewPanel = false;
    private string groupName = string.Empty;
    private string groupId = string.Empty;
    private string viewMembersMessage = string.Empty;
    private bool isAddMemberVisible = false;
    private string existingMemberSearch = string.Empty;

    private IEnumerable<GroupMemberSelection> filteredMember => groupMemberSelectionList.Where(u => string.IsNullOrWhiteSpace(memberSearch) || u.Member.GetFullName().Contains(memberSearch, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<Attendance> filteredList => attendancesList.Where(u => string.IsNullOrWhiteSpace(searchString) || u.Date.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase)).ToList();
    private IEnumerable<Group> filteredGroupList => groupList.Where(u => string.IsNullOrWhiteSpace(groupSearch) || u.Name.Contains(groupSearch, StringComparison.OrdinalIgnoreCase));
    private IEnumerable<GroupMemberSelection> filteredGroupMemberList => groupMemberList.Where(u => string.IsNullOrWhiteSpace(groupMemberSearch));
    private IEnumerable<GroupMemberSelection> filteredExistingMemberList => existingMemberList.Where(u => string.IsNullOrWhiteSpace(existingMemberSearch) || u.Member.GetFullName().Contains(existingMemberSearch, StringComparison.OrdinalIgnoreCase));

    //Email
    private string body = "Hello everyone, this is a test email!";
    private string status = "";

    //Load List during page initialization
    protected override async Task OnInitializedAsync()
    {
        await GetAllGroups();
    }

    private async Task RemoveMembers()
    {
        var membersToDelete = existingMemberList.Where(u => u.isSelected).ToList();

        foreach (var item in membersToDelete)
        {
            var result = await _groupMemberService.RemoveGroupMembersAsync(item.Member.Id);
        }

        await _js.InvokeVoidAsync("alert", "Members successfully deleted!");
        await GetGroupAndMembers(groupId,groupName);

    }

    //Toggle checkboxes
    private void ToggleMembersCheckbox(ChangeEventArgs e)
    {
        bool isCheck = (bool)e.Value!;

        foreach (var item in existingMemberList)
        {
            item.isSelected = isCheck;
        }
    }

    //Add Members to Existing group
    private async Task AddMembers(string Id)
    {
        var memToAdd = groupMemberSelectionList.Where(u => u.isSelected).ToList();

        if (memToAdd != null)
        {
            foreach (var item in memToAdd)
            {
                var m = new GroupMember
                    {
                        GroupId = Id,
                        MemberId = item.Member.Id
                    };
                var result = await _groupMemberService.AddGroupMembersAsync(m);
            }


            await GetGroupAndMembers(groupId, groupName);
            isAddDepartmentModalVisible = !isAddDepartmentModalVisible;
            await _js.InvokeVoidAsync("alert", "Members Added Successfully!");


        }
        else
        {

        }
    }

    //Get All members
    private async Task GetAllMembers()
    {
        var result = await _memberService.GetMembersAsync();

        if (result.Success)
        {
            var members = result.Data;

            groupMemberSelectionList = members.Select(u => new GroupMemberSelection
            {
                isSelected = true,
                Member = u
            }).ToList();

        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get members: " + result.Error);
        }
    }

    //Get Group and its members
    private async Task GetGroupAndMembers(string Id, string Name)
    {
        existingMemberList.Clear();
        viewMembersMessage = "Fetching data, please wait...";
        isViewPanel = true;
        groupName = Name;
        groupId = Id;

        var result = await _groupMemberService.GetGroupMembersByGroupIdAsync(Id);


        if (result.Success)
        {
            if (result.Data != null)
            {
                var results = await _memberService.GetMembersAsync();
                if (results.Success)
                {
                    var memIds = result.Data.Select(u => u.MemberId).ToHashSet();
                    var mems = results.Data.Where(u => memIds.Contains(u.Id)).ToList();

                    if (memIds == null && mems == null)
                    {
                        viewMembersMessage = "No members found";
                        return;
                    }

                    existingMemberList = mems.Select(m => new GroupMemberSelection
                    {
                        Member = m,
                        isSelected = false
                    }).ToList();

                    viewMembersMessage = string.Empty;
                }
                else
                {
                    viewMembersMessage = "There was an error retrieving the data. Please try again.";
                }
            }
            else
            {
                existingMemberList.Clear();
                viewMembersMessage = "No members found";
            }

        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get data");
            viewMembersMessage = "There was an error retrieving the data. Please try again.";
        }
    }

    //Update GroupMembers and Group
    private async Task UpdateGroupAndMembers()
    {
        var result = await _groupService.UpdateGroupAsync(group);

        if (result.Success)
        {
            var toAdd = groupMemberList.Where(u => u.isSelected).Select(u => u.Member.Id).ToList();

            var results = await _groupMemberService.RemoveGroupMembersAsync(group.Id);
            if (results.Success)
            {
                foreach (var item in toAdd)
                {
                    var mem = new GroupMember
                    {
                        GroupId = group.Id,
                        MemberId = item
                    };
                    await _groupMemberService.AddGroupMembersAsync(mem);
                }
            }
            isAddDepartmentModalVisible = false;
            await GetAllGroups();
            await _js.InvokeVoidAsync("alert", "Group updated successfully!");
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to update group: " + result.Error);
        }
    }

    //Get All Groups
    private async Task GetAllGroups()
    {
        groupMessage = "Fetching data, please wait...";
        var result = await _groupService.GetGroupsAsync();

        if (result.Success)
        {
            groupList = result.Data;

            if (groupList == null || groupList.Count == 0)
            {
                groupMessage = "No records found";
            }

            groupMessage = string.Empty;
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get groups: " + result.Error);
            groupMessage = "Failed to get data. please refresh page";
        }
    }

    //Select All members
    private void ToggleCheckbox(ChangeEventArgs e)
    {
        isAllSelected = (bool)e.Value!;
        foreach (var item in groupMemberSelectionList)
        {
            item.isSelected = isAllSelected;
        }
    }

    private void ToggleCheckBoxUpdate(ChangeEventArgs e)
    {
        isAllSelected = (bool)e.Value!;
        foreach (var item in groupMemberList)
        {
            item.isSelected = isAllSelected;
        }
    }


    //Adding Groups and Members
    private async Task AddGroupAndMembers()
    {
        var groupResult = await _groupService.AddGroupAsync(group);
        isAllSelected = false;

        if (groupResult.Success)
        {
            var membersToAdd = groupMemberSelectionList.Where(u => u.isSelected).Select(u => u.Member).ToList();

            if (membersToAdd != null)
            {
                foreach (var m in membersToAdd)
                {
                    var mem = new GroupMember
                    {
                        GroupId = groupResult.Id,
                        MemberId = m.Id
                    };

                    var result = await _groupMemberService.AddGroupMembersAsync(mem);
                }

                isAddDepartmentModalVisible = false;
                await GetAllGroups();

                await _js.InvokeVoidAsync("alert", "Group added successfully!");
            }
            else
            {
                await _js.InvokeVoidAsync("alert", "Group added successfully!");
            }

        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to add group: " + groupResult.Error);
        }
    }

    //Toggle Modal
    private void ToggleBackModal()
    {
        isAddDepartmentModalVisible = !isAddDepartmentModalVisible;

    }

    private async Task ToggleAddGroup()
    {
        ToggleBackModal();
        group = new();
        isAddMemberVisible = false;
        await GetAllMembers();
        isView = true;
    }

    private async Task ToggleShowMember(string Id)
    {
        isAddDepartmentModalVisible = !isAddDepartmentModalVisible;
        isView = false;

        var result = await _memberService.GetMembersAsync();


        if (result.Success)
        {
            var results = await _groupMemberService.GetGroupMembersByGroupIdAsync(Id);

            if (results.Success)
            {
                
                var members = result.Data;
                var Ids = results.Data.Select(u => u.MemberId).ToHashSet();

                groupMemberSelectionList = members.Where(u => !Ids.Contains(u.Id)).Select(u => new GroupMemberSelection
                {
                    isSelected = true,
                    Member = u
                }).ToList();
            }
        }
        else
        {
            await _js.InvokeVoidAsync("alert", "Failed to get members: " + result.Error);
        }

        isAddMemberVisible = !isAddMemberVisible;
    }

    //Toggle Group modal
    private void ToggleGroup()
    {
        isAllSelected = true;
        isToggleGroup = !isToggleGroup; 
    }

    public class GroupMemberSelection
    {
        public bool isSelected { get; set; }
        public Member Member { get; set; }
    }

    
}

