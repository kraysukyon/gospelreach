@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject GospelReachCapstone.Services.FirebaseAuthenticationService FirebaseAuthService
@inject GospelReachCapstone.Services.AuthState Auth
@inject GospelReachCapstone.Services.UserService _accountService
@inject ToastService _toast
@using GospelReachCapstone.Models;
@using System.Globalization


<PageTitle>Home</PageTitle>

<div class="home">
    <!--Login Modal-->
    <div class="loginModal @(isLoginModalVisible ? "open" : "")" @onclick="showLogin">
        <div class="login" @onclick:stopPropagation>
            <img src="/img/tsalogo.png" style="width:50px;" alt="logo" />
            <h3 class="fw-bold">
                Access Control
            </h3>
            <p>Please enter credentials</p>

            <div class="w-100 d-flex flex-column gap-3 mt-3">
                <div class="inputs input">
                    <i class="bi bi-person fs-5"></i>
                    <input readonly="@(isLogginIn ? true : false)" @bind-value="email" @bind-value:event="oninput" spellcheck="false" type="text" placeholder="Email"/>
                    <i class="bi bi-eye opacity-0"></i>
                </div>
                <div class="inputs input" style="padding: .6rem .2rem;">
                    <i class="bi bi-lock" style="padding:5px 12px;"></i>
                    <input readonly="@(isLogginIn ? true : false)" @bind="password" @bind:event="oninput" @onkeydown="HandleKeyDown" spellcheck="false" type="@(isPasswordShow ? "text" : "password")" placeholder="Password" />
                    <i @onclick="TogglePassword" class="@(!isPasswordShow ? "bi bi-eye" : "bi bi-eye-slash")" style="cursor:pointer"></i>

                </div>
                
                @if (validation.Any())
                {
                    <div class="d-flex flex-column justify-content-center mt-1">
                        @foreach (string a in validation)
                        {
                            <p class="text-danger text-center">@a</p>
                        }
                    </div>
                }
                <div class="d-flex flex-column align-items-center justify-content-center">
                    <button disabled="@isLogginIn" class="btn btn-primary w-100 py-2 mt-3 mb-2" @onclick="ValidateLogin">Login</button>
                    <p>or</p>
                    <button disabled="@isLogginIn" class="btn border border-1 w-100 py-2 mt-2" @onclick="ContinueAsGuest">Continue As Guest</button>
                </div>
                
            </div>
        </div>
    </div>


    <!--Header Section-->
    <div class="header d-flex d-md-flex align-items-center justify-content-between py-2">
        <img src="/img/logo_white_bg.png" style="width:40px;" alt="tsa logo" class="logo" />
        <div class="menu @(isSidebarVisible ? "show" : "")">
            <div class="op">
                <a @onclick='() => ScrollToSection("aboutUs")' class="text-decoration-none text-white cursor">About</a>
            </div>

            <div class="op">
                <a @onclick='() => ScrollToSection("services")' class="text-decoration-none text-white cursor">Services</a>
            </div>

            <div class="op">
                <a @onclick='() => ScrollToSection("contactUs")' class="text-decoration-none text-white cursor">Contact Us</a>
            </div>

            <button class="btn btn-primary px-4 py-1" @onclick="showLogin">Login</button>
        </div>
        <button class="option" @onclick="showOption"><i class="bi bi-list option-icon"></i></button>
    </div>

    <!--Content1-->
    <div class="content1">
        <div class="overlay"></div>
        <div class="cont">
            <div class="wrap">
                <h1 class="fw-bolder">
                    THE SALVATION ARMY
                </h1>
                <h1 class="fw-bolder">
                    MANDAUE OUTPOST
                </h1>
            </div>

            <p>
                The Salvation Army is an international Christian organization and church,<br />
                founded in 1865, that focuses on both evangelism and social service, particularly<br />
                helping those in need, with a quasi-military structure and presence in over 130<br />
                countries.
            </p>
        </div>

    </div>

    <!--Content2-->
    <div id="aboutUs" class="content2">
        <div class="mb-4">
            <p class="text-primary fw-bold">About Section</p>
            <h1 class="fw-bold">
                WHO WE ARE
            </h1>
        </div>

        <div>
            <p class="fw-light mb-4">
                The Salvation Army Mandaue Outpost is a faith-driven community committed to worship, discipleship, and service, carrying forward the mission of the worldwide Salvation Army: to preach the gospel of Jesus Christ and meet human needs in His name without discrimination. Rooted in compassion and integrity, the Outpost serves both the spiritual and practical needs of its congregation and community, providing a place of worship, fellowship, and outreach.

                To strengthen its ministry and ensure more effective operations, the Outpost has adopted the GospelReach Church Management System. This web-based platform streamlines core church functions such as attendance tracking, member management, and event coordination, ensuring accurate and transparent records. More than just a digital tool, GospelReach empowers church leaders with real-time insights into member engagement, fosters stronger communication, and supports the Outpost’s mission of accountability, growth, and faithful service.
            </p>

            <p class="fw-light">
                The Salvation Army Mandaue Outpost is a faith-driven community committed to worship, discipleship, and service, carrying forward the mission of the worldwide Salvation Army: to preach the gospel of Jesus Christ and meet human needs in His name without discrimination. Rooted in compassion and integrity, the Outpost serves both the spiritual and practical needs of its congregation and community, providing a place of worship, fellowship, and outreach.

                To strengthen its ministry and ensure more effective operations, the Outpost has adopted the GospelReach Church Management System. This web-based platform streamlines core church functions such as attendance tracking, member management, and event coordination, ensuring accurate and transparent records. More than just a digital tool, GospelReach empowers church leaders with real-time insights into member engagement, fosters stronger communication, and supports the Outpost’s mission of accountability, growth, and faithful service.
            </p>
        </div>
    </div>

    <div id="services" class="content2">
        <div class="mb-4">
            <p class="text-primary fw-bold">Service Section</p>
            <h1 class="fw-bold">
                WHAT WE DO
            </h1>
        </div>

        <div>
            <p class="fw-light mb-4">At the Salvation Army Mandaue Outpost, we focus on both spiritual growth and community service. Through regular worship services, discipleship programs, and outreach initiatives, we provide a space where individuals and families can strengthen their faith and experience fellowship. With the help of the GospelReach Church Management System, we are able to organize and monitor our ministries more effectively. The system enables us to track attendance, manage member information, and coordinate church events with greater accuracy and efficiency.</p>
        </div>
    </div>

    <!--End Container-->
    <div id="contactUs" class="d-flex flex-column">
        <div id="contactUs" class="endContainer">
            <div class="end1">
                <div class="w-auto">
                    <div class="d-flex gap-4 align-items-center justify-content-center">
                        <img src="/img/tsalogo-bnw.png" alt="tsa logo" />
                        <h5 class="fw-bold">Mandaue<br />Outpost</h5>
                    </div>
                    <p class="text-wrap mt-2 text-center">
                        Mandaue Outpost Head Coordinator:<br />
                        Aprilyn Nanlabi
                    </p>
                </div>
            </div>

            <div class="end2">
                <h5 class="fw-bold mb-2">Contact Us</h5>
                <div class="e1">
                    <div class="d-flex gap-3">
                        <i class="bi bi-telephone"></i>
                        <p>(+63)990-213-5432)</p>
                    </div>
                    <div class="d-flex gap-3">
                        <i class="bi bi-envelope"></i>
                        <p>tsamandauecorps@gmail.com</p>
                    </div>
                    <div class="d-flex gap-3">
                        <i class="bi bi-geo-alt"></i>
                        <p>F. Mendoza Street Cambaro, Mandaue City<br />Cebu, Philippines</p>
                    </div>
                </div>
            </div>
        </div>
        <!--End of Container-->
    </div>

    <!--Closing-->
    <div class="close">
        <p>All Rights Reserved: Copyright © 2025</p>
    </div>
</div>


@code {
    private bool isLoginModalVisible = false;
    private bool isSidebarVisible = false;
    private bool isLogginIn = false;
    private bool isPasswordShow = false;
    private TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;

    //variables for authentication
    private string email = string.Empty;
    private string password = string.Empty;
    private List<User> accounts = new();
    private List<string> validation = new();

    protected override async Task OnInitializedAsync()
    {
        bool isOnline = await JSRuntime.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        if (Auth.IsLoggedIn)
        {
            await FirebaseAuthService.LogoutAsync(); // Ensure user is logged out on initialization
        }
    }

    private void TogglePassword()
    {
        isPasswordShow = !isPasswordShow;
    }

    private void showOption()
    {
        isSidebarVisible = !isSidebarVisible;
    }

    private void showLogin()
    {
        isSidebarVisible = false;
        isLoginModalVisible = !isLoginModalVisible;
    }

    private void closeModal()
    {
        isLoginModalVisible = false;
        isSidebarVisible = false;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ValidateLogin();
        }
    }

    private async Task ValidateLogin()
    {
        validation.Clear();
        isLogginIn = !isLogginIn;
        bool isOnline = await JSRuntime.InvokeAsync<bool>("networkHelper.isOnline");

        if (!isOnline)
        {
            isLogginIn = !isLogginIn;
            _toast.AddNotification("error", "Connection Error", "Check your internet connection");
            return;
        }

        if (string.IsNullOrEmpty(email) || string.IsNullOrEmpty(email))
        {
            validation.Add("Please input required fields");
            isLogginIn = !isLogginIn;
            return;
        }

        var results = await FirebaseAuthService.LoginAsync(email, password);
        if (results.Success)
        {
            var result = await _accountService.GetUserAccountsAsync();
            if (result.Success)
            {
                if (result.Data != null)
                {
                    var data = result.Data;

                    var user = result.Data.FirstOrDefault(u => u.Email == email);

                    if (user != null)
                    {
                        if (!string.IsNullOrEmpty(user.LockUntil))
                        {
                            if (DateTime.Now >= DateTime.Parse(user.LockUntil))
                            {
                                if (user.Status != "Disabled")
                                {
                                    user.LockUntil = string.Empty;
                                    user.Attempts = 5;
                                    var reset = await _accountService.UpdateAttempt(user);
                                    Auth.IsLoggedIn = true;
                                    Auth.Role = user.Role;
                                    Auth.DisplayName = textInfo.ToTitleCase(user.FirstName);
                                    Auth.UserId = user.Id;
                                    switch (Auth.Role)
                                    {
                                        case "Department Head - Senior":
                                            Auth.Department = "Senior";
                                            break;

                                        case "Department Head - Womens":
                                            Auth.Department = "Womens";
                                            break;

                                        case "Department Head - Mens":
                                            Auth.Department = "Mens";
                                            break;

                                        case "Department Head - Youth":
                                            Auth.Department = "Youth";

                                            break;

                                        default:
                                            Auth.Department = "Administrator";
                                            break;

                                    }
                                    NavigationManager.NavigateTo("dashboard");
                                    return;
                                }
                                else
                                {
                                    validation.Add("The accounts is disabled. Please contact administrator");
                                    // await JSRuntime.InvokeVoidAsync("alert", "The account is disabled. Please contact administrator");
                                }
                            }
                            else
                            {
                                isLogginIn = false;
                                validation.Add("Too many login attempts. Try again later.");
                                // await JSRuntime.InvokeVoidAsync("alert", "Too many login attempts. Try again later.");
                                return;
                            }
                        }

                        if (user.Attempts > 0)
                        {
                            if (user.Status != "Disabled")
                            {
                                user.LockUntil = string.Empty;
                                user.Attempts = 5;
                                var reset = await _accountService.UpdateAttempt(user);
                                Auth.IsLoggedIn = true;
                                Auth.Role = user.Role;
                                Auth.DisplayName = textInfo.ToTitleCase(user.FirstName);
                                Auth.UserId = user.Id;
                                switch (Auth.Role)
                                {
                                    case "Department Head - Senior":
                                        Auth.Department = "Senior";
                                        break;

                                    case "Department Head - Womens":
                                        Auth.Department = "Womens";
                                        break;

                                    case "Department Head - Mens":
                                        Auth.Department = "Mens";
                                        break;

                                    case "Department Head - Youth":
                                        Auth.Department = "Youth";

                                        break;

                                    default:
                                        Auth.Department = "Administrator";
                                        break;

                                }
                                NavigationManager.NavigateTo("dashboard");
                                return;
                            }
                            else
                            {
                                isLogginIn = false;
                                validation.Add("The accounts is disabled. Please contact administrator");
                                // await JSRuntime.InvokeVoidAsync("alert", "The account is disabled. Please contact administrator");
                                return;
                            }
                        }
                        else
                        {
                            isLogginIn = false;
                            validation.Add("Too many login attempts. Try again later.");
                            // await JSRuntime.InvokeVoidAsync("alert", "Too many attempts. Please try again later.");
                            return;
                        }
                    }
                    else
                    {
                        validation.Add("Invalid credentials");
                        return;
                    }
                }
                else
                {
                    // validation.Add("Too many login attempts. Try again later.");
                    // await JSRuntime.InvokeVoidAsync("alert", "No data found");
                }
            }
            else
            {
                validation.Add("Something went wrong. Try again later.");
                // await JSRuntime.InvokeVoidAsync("alert", result.Error);
            }
        }
        else
        {

            switch (results.ErrorCode)
            {
                case "auth/user-not-found":
                    validation.Add("No user found with this email");
                    // await JSRuntime.InvokeVoidAsync("alert", "No user found with this email.");
                    break;
                case "auth/invalid-login-credentials":
                    var accRes = await _accountService.GetUserByEmail(email);
                    if (accRes.Success && accRes.User != null)
                    {
                        if (!string.IsNullOrEmpty(accRes.User.LockUntil))
                        {
                            if (DateTime.Now >= DateTime.Parse(accRes.User.LockUntil))
                            {
                                accRes.User.Attempts = 5;
                                accRes.User.LockUntil = string.Empty;
                                var updateRes = await _accountService.UpdateAttempt(accRes.User);
                            }
                        }


                        int attempt = accRes.User.Attempts;
                        if (attempt > 1)
                        {
                            accRes.User.Attempts = attempt - 1;
                            var updateRes = await _accountService.UpdateAttempt(accRes.User);
                            validation.Add("Invalid credentials");
                            // await JSRuntime.InvokeVoidAsync("alert", "Invalid Credentials");
                        }
                        else
                        {   
                            if (string.IsNullOrEmpty(accRes.User.LockUntil))
                            {
                                accRes.User.Attempts = 0;
                                accRes.User.LockUntil = DateTime.Now.AddHours(3).ToString();
                                var res = await _accountService.UpdateAttempt(accRes.User);
                            }
                            validation.Add("Too many login attempts. Try again later");
                            // await JSRuntime.InvokeVoidAsync("alert", "Too many login attempts. Try again later");
                        }
                    }
                    else
                    {
                        validation.Add("Invalid credentials");
                        // await JSRuntime.InvokeVoidAsync("alert", "Invalid Credentials.");
                    }
                    

                    break;
                case "auth/too-many-requests":
                    validation.Add("Too many attempts. Please try again later");
                    // await JSRuntime.InvokeVoidAsync("alert", "Too many attempts. Please try again later.");
                    break;
                default:
                    validation.Add("Invalid credentials");
                    // await JSRuntime.InvokeVoidAsync("alert", results.Error); fallback to Firebase message
                    break;
            }
            
        }
        isLogginIn = !isLogginIn;
    }

    //scroll to id
    private async Task ScrollToSection(string id)
    {
        await JSRuntime.InvokeVoidAsync("scrollToSection", id);
    }

    //Login as Guest
    private void ContinueAsGuest()
    {
        Auth.IsLoggedIn = true;
        Auth.Role = "Guest";
        Auth.DisplayName = textInfo.ToTitleCase("Guest");
        NavigationManager.NavigateTo("dashboard");
    }

}